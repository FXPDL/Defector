

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Aug 08 22:55:05 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     	;# 
    39  0001                     	;# 
    40  0002                     	;# 
    41  0003                     	;# 
    42  0004                     	;# 
    43  0005                     	;# 
    44  0006                     	;# 
    45  0007                     	;# 
    46  0008                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000E                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  008C                     	;# 
    65  008E                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0095                     	;# 
    70  0096                     	;# 
    71  0097                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  010E                     	;# 
    82  0111                     	;# 
    83  0112                     	;# 
    84  0113                     	;# 
    85  0114                     	;# 
    86  0115                     	;# 
    87  0116                     	;# 
    88  0117                     	;# 
    89  0118                     	;# 
    90  0119                     	;# 
    91  011D                     	;# 
    92  018C                     	;# 
    93  018E                     	;# 
    94  0191                     	;# 
    95  0191                     	;# 
    96  0192                     	;# 
    97  0193                     	;# 
    98  0193                     	;# 
    99  0194                     	;# 
   100  0195                     	;# 
   101  0196                     	;# 
   102  0197                     	;# 
   103  020C                     	;# 
   104  0211                     	;# 
   105  0211                     	;# 
   106  0212                     	;# 
   107  0212                     	;# 
   108  0213                     	;# 
   109  0213                     	;# 
   110  0214                     	;# 
   111  0214                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0215                     	;# 
   115  0216                     	;# 
   116  0216                     	;# 
   117  0217                     	;# 
   118  0217                     	;# 
   119  0391                     	;# 
   120  0392                     	;# 
   121  0393                     	;# 
   122  0498                     	;# 
   123  0498                     	;# 
   124  0499                     	;# 
   125  049A                     	;# 
   126  049B                     	;# 
   127  049B                     	;# 
   128  049C                     	;# 
   129  049D                     	;# 
   130  049E                     	;# 
   131  049F                     	;# 
   132  0611                     	;# 
   133  0612                     	;# 
   134  0613                     	;# 
   135  0613                     	;# 
   136  0614                     	;# 
   137  0615                     	;# 
   138  0616                     	;# 
   139  0616                     	;# 
   140  0617                     	;# 
   141  0618                     	;# 
   142  0619                     	;# 
   143  0619                     	;# 
   144  061A                     	;# 
   145  061B                     	;# 
   146  061C                     	;# 
   147  061C                     	;# 
   148  0691                     	;# 
   149  0692                     	;# 
   150  0693                     	;# 
   151  0694                     	;# 
   152  0695                     	;# 
   153  0F0F                     	;# 
   154  0F10                     	;# 
   155  0F11                     	;# 
   156  0F12                     	;# 
   157  0F13                     	;# 
   158  0F14                     	;# 
   159  0F15                     	;# 
   160  0F16                     	;# 
   161  0F17                     	;# 
   162  0F18                     	;# 
   163  0F19                     	;# 
   164  0F1A                     	;# 
   165  0F1B                     	;# 
   166  0F1C                     	;# 
   167  0F1D                     	;# 
   168  0F1E                     	;# 
   169  0F1F                     	;# 
   170  0FE3                     	;# 
   171  0FE4                     	;# 
   172  0FE5                     	;# 
   173  0FE6                     	;# 
   174  0FE7                     	;# 
   175  0FE8                     	;# 
   176  0FE9                     	;# 
   177  0FEA                     	;# 
   178  0FEB                     	;# 
   179  0FED                     	;# 
   180  0FEE                     	;# 
   181  0FEF                     	;# 
   182  0000                     	;# 
   183  0001                     	;# 
   184  0002                     	;# 
   185  0003                     	;# 
   186  0004                     	;# 
   187  0005                     	;# 
   188  0006                     	;# 
   189  0007                     	;# 
   190  0008                     	;# 
   191  0009                     	;# 
   192  000A                     	;# 
   193  000B                     	;# 
   194  000C                     	;# 
   195  000E                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0013                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  008C                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0095                     	;# 
   214  0096                     	;# 
   215  0097                     	;# 
   216  0099                     	;# 
   217  009A                     	;# 
   218  009B                     	;# 
   219  009B                     	;# 
   220  009C                     	;# 
   221  009D                     	;# 
   222  009E                     	;# 
   223  009F                     	;# 
   224  010C                     	;# 
   225  010E                     	;# 
   226  0111                     	;# 
   227  0112                     	;# 
   228  0113                     	;# 
   229  0114                     	;# 
   230  0115                     	;# 
   231  0116                     	;# 
   232  0117                     	;# 
   233  0118                     	;# 
   234  0119                     	;# 
   235  011D                     	;# 
   236  018C                     	;# 
   237  018E                     	;# 
   238  0191                     	;# 
   239  0191                     	;# 
   240  0192                     	;# 
   241  0193                     	;# 
   242  0193                     	;# 
   243  0194                     	;# 
   244  0195                     	;# 
   245  0196                     	;# 
   246  0197                     	;# 
   247  020C                     	;# 
   248  0211                     	;# 
   249  0211                     	;# 
   250  0212                     	;# 
   251  0212                     	;# 
   252  0213                     	;# 
   253  0213                     	;# 
   254  0214                     	;# 
   255  0214                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0216                     	;# 
   260  0216                     	;# 
   261  0217                     	;# 
   262  0217                     	;# 
   263  0391                     	;# 
   264  0392                     	;# 
   265  0393                     	;# 
   266  0498                     	;# 
   267  0498                     	;# 
   268  0499                     	;# 
   269  049A                     	;# 
   270  049B                     	;# 
   271  049B                     	;# 
   272  049C                     	;# 
   273  049D                     	;# 
   274  049E                     	;# 
   275  049F                     	;# 
   276  0611                     	;# 
   277  0612                     	;# 
   278  0613                     	;# 
   279  0613                     	;# 
   280  0614                     	;# 
   281  0615                     	;# 
   282  0616                     	;# 
   283  0616                     	;# 
   284  0617                     	;# 
   285  0618                     	;# 
   286  0619                     	;# 
   287  0619                     	;# 
   288  061A                     	;# 
   289  061B                     	;# 
   290  061C                     	;# 
   291  061C                     	;# 
   292  0691                     	;# 
   293  0692                     	;# 
   294  0693                     	;# 
   295  0694                     	;# 
   296  0695                     	;# 
   297  0F0F                     	;# 
   298  0F10                     	;# 
   299  0F11                     	;# 
   300  0F12                     	;# 
   301  0F13                     	;# 
   302  0F14                     	;# 
   303  0F15                     	;# 
   304  0F16                     	;# 
   305  0F17                     	;# 
   306  0F18                     	;# 
   307  0F19                     	;# 
   308  0F1A                     	;# 
   309  0F1B                     	;# 
   310  0F1C                     	;# 
   311  0F1D                     	;# 
   312  0F1E                     	;# 
   313  0F1F                     	;# 
   314  0FE3                     	;# 
   315  0FE4                     	;# 
   316  0FE5                     	;# 
   317  0FE6                     	;# 
   318  0FE7                     	;# 
   319  0FE8                     	;# 
   320  0FE9                     	;# 
   321  0FEA                     	;# 
   322  0FEB                     	;# 
   323  0FED                     	;# 
   324  0FEE                     	;# 
   325  0FEF                     	;# 
   326  0000                     	;# 
   327  0001                     	;# 
   328  0002                     	;# 
   329  0003                     	;# 
   330  0004                     	;# 
   331  0005                     	;# 
   332  0006                     	;# 
   333  0007                     	;# 
   334  0008                     	;# 
   335  0009                     	;# 
   336  000A                     	;# 
   337  000B                     	;# 
   338  000C                     	;# 
   339  000E                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0013                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  008C                     	;# 
   353  008E                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  010C                     	;# 
   369  010E                     	;# 
   370  0111                     	;# 
   371  0112                     	;# 
   372  0113                     	;# 
   373  0114                     	;# 
   374  0115                     	;# 
   375  0116                     	;# 
   376  0117                     	;# 
   377  0118                     	;# 
   378  0119                     	;# 
   379  011D                     	;# 
   380  018C                     	;# 
   381  018E                     	;# 
   382  0191                     	;# 
   383  0191                     	;# 
   384  0192                     	;# 
   385  0193                     	;# 
   386  0193                     	;# 
   387  0194                     	;# 
   388  0195                     	;# 
   389  0196                     	;# 
   390  0197                     	;# 
   391  020C                     	;# 
   392  0211                     	;# 
   393  0211                     	;# 
   394  0212                     	;# 
   395  0212                     	;# 
   396  0213                     	;# 
   397  0213                     	;# 
   398  0214                     	;# 
   399  0214                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0215                     	;# 
   403  0216                     	;# 
   404  0216                     	;# 
   405  0217                     	;# 
   406  0217                     	;# 
   407  0391                     	;# 
   408  0392                     	;# 
   409  0393                     	;# 
   410  0498                     	;# 
   411  0498                     	;# 
   412  0499                     	;# 
   413  049A                     	;# 
   414  049B                     	;# 
   415  049B                     	;# 
   416  049C                     	;# 
   417  049D                     	;# 
   418  049E                     	;# 
   419  049F                     	;# 
   420  0611                     	;# 
   421  0612                     	;# 
   422  0613                     	;# 
   423  0613                     	;# 
   424  0614                     	;# 
   425  0615                     	;# 
   426  0616                     	;# 
   427  0616                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0FE3                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000E                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0013                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  008C                     	;# 
   497  008E                     	;# 
   498  0091                     	;# 
   499  0092                     	;# 
   500  0093                     	;# 
   501  0095                     	;# 
   502  0096                     	;# 
   503  0097                     	;# 
   504  0099                     	;# 
   505  009A                     	;# 
   506  009B                     	;# 
   507  009B                     	;# 
   508  009C                     	;# 
   509  009D                     	;# 
   510  009E                     	;# 
   511  009F                     	;# 
   512  010C                     	;# 
   513  010E                     	;# 
   514  0111                     	;# 
   515  0112                     	;# 
   516  0113                     	;# 
   517  0114                     	;# 
   518  0115                     	;# 
   519  0116                     	;# 
   520  0117                     	;# 
   521  0118                     	;# 
   522  0119                     	;# 
   523  011D                     	;# 
   524  018C                     	;# 
   525  018E                     	;# 
   526  0191                     	;# 
   527  0191                     	;# 
   528  0192                     	;# 
   529  0193                     	;# 
   530  0193                     	;# 
   531  0194                     	;# 
   532  0195                     	;# 
   533  0196                     	;# 
   534  0197                     	;# 
   535  020C                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  0212                     	;# 
   539  0212                     	;# 
   540  0213                     	;# 
   541  0213                     	;# 
   542  0214                     	;# 
   543  0214                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0216                     	;# 
   548  0216                     	;# 
   549  0217                     	;# 
   550  0217                     	;# 
   551  0391                     	;# 
   552  0392                     	;# 
   553  0393                     	;# 
   554  0498                     	;# 
   555  0498                     	;# 
   556  0499                     	;# 
   557  049A                     	;# 
   558  049B                     	;# 
   559  049B                     	;# 
   560  049C                     	;# 
   561  049D                     	;# 
   562  049E                     	;# 
   563  049F                     	;# 
   564  0611                     	;# 
   565  0612                     	;# 
   566  0613                     	;# 
   567  0613                     	;# 
   568  0614                     	;# 
   569  0615                     	;# 
   570  0616                     	;# 
   571  0616                     	;# 
   572  0617                     	;# 
   573  0618                     	;# 
   574  0619                     	;# 
   575  0619                     	;# 
   576  061A                     	;# 
   577  061B                     	;# 
   578  061C                     	;# 
   579  061C                     	;# 
   580  0691                     	;# 
   581  0692                     	;# 
   582  0693                     	;# 
   583  0694                     	;# 
   584  0695                     	;# 
   585  0F0F                     	;# 
   586  0F10                     	;# 
   587  0F11                     	;# 
   588  0F12                     	;# 
   589  0F13                     	;# 
   590  0F14                     	;# 
   591  0F15                     	;# 
   592  0F16                     	;# 
   593  0F17                     	;# 
   594  0F18                     	;# 
   595  0F19                     	;# 
   596  0F1A                     	;# 
   597  0F1B                     	;# 
   598  0F1C                     	;# 
   599  0F1D                     	;# 
   600  0F1E                     	;# 
   601  0F1F                     	;# 
   602  0FE3                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000E                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0013                     	;# 
   631  0015                     	;# 
   632  0016                     	;# 
   633  0016                     	;# 
   634  0017                     	;# 
   635  0018                     	;# 
   636  0019                     	;# 
   637  001A                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  008C                     	;# 
   641  008E                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0093                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  009F                     	;# 
   656  010C                     	;# 
   657  010E                     	;# 
   658  0111                     	;# 
   659  0112                     	;# 
   660  0113                     	;# 
   661  0114                     	;# 
   662  0115                     	;# 
   663  0116                     	;# 
   664  0117                     	;# 
   665  0118                     	;# 
   666  0119                     	;# 
   667  011D                     	;# 
   668  018C                     	;# 
   669  018E                     	;# 
   670  0191                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0193                     	;# 
   674  0193                     	;# 
   675  0194                     	;# 
   676  0195                     	;# 
   677  0196                     	;# 
   678  0197                     	;# 
   679  020C                     	;# 
   680  0211                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0212                     	;# 
   684  0213                     	;# 
   685  0213                     	;# 
   686  0214                     	;# 
   687  0214                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0216                     	;# 
   692  0216                     	;# 
   693  0217                     	;# 
   694  0217                     	;# 
   695  0391                     	;# 
   696  0392                     	;# 
   697  0393                     	;# 
   698  0498                     	;# 
   699  0498                     	;# 
   700  0499                     	;# 
   701  049A                     	;# 
   702  049B                     	;# 
   703  049B                     	;# 
   704  049C                     	;# 
   705  049D                     	;# 
   706  049E                     	;# 
   707  049F                     	;# 
   708  0611                     	;# 
   709  0612                     	;# 
   710  0613                     	;# 
   711  0613                     	;# 
   712  0614                     	;# 
   713  0615                     	;# 
   714  0616                     	;# 
   715  0616                     	;# 
   716  0617                     	;# 
   717  0618                     	;# 
   718  0619                     	;# 
   719  0619                     	;# 
   720  061A                     	;# 
   721  061B                     	;# 
   722  061C                     	;# 
   723  061C                     	;# 
   724  0691                     	;# 
   725  0692                     	;# 
   726  0693                     	;# 
   727  0694                     	;# 
   728  0695                     	;# 
   729  0F0F                     	;# 
   730  0F10                     	;# 
   731  0F11                     	;# 
   732  0F12                     	;# 
   733  0F13                     	;# 
   734  0F14                     	;# 
   735  0F15                     	;# 
   736  0F16                     	;# 
   737  0F17                     	;# 
   738  0F18                     	;# 
   739  0F19                     	;# 
   740  0F1A                     	;# 
   741  0F1B                     	;# 
   742  0F1C                     	;# 
   743  0F1D                     	;# 
   744  0F1E                     	;# 
   745  0F1F                     	;# 
   746  0FE3                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000E                     	;# 
   772  0011                     	;# 
   773  0012                     	;# 
   774  0013                     	;# 
   775  0015                     	;# 
   776  0016                     	;# 
   777  0016                     	;# 
   778  0017                     	;# 
   779  0018                     	;# 
   780  0019                     	;# 
   781  001A                     	;# 
   782  001B                     	;# 
   783  001C                     	;# 
   784  008C                     	;# 
   785  008E                     	;# 
   786  0091                     	;# 
   787  0092                     	;# 
   788  0093                     	;# 
   789  0095                     	;# 
   790  0096                     	;# 
   791  0097                     	;# 
   792  0099                     	;# 
   793  009A                     	;# 
   794  009B                     	;# 
   795  009B                     	;# 
   796  009C                     	;# 
   797  009D                     	;# 
   798  009E                     	;# 
   799  009F                     	;# 
   800  010C                     	;# 
   801  010E                     	;# 
   802  0111                     	;# 
   803  0112                     	;# 
   804  0113                     	;# 
   805  0114                     	;# 
   806  0115                     	;# 
   807  0116                     	;# 
   808  0117                     	;# 
   809  0118                     	;# 
   810  0119                     	;# 
   811  011D                     	;# 
   812  018C                     	;# 
   813  018E                     	;# 
   814  0191                     	;# 
   815  0191                     	;# 
   816  0192                     	;# 
   817  0193                     	;# 
   818  0193                     	;# 
   819  0194                     	;# 
   820  0195                     	;# 
   821  0196                     	;# 
   822  0197                     	;# 
   823  020C                     	;# 
   824  0211                     	;# 
   825  0211                     	;# 
   826  0212                     	;# 
   827  0212                     	;# 
   828  0213                     	;# 
   829  0213                     	;# 
   830  0214                     	;# 
   831  0214                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0216                     	;# 
   836  0216                     	;# 
   837  0217                     	;# 
   838  0217                     	;# 
   839  0391                     	;# 
   840  0392                     	;# 
   841  0393                     	;# 
   842  0498                     	;# 
   843  0498                     	;# 
   844  0499                     	;# 
   845  049A                     	;# 
   846  049B                     	;# 
   847  049B                     	;# 
   848  049C                     	;# 
   849  049D                     	;# 
   850  049E                     	;# 
   851  049F                     	;# 
   852  0611                     	;# 
   853  0612                     	;# 
   854  0613                     	;# 
   855  0613                     	;# 
   856  0614                     	;# 
   857  0615                     	;# 
   858  0616                     	;# 
   859  0616                     	;# 
   860  0617                     	;# 
   861  0618                     	;# 
   862  0619                     	;# 
   863  0619                     	;# 
   864  061A                     	;# 
   865  061B                     	;# 
   866  061C                     	;# 
   867  061C                     	;# 
   868  0691                     	;# 
   869  0692                     	;# 
   870  0693                     	;# 
   871  0694                     	;# 
   872  0695                     	;# 
   873  0F0F                     	;# 
   874  0F10                     	;# 
   875  0F11                     	;# 
   876  0F12                     	;# 
   877  0F13                     	;# 
   878  0F14                     	;# 
   879  0F15                     	;# 
   880  0F16                     	;# 
   881  0F17                     	;# 
   882  0F18                     	;# 
   883  0F19                     	;# 
   884  0F1A                     	;# 
   885  0F1B                     	;# 
   886  0F1C                     	;# 
   887  0F1D                     	;# 
   888  0F1E                     	;# 
   889  0F1F                     	;# 
   890  0FE3                     	;# 
   891  0FE4                     	;# 
   892  0FE5                     	;# 
   893  0FE6                     	;# 
   894  0FE7                     	;# 
   895  0FE8                     	;# 
   896  0FE9                     	;# 
   897  0FEA                     	;# 
   898  0FEB                     	;# 
   899  0FED                     	;# 
   900  0FEE                     	;# 
   901  0FEF                     	;# 
   902  0000                     	;# 
   903  0001                     	;# 
   904  0002                     	;# 
   905  0003                     	;# 
   906  0004                     	;# 
   907  0005                     	;# 
   908  0006                     	;# 
   909  0007                     	;# 
   910  0008                     	;# 
   911  0009                     	;# 
   912  000A                     	;# 
   913  000B                     	;# 
   914  000C                     	;# 
   915  000E                     	;# 
   916  0011                     	;# 
   917  0012                     	;# 
   918  0013                     	;# 
   919  0015                     	;# 
   920  0016                     	;# 
   921  0016                     	;# 
   922  0017                     	;# 
   923  0018                     	;# 
   924  0019                     	;# 
   925  001A                     	;# 
   926  001B                     	;# 
   927  001C                     	;# 
   928  008C                     	;# 
   929  008E                     	;# 
   930  0091                     	;# 
   931  0092                     	;# 
   932  0093                     	;# 
   933  0095                     	;# 
   934  0096                     	;# 
   935  0097                     	;# 
   936  0099                     	;# 
   937  009A                     	;# 
   938  009B                     	;# 
   939  009B                     	;# 
   940  009C                     	;# 
   941  009D                     	;# 
   942  009E                     	;# 
   943  009F                     	;# 
   944  010C                     	;# 
   945  010E                     	;# 
   946  0111                     	;# 
   947  0112                     	;# 
   948  0113                     	;# 
   949  0114                     	;# 
   950  0115                     	;# 
   951  0116                     	;# 
   952  0117                     	;# 
   953  0118                     	;# 
   954  0119                     	;# 
   955  011D                     	;# 
   956  018C                     	;# 
   957  018E                     	;# 
   958  0191                     	;# 
   959  0191                     	;# 
   960  0192                     	;# 
   961  0193                     	;# 
   962  0193                     	;# 
   963  0194                     	;# 
   964  0195                     	;# 
   965  0196                     	;# 
   966  0197                     	;# 
   967  020C                     	;# 
   968  0211                     	;# 
   969  0211                     	;# 
   970  0212                     	;# 
   971  0212                     	;# 
   972  0213                     	;# 
   973  0213                     	;# 
   974  0214                     	;# 
   975  0214                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0216                     	;# 
   980  0216                     	;# 
   981  0217                     	;# 
   982  0217                     	;# 
   983  0391                     	;# 
   984  0392                     	;# 
   985  0393                     	;# 
   986  0498                     	;# 
   987  0498                     	;# 
   988  0499                     	;# 
   989  049A                     	;# 
   990  049B                     	;# 
   991  049B                     	;# 
   992  049C                     	;# 
   993  049D                     	;# 
   994  049E                     	;# 
   995  049F                     	;# 
   996  0611                     	;# 
   997  0612                     	;# 
   998  0613                     	;# 
   999  0613                     	;# 
  1000  0614                     	;# 
  1001  0615                     	;# 
  1002  0616                     	;# 
  1003  0616                     	;# 
  1004  0617                     	;# 
  1005  0618                     	;# 
  1006  0619                     	;# 
  1007  0619                     	;# 
  1008  061A                     	;# 
  1009  061B                     	;# 
  1010  061C                     	;# 
  1011  061C                     	;# 
  1012  0691                     	;# 
  1013  0692                     	;# 
  1014  0693                     	;# 
  1015  0694                     	;# 
  1016  0695                     	;# 
  1017  0F0F                     	;# 
  1018  0F10                     	;# 
  1019  0F11                     	;# 
  1020  0F12                     	;# 
  1021  0F13                     	;# 
  1022  0F14                     	;# 
  1023  0F15                     	;# 
  1024  0F16                     	;# 
  1025  0F17                     	;# 
  1026  0F18                     	;# 
  1027  0F19                     	;# 
  1028  0F1A                     	;# 
  1029  0F1B                     	;# 
  1030  0F1C                     	;# 
  1031  0F1D                     	;# 
  1032  0F1E                     	;# 
  1033  0F1F                     	;# 
  1034  0FE3                     	;# 
  1035  0FE4                     	;# 
  1036  0FE5                     	;# 
  1037  0FE6                     	;# 
  1038  0FE7                     	;# 
  1039  0FE8                     	;# 
  1040  0FE9                     	;# 
  1041  0FEA                     	;# 
  1042  0FEB                     	;# 
  1043  0FED                     	;# 
  1044  0FEE                     	;# 
  1045  0FEF                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0008                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000E                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0013                     	;# 
  1063  0015                     	;# 
  1064  0016                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001C                     	;# 
  1072  008C                     	;# 
  1073  008E                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0093                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  009F                     	;# 
  1088  010C                     	;# 
  1089  010E                     	;# 
  1090  0111                     	;# 
  1091  0112                     	;# 
  1092  0113                     	;# 
  1093  0114                     	;# 
  1094  0115                     	;# 
  1095  0116                     	;# 
  1096  0117                     	;# 
  1097  0118                     	;# 
  1098  0119                     	;# 
  1099  011D                     	;# 
  1100  018C                     	;# 
  1101  018E                     	;# 
  1102  0191                     	;# 
  1103  0191                     	;# 
  1104  0192                     	;# 
  1105  0193                     	;# 
  1106  0193                     	;# 
  1107  0194                     	;# 
  1108  0195                     	;# 
  1109  0196                     	;# 
  1110  0197                     	;# 
  1111  020C                     	;# 
  1112  0211                     	;# 
  1113  0211                     	;# 
  1114  0212                     	;# 
  1115  0212                     	;# 
  1116  0213                     	;# 
  1117  0213                     	;# 
  1118  0214                     	;# 
  1119  0214                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0216                     	;# 
  1124  0216                     	;# 
  1125  0217                     	;# 
  1126  0217                     	;# 
  1127  0391                     	;# 
  1128  0392                     	;# 
  1129  0393                     	;# 
  1130  0498                     	;# 
  1131  0498                     	;# 
  1132  0499                     	;# 
  1133  049A                     	;# 
  1134  049B                     	;# 
  1135  049B                     	;# 
  1136  049C                     	;# 
  1137  049D                     	;# 
  1138  049E                     	;# 
  1139  049F                     	;# 
  1140  0611                     	;# 
  1141  0612                     	;# 
  1142  0613                     	;# 
  1143  0613                     	;# 
  1144  0614                     	;# 
  1145  0615                     	;# 
  1146  0616                     	;# 
  1147  0616                     	;# 
  1148  0617                     	;# 
  1149  0618                     	;# 
  1150  0619                     	;# 
  1151  0619                     	;# 
  1152  061A                     	;# 
  1153  061B                     	;# 
  1154  061C                     	;# 
  1155  061C                     	;# 
  1156  0691                     	;# 
  1157  0692                     	;# 
  1158  0693                     	;# 
  1159  0694                     	;# 
  1160  0695                     	;# 
  1161  0F0F                     	;# 
  1162  0F10                     	;# 
  1163  0F11                     	;# 
  1164  0F12                     	;# 
  1165  0F13                     	;# 
  1166  0F14                     	;# 
  1167  0F15                     	;# 
  1168  0F16                     	;# 
  1169  0F17                     	;# 
  1170  0F18                     	;# 
  1171  0F19                     	;# 
  1172  0F1A                     	;# 
  1173  0F1B                     	;# 
  1174  0F1C                     	;# 
  1175  0F1D                     	;# 
  1176  0F1E                     	;# 
  1177  0F1F                     	;# 
  1178  0FE3                     	;# 
  1179  0FE4                     	;# 
  1180  0FE5                     	;# 
  1181  0FE6                     	;# 
  1182  0FE7                     	;# 
  1183  0FE8                     	;# 
  1184  0FE9                     	;# 
  1185  0FEA                     	;# 
  1186  0FEB                     	;# 
  1187  0FED                     	;# 
  1188  0FEE                     	;# 
  1189  0FEF                     	;# 
  1190  0000                     	;# 
  1191  0001                     	;# 
  1192  0002                     	;# 
  1193  0003                     	;# 
  1194  0004                     	;# 
  1195  0005                     	;# 
  1196  0006                     	;# 
  1197  0007                     	;# 
  1198  0008                     	;# 
  1199  0009                     	;# 
  1200  000A                     	;# 
  1201  000B                     	;# 
  1202  000C                     	;# 
  1203  000E                     	;# 
  1204  0011                     	;# 
  1205  0012                     	;# 
  1206  0013                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0016                     	;# 
  1210  0017                     	;# 
  1211  0018                     	;# 
  1212  0019                     	;# 
  1213  001A                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  008C                     	;# 
  1217  008E                     	;# 
  1218  0091                     	;# 
  1219  0092                     	;# 
  1220  0093                     	;# 
  1221  0095                     	;# 
  1222  0096                     	;# 
  1223  0097                     	;# 
  1224  0099                     	;# 
  1225  009A                     	;# 
  1226  009B                     	;# 
  1227  009B                     	;# 
  1228  009C                     	;# 
  1229  009D                     	;# 
  1230  009E                     	;# 
  1231  009F                     	;# 
  1232  010C                     	;# 
  1233  010E                     	;# 
  1234  0111                     	;# 
  1235  0112                     	;# 
  1236  0113                     	;# 
  1237  0114                     	;# 
  1238  0115                     	;# 
  1239  0116                     	;# 
  1240  0117                     	;# 
  1241  0118                     	;# 
  1242  0119                     	;# 
  1243  011D                     	;# 
  1244  018C                     	;# 
  1245  018E                     	;# 
  1246  0191                     	;# 
  1247  0191                     	;# 
  1248  0192                     	;# 
  1249  0193                     	;# 
  1250  0193                     	;# 
  1251  0194                     	;# 
  1252  0195                     	;# 
  1253  0196                     	;# 
  1254  0197                     	;# 
  1255  020C                     	;# 
  1256  0211                     	;# 
  1257  0211                     	;# 
  1258  0212                     	;# 
  1259  0212                     	;# 
  1260  0213                     	;# 
  1261  0213                     	;# 
  1262  0214                     	;# 
  1263  0214                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0215                     	;# 
  1267  0216                     	;# 
  1268  0216                     	;# 
  1269  0217                     	;# 
  1270  0217                     	;# 
  1271  0391                     	;# 
  1272  0392                     	;# 
  1273  0393                     	;# 
  1274  0498                     	;# 
  1275  0498                     	;# 
  1276  0499                     	;# 
  1277  049A                     	;# 
  1278  049B                     	;# 
  1279  049B                     	;# 
  1280  049C                     	;# 
  1281  049D                     	;# 
  1282  049E                     	;# 
  1283  049F                     	;# 
  1284  0611                     	;# 
  1285  0612                     	;# 
  1286  0613                     	;# 
  1287  0613                     	;# 
  1288  0614                     	;# 
  1289  0615                     	;# 
  1290  0616                     	;# 
  1291  0616                     	;# 
  1292  0617                     	;# 
  1293  0618                     	;# 
  1294  0619                     	;# 
  1295  0619                     	;# 
  1296  061A                     	;# 
  1297  061B                     	;# 
  1298  061C                     	;# 
  1299  061C                     	;# 
  1300  0691                     	;# 
  1301  0692                     	;# 
  1302  0693                     	;# 
  1303  0694                     	;# 
  1304  0695                     	;# 
  1305  0F0F                     	;# 
  1306  0F10                     	;# 
  1307  0F11                     	;# 
  1308  0F12                     	;# 
  1309  0F13                     	;# 
  1310  0F14                     	;# 
  1311  0F15                     	;# 
  1312  0F16                     	;# 
  1313  0F17                     	;# 
  1314  0F18                     	;# 
  1315  0F19                     	;# 
  1316  0F1A                     	;# 
  1317  0F1B                     	;# 
  1318  0F1C                     	;# 
  1319  0F1D                     	;# 
  1320  0F1E                     	;# 
  1321  0F1F                     	;# 
  1322  0FE3                     	;# 
  1323  0FE4                     	;# 
  1324  0FE5                     	;# 
  1325  0FE6                     	;# 
  1326  0FE7                     	;# 
  1327  0FE8                     	;# 
  1328  0FE9                     	;# 
  1329  0FEA                     	;# 
  1330  0FEB                     	;# 
  1331  0FED                     	;# 
  1332  0FEE                     	;# 
  1333  0FEF                     	;# 
  1334  0000                     	;# 
  1335  0001                     	;# 
  1336  0002                     	;# 
  1337  0003                     	;# 
  1338  0004                     	;# 
  1339  0005                     	;# 
  1340  0006                     	;# 
  1341  0007                     	;# 
  1342  0008                     	;# 
  1343  0009                     	;# 
  1344  000A                     	;# 
  1345  000B                     	;# 
  1346  000C                     	;# 
  1347  000E                     	;# 
  1348  0011                     	;# 
  1349  0012                     	;# 
  1350  0013                     	;# 
  1351  0015                     	;# 
  1352  0016                     	;# 
  1353  0016                     	;# 
  1354  0017                     	;# 
  1355  0018                     	;# 
  1356  0019                     	;# 
  1357  001A                     	;# 
  1358  001B                     	;# 
  1359  001C                     	;# 
  1360  008C                     	;# 
  1361  008E                     	;# 
  1362  0091                     	;# 
  1363  0092                     	;# 
  1364  0093                     	;# 
  1365  0095                     	;# 
  1366  0096                     	;# 
  1367  0097                     	;# 
  1368  0099                     	;# 
  1369  009A                     	;# 
  1370  009B                     	;# 
  1371  009B                     	;# 
  1372  009C                     	;# 
  1373  009D                     	;# 
  1374  009E                     	;# 
  1375  009F                     	;# 
  1376  010C                     	;# 
  1377  010E                     	;# 
  1378  0111                     	;# 
  1379  0112                     	;# 
  1380  0113                     	;# 
  1381  0114                     	;# 
  1382  0115                     	;# 
  1383  0116                     	;# 
  1384  0117                     	;# 
  1385  0118                     	;# 
  1386  0119                     	;# 
  1387  011D                     	;# 
  1388  018C                     	;# 
  1389  018E                     	;# 
  1390  0191                     	;# 
  1391  0191                     	;# 
  1392  0192                     	;# 
  1393  0193                     	;# 
  1394  0193                     	;# 
  1395  0194                     	;# 
  1396  0195                     	;# 
  1397  0196                     	;# 
  1398  0197                     	;# 
  1399  020C                     	;# 
  1400  0211                     	;# 
  1401  0211                     	;# 
  1402  0212                     	;# 
  1403  0212                     	;# 
  1404  0213                     	;# 
  1405  0213                     	;# 
  1406  0214                     	;# 
  1407  0214                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0215                     	;# 
  1411  0216                     	;# 
  1412  0216                     	;# 
  1413  0217                     	;# 
  1414  0217                     	;# 
  1415  0391                     	;# 
  1416  0392                     	;# 
  1417  0393                     	;# 
  1418  0498                     	;# 
  1419  0498                     	;# 
  1420  0499                     	;# 
  1421  049A                     	;# 
  1422  049B                     	;# 
  1423  049B                     	;# 
  1424  049C                     	;# 
  1425  049D                     	;# 
  1426  049E                     	;# 
  1427  049F                     	;# 
  1428  0611                     	;# 
  1429  0612                     	;# 
  1430  0613                     	;# 
  1431  0613                     	;# 
  1432  0614                     	;# 
  1433  0615                     	;# 
  1434  0616                     	;# 
  1435  0616                     	;# 
  1436  0617                     	;# 
  1437  0618                     	;# 
  1438  0619                     	;# 
  1439  0619                     	;# 
  1440  061A                     	;# 
  1441  061B                     	;# 
  1442  061C                     	;# 
  1443  061C                     	;# 
  1444  0691                     	;# 
  1445  0692                     	;# 
  1446  0693                     	;# 
  1447  0694                     	;# 
  1448  0695                     	;# 
  1449  0F0F                     	;# 
  1450  0F10                     	;# 
  1451  0F11                     	;# 
  1452  0F12                     	;# 
  1453  0F13                     	;# 
  1454  0F14                     	;# 
  1455  0F15                     	;# 
  1456  0F16                     	;# 
  1457  0F17                     	;# 
  1458  0F18                     	;# 
  1459  0F19                     	;# 
  1460  0F1A                     	;# 
  1461  0F1B                     	;# 
  1462  0F1C                     	;# 
  1463  0F1D                     	;# 
  1464  0F1E                     	;# 
  1465  0F1F                     	;# 
  1466  0FE3                     	;# 
  1467  0FE4                     	;# 
  1468  0FE5                     	;# 
  1469  0FE6                     	;# 
  1470  0FE7                     	;# 
  1471  0FE8                     	;# 
  1472  0FE9                     	;# 
  1473  0FEA                     	;# 
  1474  0FEB                     	;# 
  1475  0FED                     	;# 
  1476  0FEE                     	;# 
  1477  0FEF                     	;# 
  1478                           
  1479                           	psect	idataBANK0
  1480  0347                     __pidataBANK0:	
  1481                           
  1482                           ;initializer for _boost_state
  1483  0347  34FF               	retlw	255
  1484  0348  34FF               	retlw	255
  1485                           
  1486                           ;initializer for _boost_up
  1487  0349  3401               	retlw	1
  1488  034A  3400               	retlw	0
  1489                           
  1490                           ;initializer for _debounce_limit
  1491  034B  3419               	retlw	25
  1492  034C  3400               	retlw	0
  1493                           
  1494                           ;initializer for _feedback_state
  1495  034D  34FF               	retlw	255
  1496  034E  34FF               	retlw	255
  1497                           
  1498                           ;initializer for _fuzz_state
  1499  034F  34FF               	retlw	255
  1500  0350  34FF               	retlw	255
  1501                           
  1502                           ;initializer for _fuzz_up
  1503  0351  3401               	retlw	1
  1504  0352  3400               	retlw	0
  1505                           
  1506                           ;initializer for _long_press_limit
  1507  0353  3400               	retlw	0
  1508  0354  342D               	retlw	45
  1509  000B                     _INTCONbits	set	11
  1510  0011                     _PIR1bits	set	17
  1511  000C                     _PORTAbits	set	12
  1512  001C                     _T2CONbits	set	28
  1513  009D                     _ADCON0bits	set	157
  1514  009E                     _ADCON1bits	set	158
  1515  009C                     _ADRESH	set	156
  1516  009B                     _ADRESL	set	155
  1517  0099                     _OSCCONbits	set	153
  1518  009A                     _OSCSTAT	set	154
  1519  008C                     _TRISAbits	set	140
  1520  008E                     _TRISCbits	set	142
  1521  010C                     _LATAbits	set	268
  1522  010E                     _LATCbits	set	270
  1523  0191                     _PMADR	set	401
  1524  018C                     _ANSELAbits	set	396
  1525  0192                     _PMADRH	set	402
  1526  0191                     _PMADRL	set	401
  1527  0195                     _PMCON1bits	set	405
  1528  0196                     _PMCON2	set	406
  1529  0194                     _PMDATH	set	404
  1530  0193                     _PMDATL	set	403
  1531                           
  1532                           ; #config settings
  1533  0000                     
  1534                           	psect	cinit
  1535  000E                     start_initialization:	
  1536  000E                     __initialization:	
  1537                           
  1538                           ; Clear objects allocated to BANK0
  1539  000E  3020               	movlw	low __pbssBANK0
  1540  000F  0084               	movwf	4
  1541  0010  3000               	movlw	high __pbssBANK0
  1542  0011  0085               	movwf	5
  1543  0012  3018               	movlw	24
  1544  0013  2398               	fcall	clear_ram0
  1545                           
  1546                           ; Initialize objects allocated to BANK0
  1547  0014  3047               	movlw	low __pidataBANK0
  1548  0015  0084               	movwf	4
  1549  0016  3083               	movlw	(high __pidataBANK0)| (0+128)
  1550  0017  0085               	movwf	5
  1551  0018  3038               	movlw	low __pdataBANK0
  1552  0019  0086               	movwf	6
  1553  001A  3000               	movlw	high __pdataBANK0
  1554  001B  0087               	movwf	7
  1555  001C  300E               	movlw	14
  1556  001D  239E               	fcall	init_ram
  1557  001E                     end_of_initialization:	
  1558                           ;End of C runtime variable initialization code
  1559                           
  1560  001E                     __end_of__initialization:	
  1561  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1562  001F  0020               	movlb	0
  1563  0020  2B15               	ljmp	_main	;jump to C main() function
  1564                           
  1565                           	psect	bssBANK0
  1566  0020                     __pbssBANK0:	
  1567  0020                     wait_ms@timel:	
  1568  0020                     	ds	4
  1569  0024                     _boost_down:	
  1570  0024                     	ds	2
  1571  0026                     _boost_pressed:	
  1572  0026                     	ds	2
  1573  0028                     _fuzz_down:	
  1574  0028                     	ds	2
  1575  002A                     _fuzz_pressed:	
  1576  002A                     	ds	2
  1577  002C                     _fuzz_toggle:	
  1578  002C                     	ds	2
  1579  002E                     _fuzz_turning_on:	
  1580  002E                     	ds	2
  1581  0030                     _isInitialized:	
  1582  0030                     	ds	2
  1583  0032                     _last_boost_state:	
  1584  0032                     	ds	2
  1585  0034                     _pedalState:	
  1586  0034                     	ds	4
  1587                           
  1588                           	psect	dataBANK0
  1589  0038                     __pdataBANK0:	
  1590  0038                     _boost_state:	
  1591  0038                     	ds	2
  1592  003A                     _boost_up:	
  1593  003A                     	ds	2
  1594  003C                     _debounce_limit:	
  1595  003C                     	ds	2
  1596  003E                     _feedback_state:	
  1597  003E                     	ds	2
  1598  0040                     _fuzz_state:	
  1599  0040                     	ds	2
  1600  0042                     _fuzz_up:	
  1601  0042                     	ds	2
  1602  0044                     _long_press_limit:	
  1603  0044                     	ds	2
  1604                           
  1605                           	psect	clrtext
  1606  0398                     clear_ram0:	
  1607                           ;	Called with FSR0 containing the base address, and
  1608                           ;	WREG with the size to clear
  1609                           
  1610  0398  0064               	clrwdt	;clear the watchdog before getting into this loop
  1611  0399                     clrloop0:	
  1612  0399  0180               	clrf	0	;clear RAM location pointed to by FSR
  1613  039A  3101               	addfsr 0,1
  1614  039B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1615  039C  2B99               	goto	clrloop0	;have we reached the end yet?
  1616  039D  3400               	retlw	0	;all done for this memory range, return
  1617                           
  1618                           	psect	inittext
  1619  039E                     init_ram:	
  1620  039E  00FE               	movwf	126
  1621  039F                     initloop:	
  1622  039F  0012               	moviw fsr0++
  1623  03A0  001E               	movwi fsr1++
  1624  03A1  0BFE               	decfsz	126,f
  1625  03A2  2B9F               	goto	initloop
  1626  03A3  3400               	retlw	0
  1627                           
  1628                           	psect	cstackCOMMON
  1629  0070                     __pcstackCOMMON:	
  1630  0070                     ?_ConfigureOscillator:	
  1631  0070                     ?_InitApp:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?_initFuzz:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ?_initBoost:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?_init_adc:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ?_saveState:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ?_isr:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ??_isr:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?_main:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655  0070                     ?_initStateManager:	
  1656                           ; 1 bytes @ 0x0
  1657                           
  1658  0070                     ?_getCurrentState:	
  1659                           ; 1 bytes @ 0x0
  1660                           
  1661                           
  1662                           ; 4 bytes @ 0x0
  1663  0070                     	ds	1
  1664  0071                     ?_FLASH_EraseBlock:	
  1665  0071                     ??_ConfigureOscillator:	
  1666                           ; 1 bytes @ 0x1
  1667                           
  1668  0071                     ??_InitApp:	
  1669                           ; 1 bytes @ 0x1
  1670                           
  1671  0071                     ??_init_adc:	
  1672                           ; 1 bytes @ 0x1
  1673                           
  1674  0071                     ?_FLASH_ReadWord:	
  1675                           ; 1 bytes @ 0x1
  1676                           
  1677  0071                     ?___lmul:	
  1678                           ; 2 bytes @ 0x1
  1679                           
  1680  0071                     FLASH_ReadWord@flashAddr:	
  1681                           ; 4 bytes @ 0x1
  1682                           
  1683  0071                     FLASH_EraseBlock@startAddr:	
  1684                           ; 2 bytes @ 0x1
  1685                           
  1686  0071                     ___lmul@multiplier:	
  1687                           ; 2 bytes @ 0x1
  1688                           
  1689                           
  1690                           ; 4 bytes @ 0x1
  1691  0071                     	ds	2
  1692  0073                     ??_FLASH_EraseBlock:	
  1693  0073                     ??_FLASH_ReadWord:	
  1694                           ; 1 bytes @ 0x3
  1695                           
  1696  0073                     FLASH_ReadWord@GIEBitValue:	
  1697                           ; 1 bytes @ 0x3
  1698                           
  1699  0073                     FLASH_EraseBlock@GIEBitValue:	
  1700                           ; 1 bytes @ 0x3
  1701                           
  1702                           
  1703                           ; 1 bytes @ 0x3
  1704  0073                     	ds	1
  1705  0074                     ?_HEF_ByteArrayWrite:	
  1706  0074                     ?_HEF_ByteArrayRead:	
  1707                           ; 1 bytes @ 0x4
  1708                           
  1709  0074                     HEF_ByteArrayWrite@byteArray:	
  1710                           ; 1 bytes @ 0x4
  1711                           
  1712  0074                     HEF_ByteArrayRead@block:	
  1713                           ; 1 bytes @ 0x4
  1714                           
  1715                           
  1716                           ; 1 bytes @ 0x4
  1717  0074                     	ds	1
  1718  0075                     HEF_ByteArrayWrite@count:	
  1719  0075                     HEF_ByteArrayRead@count:	
  1720                           ; 1 bytes @ 0x5
  1721                           
  1722  0075                     ___lmul@multiplicand:	
  1723                           ; 1 bytes @ 0x5
  1724                           
  1725                           
  1726                           ; 4 bytes @ 0x5
  1727  0075                     	ds	1
  1728  0076                     ??_HEF_ByteArrayWrite:	
  1729  0076                     ??_HEF_ByteArrayRead:	
  1730                           ; 1 bytes @ 0x6
  1731                           
  1732                           
  1733                           ; 1 bytes @ 0x6
  1734  0076                     	ds	2
  1735  0078                     HEF_ByteArrayWrite@GIEBitValue:	
  1736  0078                     HEF_ByteArrayRead@wordAdd:	
  1737                           ; 1 bytes @ 0x8
  1738                           
  1739                           
  1740                           ; 2 bytes @ 0x8
  1741  0078                     	ds	1
  1742  0079                     ??___lmul:	
  1743  0079                     HEF_ByteArrayWrite@block:	
  1744                           ; 1 bytes @ 0x9
  1745                           
  1746  0079                     ___lmul@product:	
  1747                           ; 1 bytes @ 0x9
  1748                           
  1749                           
  1750                           ; 4 bytes @ 0x9
  1751  0079                     	ds	1
  1752  007A                     HEF_ByteArrayRead@bArray:	
  1753  007A                     HEF_ByteArrayWrite@blockAddr:	
  1754                           ; 1 bytes @ 0xA
  1755                           
  1756                           
  1757                           ; 2 bytes @ 0xA
  1758  007A                     	ds	1
  1759  007B                     ??_getCurrentState:	
  1760                           
  1761                           ; 1 bytes @ 0xB
  1762  007B                     	ds	1
  1763  007C                     saveState@r:	
  1764                           
  1765                           ; 1 bytes @ 0xC
  1766  007C                     	ds	1
  1767  007D                     ??_initFuzz:	
  1768  007D                     ??_initBoost:	
  1769                           ; 1 bytes @ 0xD
  1770                           
  1771  007D                     ??_getFuzzState:	
  1772                           ; 1 bytes @ 0xD
  1773                           
  1774  007D                     ??_setFuzzState:	
  1775                           ; 1 bytes @ 0xD
  1776                           
  1777  007D                     ??_setFeedbackState:	
  1778                           ; 1 bytes @ 0xD
  1779                           
  1780  007D                     ??_updateFuzzState:	
  1781                           ; 1 bytes @ 0xD
  1782                           
  1783  007D                     ??_getBoostState:	
  1784                           ; 1 bytes @ 0xD
  1785                           
  1786  007D                     ??_setBoostState:	
  1787                           ; 1 bytes @ 0xD
  1788                           
  1789  007D                     ??_updateBoostState:	
  1790                           ; 1 bytes @ 0xD
  1791                           
  1792  007D                     ??_main:	
  1793                           ; 1 bytes @ 0xD
  1794                           
  1795  007D                     ??_wait_ms:	
  1796                           ; 1 bytes @ 0xD
  1797                           
  1798  007D                     ??_initStateManager:	
  1799                           ; 1 bytes @ 0xD
  1800                           
  1801                           
  1802                           	psect	cstackBANK0
  1803  0046                     __pcstackBANK0:	
  1804                           ; 1 bytes @ 0xD
  1805                           
  1806  0046                     ??_saveState:	
  1807  0046                     ?_wait_ms:	
  1808                           ; 1 bytes @ 0x0
  1809                           
  1810  0046                     getCurrentState@r:	
  1811                           ; 1 bytes @ 0x0
  1812                           
  1813  0046                     wait_ms@time:	
  1814                           ; 1 bytes @ 0x0
  1815                           
  1816                           
  1817                           ; 2 bytes @ 0x0
  1818  0046                     	ds	1
  1819  0047                     ?_getFuzzState:	
  1820  0047                     ?_getBoostState:	
  1821                           ; 2 bytes @ 0x1
  1822                           
  1823                           
  1824                           ; 2 bytes @ 0x1
  1825  0047                     	ds	1
  1826  0048                     ?_setFeedbackState:	
  1827  0048                     setFeedbackState@f_state:	
  1828                           ; 1 bytes @ 0x2
  1829                           
  1830                           
  1831                           ; 2 bytes @ 0x2
  1832  0048                     	ds	1
  1833  0049                     ?_updateFuzzState:	
  1834  0049                     ?_updateBoostState:	
  1835                           ; 1 bytes @ 0x3
  1836                           
  1837  0049                     updateFuzzState@state:	
  1838                           ; 1 bytes @ 0x3
  1839                           
  1840  0049                     updateBoostState@state:	
  1841                           ; 2 bytes @ 0x3
  1842                           
  1843                           
  1844                           ; 2 bytes @ 0x3
  1845  0049                     	ds	2
  1846  004B                     ?_setFuzzState:	
  1847  004B                     ?_setBoostState:	
  1848                           ; 1 bytes @ 0x5
  1849                           
  1850  004B                     setFuzzState@f_state:	
  1851                           ; 1 bytes @ 0x5
  1852                           
  1853  004B                     setBoostState@f_state:	
  1854                           ; 2 bytes @ 0x5
  1855                           
  1856                           
  1857                           ; 2 bytes @ 0x5
  1858  004B                     	ds	2
  1859  004D                     ?_updateFuzz:	
  1860  004D                     ?_updateBoost:	
  1861                           ; 1 bytes @ 0x7
  1862                           
  1863  004D                     initFuzz@initState:	
  1864                           ; 1 bytes @ 0x7
  1865                           
  1866  004D                     updateFuzz@debounce_limit:	
  1867                           ; 2 bytes @ 0x7
  1868                           
  1869  004D                     initBoost@initState:	
  1870                           ; 2 bytes @ 0x7
  1871                           
  1872  004D                     updateBoost@debounce_limit:	
  1873                           ; 2 bytes @ 0x7
  1874                           
  1875                           
  1876                           ; 2 bytes @ 0x7
  1877  004D                     	ds	2
  1878  004F                     ??_updateFuzz:	
  1879  004F                     ??_updateBoost:	
  1880                           ; 1 bytes @ 0x9
  1881                           
  1882                           
  1883                           ; 1 bytes @ 0x9
  1884  004F                     	ds	1
  1885  0050                     updateFuzz@fb_state:	
  1886                           
  1887                           ; 2 bytes @ 0xA
  1888  0050                     	ds	2
  1889                           
  1890                           	psect	maintext
  1891  0315                     __pmaintext:	
  1892 ;;
  1893 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1894 ;;
  1895 ;; *************** function _main *****************
  1896 ;; Defined at:
  1897 ;;		line 28 in file "main.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1906 ;; Tracked objects:
  1907 ;;		On entry : B1F/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMMON   BANK0   BANK1
  1911 ;;      Params:         0       0       0
  1912 ;;      Locals:         0       0       0
  1913 ;;      Temps:          0       0       0
  1914 ;;      Totals:         0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels required when called:    7
  1917 ;; This function calls:
  1918 ;;		_ConfigureOscillator
  1919 ;;		_InitApp
  1920 ;;		_initBoost
  1921 ;;		_initFuzz
  1922 ;;		_updateBoost
  1923 ;;		_updateFuzz
  1924 ;; This function is called by:
  1925 ;;		Startup code after reset
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           
  1930                           ;psect for function _main
  1931  0315                     _main:	
  1932                           
  1933                           ;main.c: 29: ConfigureOscillator();
  1934                           
  1935                           ;incstack = 0
  1936                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1937  0315  23A9               	fcall	_ConfigureOscillator
  1938                           
  1939                           ;main.c: 30: InitApp();
  1940  0316  2300               	fcall	_InitApp
  1941                           
  1942                           ;main.c: 33: initFuzz();
  1943  0317  2326               	fcall	_initFuzz
  1944                           
  1945                           ;main.c: 34: initBoost();
  1946  0318  236F               	fcall	_initBoost
  1947  0319                     l1580:	
  1948                           ;main.c: 36: while (1) {
  1949                           
  1950                           
  1951                           ;main.c: 37: updateFuzz(debounce_limit);
  1952  0319  0020               	movlb	0	; select bank0
  1953  031A  083D               	movf	_debounce_limit+1,w
  1954  031B  00CE               	movwf	updateFuzz@debounce_limit+1
  1955  031C  083C               	movf	_debounce_limit,w
  1956  031D  00CD               	movwf	updateFuzz@debounce_limit
  1957  031E  2021               	fcall	_updateFuzz
  1958                           
  1959                           ;main.c: 38: updateBoost(debounce_limit);
  1960  031F  0020               	movlb	0	; select bank0
  1961  0320  083D               	movf	_debounce_limit+1,w
  1962  0321  00CE               	movwf	updateBoost@debounce_limit+1
  1963  0322  083C               	movf	_debounce_limit,w
  1964  0323  00CD               	movwf	updateBoost@debounce_limit
  1965  0324  20C8               	fcall	_updateBoost
  1966  0325  2B19               	goto	l1580
  1967  0326                     __end_of_main:	
  1968                           
  1969                           	psect	text1
  1970  0021                     __ptext1:	
  1971 ;; *************** function _updateFuzz *****************
  1972 ;; Defined at:
  1973 ;;		line 35 in file "mcc_generated_files/fuzz.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  debounce_lim    2    7[BANK0 ] int 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  fb_state        2   10[BANK0 ] int 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMMON   BANK0   BANK1
  1987 ;;      Params:         0       2       0
  1988 ;;      Locals:         0       2       0
  1989 ;;      Temps:          0       1       0
  1990 ;;      Totals:         0       5       0
  1991 ;;Total ram usage:        5 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:    6
  1994 ;; This function calls:
  1995 ;;		_setFeedbackState
  1996 ;;		_setFuzzState
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           
  2003                           ;psect for function _updateFuzz
  2004  0021                     _updateFuzz:	
  2005                           
  2006                           ;fuzz.c: 42: if (PORTAbits.RA4 == 0) {
  2007                           
  2008                           ;incstack = 0
  2009                           ; Regs used in _updateFuzz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2010  0021  0020               	movlb	0	; select bank0
  2011  0022  1A0C               	btfsc	12,4	;volatile
  2012  0023  2834               	goto	l1422
  2013                           
  2014                           ;fuzz.c: 43: if (fuzz_pressed > 0) {
  2015  0024  082B               	movf	_fuzz_pressed+1,w
  2016  0025  3A80               	xorlw	128
  2017  0026  00CF               	movwf	??_updateFuzz
  2018  0027  3080               	movlw	128
  2019  0028  024F               	subwf	??_updateFuzz,w
  2020  0029  1D03               	skipz
  2021  002A  282D               	goto	u885
  2022  002B  3001               	movlw	1
  2023  002C  022A               	subwf	_fuzz_pressed,w
  2024  002D                     u885:	
  2025  002D  1C03               	skipc
  2026  002E  2845               	goto	l1426
  2027                           
  2028                           ;fuzz.c: 44: fuzz_pressed--;
  2029  002F  30FF               	movlw	255
  2030  0030  0020               	movlb	0	; select bank0
  2031  0031  07AA               	addwf	_fuzz_pressed,f
  2032  0032  30FF               	movlw	255
  2033  0033  2844               	goto	L1
  2034  0034                     l1422:	
  2035                           ;fuzz.c: 45: }
  2036                           ;fuzz.c: 46: } else if (fuzz_pressed < debounce_limit) {
  2037                           
  2038  0034  082B               	movf	_fuzz_pressed+1,w
  2039  0035  3A80               	xorlw	128
  2040  0036  00CF               	movwf	??_updateFuzz
  2041  0037  084E               	movf	updateFuzz@debounce_limit+1,w
  2042  0038  3A80               	xorlw	128
  2043  0039  024F               	subwf	??_updateFuzz,w
  2044  003A  1D03               	skipz
  2045  003B  283E               	goto	u895
  2046  003C  084D               	movf	updateFuzz@debounce_limit,w
  2047  003D  022A               	subwf	_fuzz_pressed,w
  2048  003E                     u895:	
  2049  003E  1803               	skipnc
  2050  003F  2845               	goto	l1426
  2051                           
  2052                           ;fuzz.c: 47: fuzz_pressed++;
  2053  0040  3001               	movlw	1
  2054  0041  0020               	movlb	0	; select bank0
  2055  0042  07AA               	addwf	_fuzz_pressed,f
  2056  0043  3000               	movlw	0
  2057  0044                     L1:	
  2058  0044  3DAB               	addwfc	_fuzz_pressed+1,f
  2059  0045                     l1426:	
  2060                           
  2061                           ;fuzz.c: 49: }
  2062                           ;fuzz.c: 55: if (fuzz_pressed == 0) {
  2063  0045  0020               	movlb	0	; select bank0
  2064  0046  082A               	movf	_fuzz_pressed,w
  2065  0047  042B               	iorwf	_fuzz_pressed+1,w
  2066  0048  1D03               	btfss	3,2
  2067  0049  288F               	goto	l1456
  2068                           
  2069                           ;fuzz.c: 57: fuzz_down++;
  2070  004A  3001               	movlw	1
  2071  004B  07A8               	addwf	_fuzz_down,f
  2072  004C  3000               	movlw	0
  2073  004D  3DA9               	addwfc	_fuzz_down+1,f
  2074                           
  2075                           ;fuzz.c: 58: if (fuzz_state == 1) {
  2076  004E  0340               	decf	_fuzz_state,w
  2077  004F  0441               	iorwf	_fuzz_state+1,w
  2078  0050  1D03               	btfss	3,2
  2079  0051  287C               	goto	l1446
  2080                           
  2081                           ;fuzz.c: 59: if (fuzz_up == 1) {
  2082  0052  0342               	decf	_fuzz_up,w
  2083  0053  0443               	iorwf	_fuzz_up+1,w
  2084  0054  1D03               	btfss	3,2
  2085  0055  285A               	goto	l159
  2086                           
  2087                           ;fuzz.c: 60: fuzz_toggle = 1;
  2088  0056  3001               	movlw	1
  2089  0057  00AC               	movwf	_fuzz_toggle
  2090  0058  3000               	movlw	0
  2091  0059  00AD               	movwf	_fuzz_toggle+1
  2092  005A                     l159:	
  2093                           
  2094                           ;fuzz.c: 61: }
  2095                           ;fuzz.c: 63: if (fuzz_down >= long_press_limit && feedback_state == 0 && fuzz_turning_on
      +                           == 0) {
  2096  005A  0829               	movf	_fuzz_down+1,w
  2097  005B  3A80               	xorlw	128
  2098  005C  00CF               	movwf	??_updateFuzz
  2099  005D  0845               	movf	_long_press_limit+1,w
  2100  005E  3A80               	xorlw	128
  2101  005F  024F               	subwf	??_updateFuzz,w
  2102  0060  1D03               	skipz
  2103  0061  2864               	goto	u935
  2104  0062  0844               	movf	_long_press_limit,w
  2105  0063  0228               	subwf	_fuzz_down,w
  2106  0064                     u935:	
  2107  0064  1C03               	skipc
  2108  0065  288B               	goto	l1454
  2109  0066  0020               	movlb	0	; select bank0
  2110  0067  083E               	movf	_feedback_state,w
  2111  0068  043F               	iorwf	_feedback_state+1,w
  2112  0069  1D03               	btfss	3,2
  2113  006A  288B               	goto	l1454
  2114  006B  082E               	movf	_fuzz_turning_on,w
  2115  006C  042F               	iorwf	_fuzz_turning_on+1,w
  2116  006D  1D03               	btfss	3,2
  2117  006E  288B               	goto	l1454
  2118                           
  2119                           ;fuzz.c: 65: fuzz_down = long_press_limit;
  2120  006F  0845               	movf	_long_press_limit+1,w
  2121  0070  00A9               	movwf	_fuzz_down+1
  2122  0071  0844               	movf	_long_press_limit,w
  2123  0072  00A8               	movwf	_fuzz_down
  2124                           
  2125                           ;fuzz.c: 66: LATAbits.LATA2 = 0;
  2126  0073  0022               	movlb	2	; select bank2
  2127  0074  110C               	bcf	12,2	;volatile
  2128                           
  2129                           ;fuzz.c: 67: setFeedbackState(1);
  2130  0075  3001               	movlw	1
  2131  0076  0020               	movlb	0	; select bank0
  2132  0077  00C8               	movwf	setFeedbackState@f_state
  2133  0078  3000               	movlw	0
  2134  0079  00C9               	movwf	setFeedbackState@f_state+1
  2135  007A  21EA               	fcall	_setFeedbackState
  2136                           
  2137                           ;fuzz.c: 68: }
  2138                           ;fuzz.c: 69: } else {
  2139  007B  288B               	goto	l1454
  2140  007C                     l1446:	
  2141                           
  2142                           ;fuzz.c: 71: fuzz_turning_on = 1;
  2143  007C  3001               	movlw	1
  2144  007D  0020               	movlb	0	; select bank0
  2145  007E  00AE               	movwf	_fuzz_turning_on
  2146  007F  3000               	movlw	0
  2147  0080  00AF               	movwf	_fuzz_turning_on+1
  2148                           
  2149                           ;fuzz.c: 72: fuzz_toggle = 0;
  2150  0081  01AC               	clrf	_fuzz_toggle
  2151  0082  01AD               	clrf	_fuzz_toggle+1
  2152                           
  2153                           ;fuzz.c: 73: setFuzzState(1);
  2154  0083  3001               	movlw	1
  2155  0084  00CB               	movwf	setFuzzState@f_state
  2156  0085  3000               	movlw	0
  2157  0086  00CC               	movwf	setFuzzState@f_state+1
  2158  0087  2176               	fcall	_setFuzzState
  2159                           
  2160                           ;fuzz.c: 74: feedback_state = 0;
  2161  0088  0020               	movlb	0	; select bank0
  2162  0089  01BE               	clrf	_feedback_state
  2163  008A  01BF               	clrf	_feedback_state+1
  2164  008B                     l1454:	
  2165                           
  2166                           ;fuzz.c: 75: }
  2167                           ;fuzz.c: 78: fuzz_up = 0;
  2168  008B  0020               	movlb	0	; select bank0
  2169  008C  01C2               	clrf	_fuzz_up
  2170  008D  01C3               	clrf	_fuzz_up+1
  2171                           
  2172                           ;fuzz.c: 79: } else if (fuzz_pressed >= debounce_limit) {
  2173  008E  0008               	return
  2174  008F                     l1456:	
  2175  008F  082B               	movf	_fuzz_pressed+1,w
  2176  0090  3A80               	xorlw	128
  2177  0091  00CF               	movwf	??_updateFuzz
  2178  0092  084E               	movf	updateFuzz@debounce_limit+1,w
  2179  0093  3A80               	xorlw	128
  2180  0094  024F               	subwf	??_updateFuzz,w
  2181  0095  1D03               	skipz
  2182  0096  2899               	goto	u965
  2183  0097  084D               	movf	updateFuzz@debounce_limit,w
  2184  0098  022A               	subwf	_fuzz_pressed,w
  2185  0099                     u965:	
  2186  0099  1C03               	skipc
  2187  009A  0008               	return
  2188                           
  2189                           ;fuzz.c: 80: int fb_state = feedback_state;
  2190  009B  0020               	movlb	0	; select bank0
  2191  009C  083F               	movf	_feedback_state+1,w
  2192  009D  00D1               	movwf	updateFuzz@fb_state+1
  2193  009E  083E               	movf	_feedback_state,w
  2194  009F  00D0               	movwf	updateFuzz@fb_state
  2195                           
  2196                           ;fuzz.c: 81: if (fuzz_toggle == 1 && fb_state == 0) {
  2197  00A0  032C               	decf	_fuzz_toggle,w
  2198  00A1  042D               	iorwf	_fuzz_toggle+1,w
  2199  00A2  1D03               	btfss	3,2
  2200  00A3  28AC               	goto	l1466
  2201  00A4  0850               	movf	updateFuzz@fb_state,w
  2202  00A5  0451               	iorwf	updateFuzz@fb_state+1,w
  2203  00A6  1D03               	btfss	3,2
  2204  00A7  28AC               	goto	l1466
  2205                           
  2206                           ;fuzz.c: 82: setFuzzState(0);
  2207  00A8  3000               	movlw	0
  2208  00A9  00CB               	movwf	setFuzzState@f_state
  2209  00AA  00CC               	movwf	setFuzzState@f_state+1
  2210  00AB  2176               	fcall	_setFuzzState
  2211  00AC                     l1466:	
  2212                           
  2213                           ;fuzz.c: 83: }
  2214                           ;fuzz.c: 84: LATAbits.LATA2 = fuzz_state;
  2215  00AC  0020               	movlb	0	; select bank0
  2216  00AD  0C40               	rrf	_fuzz_state,w
  2217  00AE  0022               	movlb	2	; select bank2
  2218  00AF  1C03               	skipc
  2219  00B0  110C               	bcf	12,2	;volatile
  2220  00B1  1803               	skipnc
  2221  00B2  150C               	bsf	12,2	;volatile
  2222                           
  2223                           ;fuzz.c: 86: setFeedbackState(0);
  2224  00B3  3000               	movlw	0
  2225  00B4  0020               	movlb	0	; select bank0
  2226  00B5  00C8               	movwf	setFeedbackState@f_state
  2227  00B6  00C9               	movwf	setFeedbackState@f_state+1
  2228  00B7  21EA               	fcall	_setFeedbackState
  2229                           
  2230                           ;fuzz.c: 87: fuzz_turning_on = 0;
  2231  00B8  0020               	movlb	0	; select bank0
  2232  00B9  01AE               	clrf	_fuzz_turning_on
  2233  00BA  01AF               	clrf	_fuzz_turning_on+1
  2234                           
  2235                           ;fuzz.c: 88: fuzz_toggle = 0;
  2236  00BB  01AC               	clrf	_fuzz_toggle
  2237  00BC  01AD               	clrf	_fuzz_toggle+1
  2238                           
  2239                           ;fuzz.c: 89: fuzz_up = 1;
  2240  00BD  3001               	movlw	1
  2241  00BE  00C2               	movwf	_fuzz_up
  2242  00BF  3000               	movlw	0
  2243  00C0  00C3               	movwf	_fuzz_up+1
  2244                           
  2245                           ;fuzz.c: 90: fuzz_down = 0;
  2246  00C1  01A8               	clrf	_fuzz_down
  2247  00C2  01A9               	clrf	_fuzz_down+1
  2248                           
  2249                           ;fuzz.c: 91: fuzz_pressed = debounce_limit;
  2250  00C3  084E               	movf	updateFuzz@debounce_limit+1,w
  2251  00C4  00AB               	movwf	_fuzz_pressed+1
  2252  00C5  084D               	movf	updateFuzz@debounce_limit,w
  2253  00C6  00AA               	movwf	_fuzz_pressed
  2254  00C7  0008               	return
  2255  00C8                     __end_of_updateFuzz:	
  2256                           
  2257                           	psect	text2
  2258  00C8                     __ptext2:	
  2259 ;; *************** function _updateBoost *****************
  2260 ;; Defined at:
  2261 ;;		line 28 in file "mcc_generated_files/boost.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;  debounce_lim    2    7[BANK0 ] int 
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1
  2275 ;;      Params:         0       2       0
  2276 ;;      Locals:         0       0       0
  2277 ;;      Temps:          0       2       0
  2278 ;;      Totals:         0       4       0
  2279 ;;Total ram usage:        4 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    6
  2282 ;; This function calls:
  2283 ;;		_setBoostState
  2284 ;; This function is called by:
  2285 ;;		_main
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           
  2290                           ;psect for function _updateBoost
  2291  00C8                     _updateBoost:	
  2292                           
  2293                           ;boost.c: 35: if (PORTAbits.RA5 == 0) {
  2294                           
  2295                           ;incstack = 0
  2296                           ; Regs used in _updateBoost: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2297  00C8  0020               	movlb	0	; select bank0
  2298  00C9  1A8C               	btfsc	12,5	;volatile
  2299  00CA  28DB               	goto	l1486
  2300                           
  2301                           ;boost.c: 36: if (boost_pressed > 0) {
  2302  00CB  0827               	movf	_boost_pressed+1,w
  2303  00CC  3A80               	xorlw	128
  2304  00CD  00CF               	movwf	??_updateBoost
  2305  00CE  3080               	movlw	128
  2306  00CF  024F               	subwf	??_updateBoost,w
  2307  00D0  1D03               	skipz
  2308  00D1  28D4               	goto	u1005
  2309  00D2  3001               	movlw	1
  2310  00D3  0226               	subwf	_boost_pressed,w
  2311  00D4                     u1005:	
  2312  00D4  1C03               	skipc
  2313  00D5  28EC               	goto	l1490
  2314                           
  2315                           ;boost.c: 37: boost_pressed--;
  2316  00D6  30FF               	movlw	255
  2317  00D7  0020               	movlb	0	; select bank0
  2318  00D8  07A6               	addwf	_boost_pressed,f
  2319  00D9  30FF               	movlw	255
  2320  00DA  28EB               	goto	L2
  2321  00DB                     l1486:	
  2322                           ;boost.c: 38: }
  2323                           ;boost.c: 39: } else if (boost_pressed < debounce_limit) {
  2324                           
  2325  00DB  0827               	movf	_boost_pressed+1,w
  2326  00DC  3A80               	xorlw	128
  2327  00DD  00CF               	movwf	??_updateBoost
  2328  00DE  084E               	movf	updateBoost@debounce_limit+1,w
  2329  00DF  3A80               	xorlw	128
  2330  00E0  024F               	subwf	??_updateBoost,w
  2331  00E1  1D03               	skipz
  2332  00E2  28E5               	goto	u1015
  2333  00E3  084D               	movf	updateBoost@debounce_limit,w
  2334  00E4  0226               	subwf	_boost_pressed,w
  2335  00E5                     u1015:	
  2336  00E5  1803               	skipnc
  2337  00E6  28EC               	goto	l1490
  2338                           
  2339                           ;boost.c: 40: boost_pressed++;
  2340  00E7  3001               	movlw	1
  2341  00E8  0020               	movlb	0	; select bank0
  2342  00E9  07A6               	addwf	_boost_pressed,f
  2343  00EA  3000               	movlw	0
  2344  00EB                     L2:	
  2345  00EB  3DA7               	addwfc	_boost_pressed+1,f
  2346  00EC                     l1490:	
  2347                           
  2348                           ;boost.c: 41: }
  2349                           ;boost.c: 47: if (boost_pressed == 0) {
  2350  00EC  0020               	movlb	0	; select bank0
  2351  00ED  0826               	movf	_boost_pressed,w
  2352  00EE  0427               	iorwf	_boost_pressed+1,w
  2353  00EF  1D03               	btfss	3,2
  2354  00F0  290B               	goto	l1500
  2355                           
  2356                           ;boost.c: 48: boost_down = 1;
  2357  00F1  3001               	movlw	1
  2358  00F2  00A4               	movwf	_boost_down
  2359  00F3  3000               	movlw	0
  2360  00F4  00A5               	movwf	_boost_down+1
  2361                           
  2362                           ;boost.c: 49: if (boost_up == 1) {
  2363  00F5  033A               	decf	_boost_up,w
  2364  00F6  043B               	iorwf	_boost_up+1,w
  2365  00F7  1D03               	btfss	3,2
  2366  00F8  2907               	goto	l1498
  2367                           
  2368                           ;boost.c: 50: setBoostState(!boost_state);
  2369  00F9  0838               	movf	_boost_state,w
  2370  00FA  0439               	iorwf	_boost_state+1,w
  2371  00FB  1D03               	btfss	3,2
  2372  00FC  28FF               	goto	u1040
  2373  00FD  3001               	movlw	1
  2374  00FE  2900               	goto	u1050
  2375  00FF                     u1040:	
  2376  00FF  3000               	movlw	0
  2377  0100                     u1050:	
  2378  0100  00CF               	movwf	??_updateBoost
  2379  0101  01D0               	clrf	??_updateBoost+1
  2380  0102  084F               	movf	??_updateBoost,w
  2381  0103  00CB               	movwf	setBoostState@f_state
  2382  0104  0850               	movf	??_updateBoost+1,w
  2383  0105  00CC               	movwf	setBoostState@f_state+1
  2384  0106  21B0               	fcall	_setBoostState
  2385  0107                     l1498:	
  2386                           
  2387                           ;boost.c: 51: }
  2388                           ;boost.c: 52: boost_up = 0;
  2389  0107  0020               	movlb	0	; select bank0
  2390  0108  01BA               	clrf	_boost_up
  2391  0109  01BB               	clrf	_boost_up+1
  2392                           
  2393                           ;boost.c: 53: } else if (boost_pressed >= debounce_limit) {
  2394  010A  0008               	return
  2395  010B                     l1500:	
  2396  010B  0827               	movf	_boost_pressed+1,w
  2397  010C  3A80               	xorlw	128
  2398  010D  00CF               	movwf	??_updateBoost
  2399  010E  084E               	movf	updateBoost@debounce_limit+1,w
  2400  010F  3A80               	xorlw	128
  2401  0110  024F               	subwf	??_updateBoost,w
  2402  0111  1D03               	skipz
  2403  0112  2915               	goto	u1065
  2404  0113  084D               	movf	updateBoost@debounce_limit,w
  2405  0114  0226               	subwf	_boost_pressed,w
  2406  0115                     u1065:	
  2407  0115  1C03               	skipc
  2408  0116  0008               	return
  2409                           
  2410                           ;boost.c: 54: boost_up = 1;
  2411  0117  3001               	movlw	1
  2412  0118  0020               	movlb	0	; select bank0
  2413  0119  00BA               	movwf	_boost_up
  2414  011A  3000               	movlw	0
  2415  011B  00BB               	movwf	_boost_up+1
  2416                           
  2417                           ;boost.c: 55: boost_down = 0;
  2418  011C  01A4               	clrf	_boost_down
  2419  011D  01A5               	clrf	_boost_down+1
  2420                           
  2421                           ;boost.c: 56: boost_pressed = debounce_limit;
  2422  011E  084E               	movf	updateBoost@debounce_limit+1,w
  2423  011F  00A7               	movwf	_boost_pressed+1
  2424  0120  084D               	movf	updateBoost@debounce_limit,w
  2425  0121  00A6               	movwf	_boost_pressed
  2426  0122  0008               	return
  2427  0123                     __end_of_updateBoost:	
  2428                           
  2429                           	psect	text3
  2430  0326                     __ptext3:	
  2431 ;; *************** function _initFuzz *****************
  2432 ;; Defined at:
  2433 ;;		line 28 in file "mcc_generated_files/fuzz.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  initState       2    7[BANK0 ] int 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON   BANK0   BANK1
  2447 ;;      Params:         0       0       0
  2448 ;;      Locals:         0       2       0
  2449 ;;      Temps:          0       0       0
  2450 ;;      Totals:         0       2       0
  2451 ;;Total ram usage:        2 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    6
  2454 ;; This function calls:
  2455 ;;		_getFuzzState
  2456 ;;		_setFeedbackState
  2457 ;;		_setFuzzState
  2458 ;; This function is called by:
  2459 ;;		_main
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           
  2464                           ;psect for function _initFuzz
  2465  0326                     _initFuzz:	
  2466                           
  2467                           ;fuzz.c: 29: int initState = getFuzzState();
  2468                           
  2469                           ;incstack = 0
  2470                           ; Regs used in _initFuzz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2471  0326  2391               	fcall	_getFuzzState
  2472  0327  0020               	movlb	0	; select bank0
  2473  0328  0848               	movf	?_getFuzzState+1,w
  2474  0329  00CE               	movwf	initFuzz@initState+1
  2475  032A  0847               	movf	?_getFuzzState,w
  2476  032B  00CD               	movwf	initFuzz@initState
  2477                           
  2478                           ;fuzz.c: 30: setFuzzState(initState);
  2479  032C  084E               	movf	initFuzz@initState+1,w
  2480  032D  00CC               	movwf	setFuzzState@f_state+1
  2481  032E  084D               	movf	initFuzz@initState,w
  2482  032F  00CB               	movwf	setFuzzState@f_state
  2483  0330  2176               	fcall	_setFuzzState
  2484                           
  2485                           ;fuzz.c: 31: setFeedbackState(0);
  2486  0331  3000               	movlw	0
  2487  0332  0020               	movlb	0	; select bank0
  2488  0333  00C8               	movwf	setFeedbackState@f_state
  2489  0334  00C9               	movwf	setFeedbackState@f_state+1
  2490  0335  21EA               	fcall	_setFeedbackState
  2491  0336  0008               	return
  2492  0337                     __end_of_initFuzz:	
  2493                           
  2494                           	psect	text4
  2495  0176                     __ptext4:	
  2496 ;; *************** function _setFuzzState *****************
  2497 ;; Defined at:
  2498 ;;		line 95 in file "mcc_generated_files/fuzz.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  f_state         2    5[BANK0 ] int 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;		None
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMMON   BANK0   BANK1
  2512 ;;      Params:         0       2       0
  2513 ;;      Locals:         0       0       0
  2514 ;;      Temps:          0       0       0
  2515 ;;      Totals:         0       2       0
  2516 ;;Total ram usage:        2 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    5
  2519 ;; This function calls:
  2520 ;;		_updateFuzzState
  2521 ;;		_wait_ms
  2522 ;; This function is called by:
  2523 ;;		_initFuzz
  2524 ;;		_updateFuzz
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           
  2529                           ;psect for function _setFuzzState
  2530  0176                     _setFuzzState:	
  2531                           
  2532                           ;fuzz.c: 96: if (fuzz_state == f_state) {return;}
  2533                           
  2534                           ;incstack = 0
  2535                           ; Regs used in _setFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2536  0176  0020               	movlb	0	; select bank0
  2537  0177  084C               	movf	setFuzzState@f_state+1,w
  2538  0178  0641               	xorwf	_fuzz_state+1,w
  2539  0179  1D03               	skipz
  2540  017A  297D               	goto	u775
  2541  017B  084B               	movf	setFuzzState@f_state,w
  2542  017C  0640               	xorwf	_fuzz_state,w
  2543  017D                     u775:	
  2544  017D  1903               	btfsc	3,2
  2545  017E  0008               	return
  2546                           
  2547                           ;fuzz.c: 97: fuzz_state = f_state;
  2548  017F  084C               	movf	setFuzzState@f_state+1,w
  2549  0180  00C1               	movwf	_fuzz_state+1
  2550  0181  084B               	movf	setFuzzState@f_state,w
  2551  0182  00C0               	movwf	_fuzz_state
  2552                           
  2553                           ;fuzz.c: 98: LATAbits.LATA2 = f_state;
  2554  0183  0C4B               	rrf	setFuzzState@f_state,w
  2555  0184  0022               	movlb	2	; select bank2
  2556  0185  1C03               	skipc
  2557  0186  110C               	bcf	12,2	;volatile
  2558  0187  1803               	skipnc
  2559  0188  150C               	bsf	12,2	;volatile
  2560                           
  2561                           ;fuzz.c: 99: LATCbits.LATC2 = f_state;
  2562  0189  0020               	movlb	0	; select bank0
  2563  018A  0C4B               	rrf	setFuzzState@f_state,w
  2564  018B  0022               	movlb	2	; select bank2
  2565  018C  1C03               	skipc
  2566  018D  110E               	bcf	14,2	;volatile
  2567  018E  1803               	skipnc
  2568  018F  150E               	bsf	14,2	;volatile
  2569                           
  2570                           ;fuzz.c: 100: LATCbits.LATC1 = !f_state;
  2571  0190  0020               	movlb	0	; select bank0
  2572  0191  084B               	movf	setFuzzState@f_state,w
  2573  0192  044C               	iorwf	setFuzzState@f_state+1,w
  2574  0193  1D03               	btfss	3,2
  2575  0194  2998               	goto	u780
  2576  0195  0022               	movlb	2	; select bank2
  2577  0196  148E               	bsf	14,1	;volatile
  2578  0197  299A               	goto	l1342
  2579  0198                     u780:	
  2580  0198  0022               	movlb	2	; select bank2
  2581  0199  108E               	bcf	14,1	;volatile
  2582  019A                     l1342:	
  2583                           
  2584                           ;fuzz.c: 102: wait_ms(20);
  2585  019A  3014               	movlw	20
  2586  019B  0020               	movlb	0	; select bank0
  2587  019C  00C6               	movwf	wait_ms@time
  2588  019D  3000               	movlw	0
  2589  019E  00C7               	movwf	wait_ms@time+1
  2590  019F  2281               	fcall	_wait_ms
  2591                           
  2592                           ;fuzz.c: 104: LATCbits.LATC2 = 0;
  2593  01A0  0022               	movlb	2	; select bank2
  2594  01A1  110E               	bcf	14,2	;volatile
  2595                           
  2596                           ;fuzz.c: 105: LATCbits.LATC1 = 0;
  2597  01A2  108E               	bcf	14,1	;volatile
  2598                           
  2599                           ;fuzz.c: 107: updateFuzzState(fuzz_state);
  2600  01A3  0020               	movlb	0	; select bank0
  2601  01A4  0841               	movf	_fuzz_state+1,w
  2602  01A5  00CA               	movwf	updateFuzzState@state+1
  2603  01A6  0840               	movf	_fuzz_state,w
  2604  01A7  00C9               	movwf	updateFuzzState@state
  2605  01A8  2355               	fcall	_updateFuzzState
  2606                           
  2607                           ;fuzz.c: 108: wait_ms(20);
  2608  01A9  3014               	movlw	20
  2609  01AA  0020               	movlb	0	; select bank0
  2610  01AB  00C6               	movwf	wait_ms@time
  2611  01AC  3000               	movlw	0
  2612  01AD  00C7               	movwf	wait_ms@time+1
  2613  01AE  2281               	fcall	_wait_ms
  2614  01AF  0008               	return
  2615  01B0                     __end_of_setFuzzState:	
  2616                           
  2617                           	psect	text5
  2618  0355                     __ptext5:	
  2619 ;; *************** function _updateFuzzState *****************
  2620 ;; Defined at:
  2621 ;;		line 57 in file "state_manager.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  state           2    3[BANK0 ] int 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMMON   BANK0   BANK1
  2635 ;;      Params:         0       2       0
  2636 ;;      Locals:         0       0       0
  2637 ;;      Temps:          0       0       0
  2638 ;;      Totals:         0       2       0
  2639 ;;Total ram usage:        2 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    4
  2642 ;; This function calls:
  2643 ;;		_saveState
  2644 ;; This function is called by:
  2645 ;;		_setFuzzState
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           
  2650                           ;psect for function _updateFuzzState
  2651  0355                     _updateFuzzState:	
  2652                           
  2653                           ;state_manager.c: 58: if (state != 1) {state = 0;}
  2654                           
  2655                           ;incstack = 0
  2656                           ; Regs used in _updateFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2657  0355  0020               	movlb	0	; select bank0
  2658  0356  0349               	decf	updateFuzzState@state,w
  2659  0357  044A               	iorwf	updateFuzzState@state+1,w
  2660  0358  1903               	btfsc	3,2
  2661  0359  2B5C               	goto	l1302
  2662  035A  01C9               	clrf	updateFuzzState@state
  2663  035B  01CA               	clrf	updateFuzzState@state+1
  2664  035C                     l1302:	
  2665                           
  2666                           ;state_manager.c: 60: pedalState.fuzz = state;
  2667  035C  084A               	movf	updateFuzzState@state+1,w
  2668  035D  00B5               	movwf	_pedalState+1
  2669  035E  0849               	movf	updateFuzzState@state,w
  2670  035F  00B4               	movwf	_pedalState
  2671                           
  2672                           ;state_manager.c: 61: saveState();
  2673  0360  2337               	fcall	_saveState
  2674  0361  0008               	return
  2675  0362                     __end_of_updateFuzzState:	
  2676                           
  2677                           	psect	text6
  2678  01EA                     __ptext6:	
  2679 ;; *************** function _setFeedbackState *****************
  2680 ;; Defined at:
  2681 ;;		line 111 in file "mcc_generated_files/fuzz.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  f_state         2    2[BANK0 ] int 
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  1    wreg      void 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0, pclath, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMMON   BANK0   BANK1
  2695 ;;      Params:         0       2       0
  2696 ;;      Locals:         0       0       0
  2697 ;;      Temps:          0       0       0
  2698 ;;      Totals:         0       2       0
  2699 ;;Total ram usage:        2 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    3
  2702 ;; This function calls:
  2703 ;;		_wait_ms
  2704 ;; This function is called by:
  2705 ;;		_initFuzz
  2706 ;;		_updateFuzz
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           
  2711                           ;psect for function _setFeedbackState
  2712  01EA                     _setFeedbackState:	
  2713                           
  2714                           ;fuzz.c: 112: if (feedback_state == f_state) {return;}
  2715                           
  2716                           ;incstack = 0
  2717                           ; Regs used in _setFeedbackState: [wreg+status,2+status,0+pclath+cstack]
  2718  01EA  0020               	movlb	0	; select bank0
  2719  01EB  0849               	movf	setFeedbackState@f_state+1,w
  2720  01EC  063F               	xorwf	_feedback_state+1,w
  2721  01ED  1D03               	skipz
  2722  01EE  29F1               	goto	u805
  2723  01EF  0848               	movf	setFeedbackState@f_state,w
  2724  01F0  063E               	xorwf	_feedback_state,w
  2725  01F1                     u805:	
  2726  01F1  1903               	btfsc	3,2
  2727  01F2  0008               	return
  2728                           
  2729                           ;fuzz.c: 113: feedback_state = f_state;
  2730  01F3  0849               	movf	setFeedbackState@f_state+1,w
  2731  01F4  00BF               	movwf	_feedback_state+1
  2732  01F5  0848               	movf	setFeedbackState@f_state,w
  2733  01F6  00BE               	movwf	_feedback_state
  2734                           
  2735                           ;fuzz.c: 114: LATCbits.LATC3 = f_state;
  2736  01F7  0C48               	rrf	setFeedbackState@f_state,w
  2737  01F8  0022               	movlb	2	; select bank2
  2738  01F9  1C03               	skipc
  2739  01FA  118E               	bcf	14,3	;volatile
  2740  01FB  1803               	skipnc
  2741  01FC  158E               	bsf	14,3	;volatile
  2742                           
  2743                           ;fuzz.c: 115: LATAbits.LATA0 = f_state;
  2744  01FD  0020               	movlb	0	; select bank0
  2745  01FE  0C48               	rrf	setFeedbackState@f_state,w
  2746  01FF  0022               	movlb	2	; select bank2
  2747  0200  1C03               	skipc
  2748  0201  100C               	bcf	12,0	;volatile
  2749  0202  1803               	skipnc
  2750  0203  140C               	bsf	12,0	;volatile
  2751                           
  2752                           ;fuzz.c: 116: LATAbits.LATA1 = !f_state;
  2753  0204  0020               	movlb	0	; select bank0
  2754  0205  0848               	movf	setFeedbackState@f_state,w
  2755  0206  0449               	iorwf	setFeedbackState@f_state+1,w
  2756  0207  1D03               	btfss	3,2
  2757  0208  2A0C               	goto	u810
  2758  0209  0022               	movlb	2	; select bank2
  2759  020A  148C               	bsf	12,1	;volatile
  2760  020B  2A0E               	goto	l1364
  2761  020C                     u810:	
  2762  020C  0022               	movlb	2	; select bank2
  2763  020D  108C               	bcf	12,1	;volatile
  2764  020E                     l1364:	
  2765                           
  2766                           ;fuzz.c: 118: wait_ms(20);
  2767  020E  3014               	movlw	20
  2768  020F  0020               	movlb	0	; select bank0
  2769  0210  00C6               	movwf	wait_ms@time
  2770  0211  3000               	movlw	0
  2771  0212  00C7               	movwf	wait_ms@time+1
  2772  0213  2281               	fcall	_wait_ms
  2773                           
  2774                           ;fuzz.c: 120: LATAbits.LATA0 = 0;
  2775  0214  0022               	movlb	2	; select bank2
  2776  0215  100C               	bcf	12,0	;volatile
  2777                           
  2778                           ;fuzz.c: 121: LATAbits.LATA1 = 0;
  2779  0216  108C               	bcf	12,1	;volatile
  2780                           
  2781                           ;fuzz.c: 124: wait_ms(20);
  2782  0217  3014               	movlw	20
  2783  0218  0020               	movlb	0	; select bank0
  2784  0219  00C6               	movwf	wait_ms@time
  2785  021A  3000               	movlw	0
  2786  021B  00C7               	movwf	wait_ms@time+1
  2787  021C  2281               	fcall	_wait_ms
  2788  021D  0008               	return
  2789  021E                     __end_of_setFeedbackState:	
  2790                           
  2791                           	psect	text7
  2792  0391                     __ptext7:	
  2793 ;; *************** function _getFuzzState *****************
  2794 ;; Defined at:
  2795 ;;		line 42 in file "state_manager.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  2    1[BANK0 ] int 
  2802 ;; Registers used:
  2803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMMON   BANK0   BANK1
  2809 ;;      Params:         0       2       0
  2810 ;;      Locals:         0       0       0
  2811 ;;      Temps:          0       0       0
  2812 ;;      Totals:         0       2       0
  2813 ;;Total ram usage:        2 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    4
  2816 ;; This function calls:
  2817 ;;		_getCurrentState
  2818 ;; This function is called by:
  2819 ;;		_initFuzz
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           
  2824                           ;psect for function _getFuzzState
  2825  0391                     _getFuzzState:	
  2826                           
  2827                           ;state_manager.c: 43: getCurrentState();
  2828                           
  2829                           ;incstack = 0
  2830                           ; Regs used in _getFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2831  0391  22A9               	fcall	_getCurrentState
  2832                           
  2833                           ;state_manager.c: 44: return pedalState.fuzz;
  2834  0392  0020               	movlb	0	; select bank0
  2835  0393  0835               	movf	_pedalState+1,w
  2836  0394  00C8               	movwf	?_getFuzzState+1
  2837  0395  0834               	movf	_pedalState,w
  2838  0396  00C7               	movwf	?_getFuzzState
  2839  0397  0008               	return
  2840  0398                     __end_of_getFuzzState:	
  2841                           
  2842                           	psect	text8
  2843  036F                     __ptext8:	
  2844 ;; *************** function _initBoost *****************
  2845 ;; Defined at:
  2846 ;;		line 23 in file "mcc_generated_files/boost.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  initState       2    7[BANK0 ] int 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1
  2860 ;;      Params:         0       0       0
  2861 ;;      Locals:         0       2       0
  2862 ;;      Temps:          0       0       0
  2863 ;;      Totals:         0       2       0
  2864 ;;Total ram usage:        2 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    6
  2867 ;; This function calls:
  2868 ;;		_getBoostState
  2869 ;;		_setBoostState
  2870 ;; This function is called by:
  2871 ;;		_main
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           
  2876                           ;psect for function _initBoost
  2877  036F                     _initBoost:	
  2878                           
  2879                           ;boost.c: 24: int initState = getBoostState();
  2880                           
  2881                           ;incstack = 0
  2882                           ; Regs used in _initBoost: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2883  036F  237B               	fcall	_getBoostState
  2884  0370  0020               	movlb	0	; select bank0
  2885  0371  0848               	movf	?_getBoostState+1,w
  2886  0372  00CE               	movwf	initBoost@initState+1
  2887  0373  0847               	movf	?_getBoostState,w
  2888  0374  00CD               	movwf	initBoost@initState
  2889                           
  2890                           ;boost.c: 25: setBoostState(initState);
  2891  0375  084E               	movf	initBoost@initState+1,w
  2892  0376  00CC               	movwf	setBoostState@f_state+1
  2893  0377  084D               	movf	initBoost@initState,w
  2894  0378  00CB               	movwf	setBoostState@f_state
  2895  0379  21B0               	fcall	_setBoostState
  2896  037A  0008               	return
  2897  037B                     __end_of_initBoost:	
  2898                           
  2899                           	psect	text9
  2900  01B0                     __ptext9:	
  2901 ;; *************** function _setBoostState *****************
  2902 ;; Defined at:
  2903 ;;		line 63 in file "mcc_generated_files/boost.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  f_state         2    5[BANK0 ] int 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMMON   BANK0   BANK1
  2917 ;;      Params:         0       2       0
  2918 ;;      Locals:         0       0       0
  2919 ;;      Temps:          0       0       0
  2920 ;;      Totals:         0       2       0
  2921 ;;Total ram usage:        2 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    5
  2924 ;; This function calls:
  2925 ;;		_updateBoostState
  2926 ;;		_wait_ms
  2927 ;; This function is called by:
  2928 ;;		_initBoost
  2929 ;;		_updateBoost
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           
  2934                           ;psect for function _setBoostState
  2935  01B0                     _setBoostState:	
  2936                           
  2937                           ;boost.c: 64: if (boost_state == f_state) {return;}
  2938                           
  2939                           ;incstack = 0
  2940                           ; Regs used in _setBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2941  01B0  0020               	movlb	0	; select bank0
  2942  01B1  084C               	movf	setBoostState@f_state+1,w
  2943  01B2  0639               	xorwf	_boost_state+1,w
  2944  01B3  1D03               	skipz
  2945  01B4  29B7               	goto	u845
  2946  01B5  084B               	movf	setBoostState@f_state,w
  2947  01B6  0638               	xorwf	_boost_state,w
  2948  01B7                     u845:	
  2949  01B7  1903               	btfsc	3,2
  2950  01B8  0008               	return
  2951                           
  2952                           ;boost.c: 65: boost_state = f_state;
  2953  01B9  084C               	movf	setBoostState@f_state+1,w
  2954  01BA  00B9               	movwf	_boost_state+1
  2955  01BB  084B               	movf	setBoostState@f_state,w
  2956  01BC  00B8               	movwf	_boost_state
  2957                           
  2958                           ;boost.c: 66: LATCbits.LATC5 = f_state;
  2959  01BD  0C4B               	rrf	setBoostState@f_state,w
  2960  01BE  0022               	movlb	2	; select bank2
  2961  01BF  1C03               	skipc
  2962  01C0  128E               	bcf	14,5	;volatile
  2963  01C1  1803               	skipnc
  2964  01C2  168E               	bsf	14,5	;volatile
  2965                           
  2966                           ;boost.c: 67: LATCbits.LATC0 = f_state;
  2967  01C3  0020               	movlb	0	; select bank0
  2968  01C4  0C4B               	rrf	setBoostState@f_state,w
  2969  01C5  0022               	movlb	2	; select bank2
  2970  01C6  1C03               	skipc
  2971  01C7  100E               	bcf	14,0	;volatile
  2972  01C8  1803               	skipnc
  2973  01C9  140E               	bsf	14,0	;volatile
  2974                           
  2975                           ;boost.c: 68: LATCbits.LATC4 = !f_state;
  2976  01CA  0020               	movlb	0	; select bank0
  2977  01CB  084B               	movf	setBoostState@f_state,w
  2978  01CC  044C               	iorwf	setBoostState@f_state+1,w
  2979  01CD  1D03               	btfss	3,2
  2980  01CE  29D2               	goto	u850
  2981  01CF  0022               	movlb	2	; select bank2
  2982  01D0  160E               	bsf	14,4	;volatile
  2983  01D1  29D4               	goto	l1392
  2984  01D2                     u850:	
  2985  01D2  0022               	movlb	2	; select bank2
  2986  01D3  120E               	bcf	14,4	;volatile
  2987  01D4                     l1392:	
  2988                           
  2989                           ;boost.c: 70: wait_ms(20);
  2990  01D4  3014               	movlw	20
  2991  01D5  0020               	movlb	0	; select bank0
  2992  01D6  00C6               	movwf	wait_ms@time
  2993  01D7  3000               	movlw	0
  2994  01D8  00C7               	movwf	wait_ms@time+1
  2995  01D9  2281               	fcall	_wait_ms
  2996                           
  2997                           ;boost.c: 72: LATCbits.LATC0 = 0;
  2998  01DA  0022               	movlb	2	; select bank2
  2999  01DB  100E               	bcf	14,0	;volatile
  3000                           
  3001                           ;boost.c: 73: LATCbits.LATC4 = 0;
  3002  01DC  120E               	bcf	14,4	;volatile
  3003                           
  3004                           ;boost.c: 75: updateBoostState(boost_state);
  3005  01DD  0020               	movlb	0	; select bank0
  3006  01DE  0839               	movf	_boost_state+1,w
  3007  01DF  00CA               	movwf	updateBoostState@state+1
  3008  01E0  0838               	movf	_boost_state,w
  3009  01E1  00C9               	movwf	updateBoostState@state
  3010  01E2  2362               	fcall	_updateBoostState
  3011                           
  3012                           ;boost.c: 76: wait_ms(20);
  3013  01E3  3014               	movlw	20
  3014  01E4  0020               	movlb	0	; select bank0
  3015  01E5  00C6               	movwf	wait_ms@time
  3016  01E6  3000               	movlw	0
  3017  01E7  00C7               	movwf	wait_ms@time+1
  3018  01E8  2281               	fcall	_wait_ms
  3019  01E9  0008               	return
  3020  01EA                     __end_of_setBoostState:	
  3021                           
  3022                           	psect	text10
  3023  0281                     __ptext10:	
  3024 ;; *************** function _wait_ms *****************
  3025 ;; Defined at:
  3026 ;;		line 23 in file "system.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  time            2    0[BANK0 ] unsigned int 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0, pclath, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1
  3040 ;;      Params:         0       2       0
  3041 ;;      Locals:         0       0       0
  3042 ;;      Temps:          0       0       0
  3043 ;;      Totals:         0       2       0
  3044 ;;Total ram usage:        2 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    2
  3047 ;; This function calls:
  3048 ;;		___lmul
  3049 ;; This function is called by:
  3050 ;;		_setFuzzState
  3051 ;;		_setFeedbackState
  3052 ;;		_setBoostState
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           
  3057                           ;psect for function _wait_ms
  3058  0281                     _wait_ms:	
  3059                           
  3060                           ;system.c: 25: static long timel = 0;
  3061                           ;system.c: 26: timel = time * 1000l;
  3062                           
  3063                           ;incstack = 0
  3064                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  3065  0281  0020               	movlb	0	; select bank0
  3066  0282  0846               	movf	wait_ms@time,w
  3067  0283  00F1               	movwf	___lmul@multiplier
  3068  0284  0847               	movf	wait_ms@time+1,w
  3069  0285  00F2               	movwf	___lmul@multiplier+1
  3070  0286  01F3               	clrf	___lmul@multiplier+2
  3071  0287  01F4               	clrf	___lmul@multiplier+3
  3072  0288  3000               	movlw	0
  3073  0289  00F8               	movwf	___lmul@multiplicand+3
  3074  028A  3000               	movlw	0
  3075  028B  00F7               	movwf	___lmul@multiplicand+2
  3076  028C  3003               	movlw	3
  3077  028D  00F6               	movwf	___lmul@multiplicand+1
  3078  028E  30E8               	movlw	232
  3079  028F  00F5               	movwf	___lmul@multiplicand
  3080  0290  2252               	fcall	___lmul
  3081  0291  0874               	movf	?___lmul+3,w
  3082  0292  0020               	movlb	0	; select bank0
  3083  0293  00A3               	movwf	wait_ms@timel+3
  3084  0294  0873               	movf	?___lmul+2,w
  3085  0295  00A2               	movwf	wait_ms@timel+2
  3086  0296  0872               	movf	?___lmul+1,w
  3087  0297  00A1               	movwf	wait_ms@timel+1
  3088  0298  0871               	movf	?___lmul,w
  3089  0299  00A0               	movwf	wait_ms@timel
  3090  029A                     l73:	
  3091                           ;system.c: 27: for( ; timel; timel--);
  3092                           
  3093  029A  0823               	movf	wait_ms@timel+3,w
  3094  029B  0422               	iorwf	wait_ms@timel+2,w
  3095  029C  0421               	iorwf	wait_ms@timel+1,w
  3096  029D  0420               	iorwf	wait_ms@timel,w
  3097  029E  1903               	btfsc	3,2
  3098  029F  0008               	return
  3099  02A0  30FF               	movlw	255
  3100  02A1  07A0               	addwf	wait_ms@timel,f
  3101  02A2  30FF               	movlw	255
  3102  02A3  3DA1               	addwfc	wait_ms@timel+1,f
  3103  02A4  30FF               	movlw	255
  3104  02A5  3DA2               	addwfc	wait_ms@timel+2,f
  3105  02A6  30FF               	movlw	255
  3106  02A7  3DA3               	addwfc	wait_ms@timel+3,f
  3107  02A8  2A9A               	goto	l73
  3108  02A9                     __end_of_wait_ms:	
  3109                           
  3110                           	psect	text11
  3111  0252                     __ptext11:	
  3112 ;; *************** function ___lmul *****************
  3113 ;; Defined at:
  3114 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  multiplier      4    1[COMMON] unsigned long 
  3117 ;;  multiplicand    4    5[COMMON] unsigned long 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  product         4    9[COMMON] unsigned long 
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  4    1[COMMON] unsigned long 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1
  3129 ;;      Params:         8       0       0
  3130 ;;      Locals:         4       0       0
  3131 ;;      Temps:          0       0       0
  3132 ;;      Totals:        12       0       0
  3133 ;;Total ram usage:       12 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    1
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_wait_ms
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           
  3144                           ;psect for function ___lmul
  3145  0252                     ___lmul:	
  3146                           
  3147                           ;incstack = 0
  3148                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3149  0252  3000               	movlw	0
  3150  0253  00FC               	movwf	___lmul@product+3
  3151  0254  3000               	movlw	0
  3152  0255  00FB               	movwf	___lmul@product+2
  3153  0256  3000               	movlw	0
  3154  0257  00FA               	movwf	___lmul@product+1
  3155  0258  3000               	movlw	0
  3156  0259  00F9               	movwf	___lmul@product
  3157  025A                     l1282:	
  3158  025A  1C71               	btfss	___lmul@multiplier,0
  3159  025B  2A64               	goto	l1286
  3160  025C  0875               	movf	___lmul@multiplicand,w
  3161  025D  07F9               	addwf	___lmul@product,f
  3162  025E  0876               	movf	___lmul@multiplicand+1,w
  3163  025F  3DFA               	addwfc	___lmul@product+1,f
  3164  0260  0877               	movf	___lmul@multiplicand+2,w
  3165  0261  3DFB               	addwfc	___lmul@product+2,f
  3166  0262  0878               	movf	___lmul@multiplicand+3,w
  3167  0263  3DFC               	addwfc	___lmul@product+3,f
  3168  0264                     l1286:	
  3169  0264  3001               	movlw	1
  3170  0265                     u715:	
  3171  0265  35F5               	lslf	___lmul@multiplicand,f
  3172  0266  0DF6               	rlf	___lmul@multiplicand+1,f
  3173  0267  0DF7               	rlf	___lmul@multiplicand+2,f
  3174  0268  0DF8               	rlf	___lmul@multiplicand+3,f
  3175  0269  0B89               	decfsz	9,f
  3176  026A  2A65               	goto	u715
  3177  026B  3001               	movlw	1
  3178  026C                     u725:	
  3179  026C  36F4               	lsrf	___lmul@multiplier+3,f
  3180  026D  0CF3               	rrf	___lmul@multiplier+2,f
  3181  026E  0CF2               	rrf	___lmul@multiplier+1,f
  3182  026F  0CF1               	rrf	___lmul@multiplier,f
  3183  0270  0B89               	decfsz	9,f
  3184  0271  2A6C               	goto	u725
  3185  0272  0874               	movf	___lmul@multiplier+3,w
  3186  0273  0473               	iorwf	___lmul@multiplier+2,w
  3187  0274  0472               	iorwf	___lmul@multiplier+1,w
  3188  0275  0471               	iorwf	___lmul@multiplier,w
  3189  0276  1D03               	skipz
  3190  0277  2A5A               	goto	l1282
  3191  0278  087C               	movf	___lmul@product+3,w
  3192  0279  00F4               	movwf	?___lmul+3
  3193  027A  087B               	movf	___lmul@product+2,w
  3194  027B  00F3               	movwf	?___lmul+2
  3195  027C  087A               	movf	___lmul@product+1,w
  3196  027D  00F2               	movwf	?___lmul+1
  3197  027E  0879               	movf	___lmul@product,w
  3198  027F  00F1               	movwf	?___lmul
  3199  0280  0008               	return
  3200  0281                     __end_of___lmul:	
  3201                           
  3202                           	psect	text12
  3203  0362                     __ptext12:	
  3204 ;; *************** function _updateBoostState *****************
  3205 ;; Defined at:
  3206 ;;		line 65 in file "state_manager.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  state           2    3[BANK0 ] int 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1
  3220 ;;      Params:         0       2       0
  3221 ;;      Locals:         0       0       0
  3222 ;;      Temps:          0       0       0
  3223 ;;      Totals:         0       2       0
  3224 ;;Total ram usage:        2 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    4
  3227 ;; This function calls:
  3228 ;;		_saveState
  3229 ;; This function is called by:
  3230 ;;		_setBoostState
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           
  3235                           ;psect for function _updateBoostState
  3236  0362                     _updateBoostState:	
  3237                           
  3238                           ;state_manager.c: 66: if (state != 1) {state = 0;}
  3239                           
  3240                           ;incstack = 0
  3241                           ; Regs used in _updateBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3242  0362  0020               	movlb	0	; select bank0
  3243  0363  0349               	decf	updateBoostState@state,w
  3244  0364  044A               	iorwf	updateBoostState@state+1,w
  3245  0365  1903               	btfsc	3,2
  3246  0366  2B69               	goto	l1310
  3247  0367  01C9               	clrf	updateBoostState@state
  3248  0368  01CA               	clrf	updateBoostState@state+1
  3249  0369                     l1310:	
  3250                           
  3251                           ;state_manager.c: 68: pedalState.boost = state;
  3252  0369  084A               	movf	updateBoostState@state+1,w
  3253  036A  00B7               	movwf	_pedalState+3
  3254  036B  0849               	movf	updateBoostState@state,w
  3255  036C  00B6               	movwf	_pedalState+2
  3256                           
  3257                           ;state_manager.c: 69: saveState();
  3258  036D  2337               	fcall	_saveState
  3259  036E  0008               	return
  3260  036F                     __end_of_updateBoostState:	
  3261                           
  3262                           	psect	text13
  3263  0337                     __ptext13:	
  3264 ;; *************** function _saveState *****************
  3265 ;; Defined at:
  3266 ;;		line 72 in file "state_manager.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;		None
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;  r               1   12[COMMON] unsigned char 
  3271 ;; Return value:  Size  Location     Type
  3272 ;;                  1    wreg      void 
  3273 ;; Registers used:
  3274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMMON   BANK0   BANK1
  3280 ;;      Params:         0       0       0
  3281 ;;      Locals:         1       0       0
  3282 ;;      Temps:          0       3       0
  3283 ;;      Totals:         1       3       0
  3284 ;;Total ram usage:        4 bytes
  3285 ;; Hardware stack levels used:    1
  3286 ;; Hardware stack levels required when called:    3
  3287 ;; This function calls:
  3288 ;;		_HEF_ByteArrayWrite
  3289 ;; This function is called by:
  3290 ;;		_updateFuzzState
  3291 ;;		_updateBoostState
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           
  3296                           ;psect for function _saveState
  3297  0337                     _saveState:	
  3298                           
  3299                           ;state_manager.c: 73: uint8_t r;
  3300                           ;state_manager.c: 74: r = HEF_ByteArrayWrite(1, (void *) &pedalState, sizeof (pedalState
      +                          ));
  3301                           
  3302                           ;incstack = 0
  3303                           ; Regs used in _saveState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3304  0337  3034               	movlw	(low (_pedalState| 0))& (0+255)
  3305  0338  0020               	movlb	0	; select bank0
  3306  0339  00C6               	movwf	??_saveState
  3307  033A  0846               	movf	??_saveState,w
  3308  033B  00F4               	movwf	HEF_ByteArrayWrite@byteArray
  3309  033C  3004               	movlw	4
  3310  033D  00C7               	movwf	??_saveState+1
  3311  033E  0847               	movf	??_saveState+1,w
  3312  033F  00F5               	movwf	HEF_ByteArrayWrite@count
  3313  0340  3001               	movlw	1
  3314  0341  2123               	fcall	_HEF_ByteArrayWrite
  3315  0342  0020               	movlb	0	; select bank0
  3316  0343  00C8               	movwf	??_saveState+2
  3317  0344  0848               	movf	??_saveState+2,w
  3318  0345  00FC               	movwf	saveState@r
  3319  0346  0008               	return
  3320  0347                     __end_of_saveState:	
  3321                           
  3322                           	psect	text14
  3323  0123                     __ptext14:	
  3324 ;; *************** function _HEF_ByteArrayWrite *****************
  3325 ;; Defined at:
  3326 ;;		line 12 in file "HEF.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  block           1    wreg     unsigned char 
  3329 ;;  byteArray       1    4[COMMON] PTR unsigned char 
  3330 ;;		 -> pedalState(4), 
  3331 ;;  count           1    5[COMMON] unsigned char 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  block           1    9[COMMON] unsigned char 
  3334 ;;  blockAddr       2   10[COMMON] unsigned int 
  3335 ;;  GIEBitValue     1    8[COMMON] unsigned char 
  3336 ;;  i               1    0        unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      char 
  3339 ;; Registers used:
  3340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1
  3346 ;;      Params:         2       0       0
  3347 ;;      Locals:         4       0       0
  3348 ;;      Temps:          2       0       0
  3349 ;;      Totals:         8       0       0
  3350 ;;Total ram usage:        8 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    2
  3353 ;; This function calls:
  3354 ;;		_FLASH_EraseBlock
  3355 ;; This function is called by:
  3356 ;;		_saveState
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           
  3361                           ;psect for function _HEF_ByteArrayWrite
  3362  0123                     _HEF_ByteArrayWrite:	
  3363                           
  3364                           ;incstack = 0
  3365                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3366                           ;HEF_ByteArrayWrite@block stored from wreg
  3367  0123  00F9               	movwf	HEF_ByteArrayWrite@block
  3368                           
  3369                           ;HEF.c: 13: uint16_t blockAddr;
  3370                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
  3371  0124  3000               	movlw	0
  3372  0125  1B8B               	btfsc	11,7	;volatile
  3373  0126  3001               	movlw	1
  3374  0127  00F8               	movwf	HEF_ByteArrayWrite@GIEBitValue
  3375                           
  3376                           ;HEF.c: 15: uint8_t i;
  3377                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
  3378  0128  3004               	movlw	4
  3379  0129  0279               	subwf	HEF_ByteArrayWrite@block,w
  3380  012A  1803               	skipnc
  3381  012B  2930               	goto	l1192
  3382  012C  3021               	movlw	33
  3383  012D  0275               	subwf	HEF_ByteArrayWrite@count,w
  3384  012E  1C03               	skipc
  3385  012F  2932               	goto	l1196
  3386  0130                     l1192:	
  3387                           
  3388                           ;HEF.c: 18: return -1;
  3389  0130  30FF               	movlw	255
  3390  0131  0008               	return
  3391  0132                     l1196:	
  3392                           
  3393                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
  3394  0132  0879               	movf	HEF_ByteArrayWrite@block,w
  3395  0133  00F6               	movwf	??_HEF_ByteArrayWrite
  3396  0134  01F7               	clrf	??_HEF_ByteArrayWrite+1
  3397  0135  3005               	movlw	5
  3398  0136                     u605:	
  3399  0136  35F6               	lslf	??_HEF_ByteArrayWrite,f
  3400  0137  0DF7               	rlf	??_HEF_ByteArrayWrite+1,f
  3401  0138  0B89               	decfsz	9,f
  3402  0139  2936               	goto	u605
  3403  013A  0876               	movf	??_HEF_ByteArrayWrite,w
  3404  013B  3E80               	addlw	128
  3405  013C  00FA               	movwf	HEF_ByteArrayWrite@blockAddr
  3406  013D  303F               	movlw	63
  3407  013E  3D77               	addwfc	??_HEF_ByteArrayWrite+1,w
  3408  013F  00FB               	movwf	HEF_ByteArrayWrite@blockAddr+1
  3409                           
  3410                           ;HEF.c: 21: INTCONbits.GIE = 0;
  3411  0140  138B               	bcf	11,7	;volatile
  3412                           
  3413                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
  3414  0141  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3415  0142  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  3416  0143  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3417  0144  00F1               	movwf	FLASH_EraseBlock@startAddr
  3418  0145  22CB               	fcall	_FLASH_EraseBlock
  3419                           
  3420                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
  3421  0146  0023               	movlb	3	; select bank3
  3422  0147  1315               	bcf	21,6	;volatile
  3423                           
  3424                           ;HEF.c: 27: PMCON1bits.WREN = 1;
  3425  0148  1515               	bsf	21,2	;volatile
  3426                           
  3427                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
  3428  0149  1695               	bsf	21,5	;volatile
  3429  014A                     l1230:	
  3430                           ;HEF.c: 30: while ( count > 0) {
  3431                           
  3432  014A  0875               	movf	HEF_ByteArrayWrite@count,w
  3433  014B  1903               	btfsc	3,2
  3434  014C  296D               	goto	l241
  3435                           
  3436                           ;HEF.c: 31: PMADR = blockAddr++;
  3437  014D  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3438  014E  0023               	movlb	3	; select bank3
  3439  014F  0092               	movwf	18	;volatile
  3440  0150  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3441  0151  0091               	movwf	17	;volatile
  3442  0152  3001               	movlw	1
  3443  0153  07FA               	addwf	HEF_ByteArrayWrite@blockAddr,f
  3444  0154  3000               	movlw	0
  3445  0155  3DFB               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
  3446                           
  3447                           ;HEF.c: 33: PMDATL = *byteArray++;
  3448  0156  0874               	movf	HEF_ByteArrayWrite@byteArray,w
  3449  0157  0086               	movwf	6
  3450  0158  0187               	clrf	7
  3451  0159  0801               	movf	1,w
  3452  015A  0093               	movwf	19	;volatile
  3453  015B  3001               	movlw	1
  3454  015C  00F6               	movwf	??_HEF_ByteArrayWrite
  3455  015D  0876               	movf	??_HEF_ByteArrayWrite,w
  3456  015E  07F4               	addwf	HEF_ByteArrayWrite@byteArray,f
  3457                           
  3458                           ;HEF.c: 34: PMDATH = 0;
  3459  015F  0194               	clrf	20	;volatile
  3460                           
  3461                           ;HEF.c: 35: if ( count == 1) {
  3462  0160  0375               	decf	HEF_ByteArrayWrite@count,w
  3463  0161  1903               	btfsc	3,2
  3464                           
  3465                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
  3466  0162  1295               	bcf	21,5	;volatile
  3467                           
  3468                           ;HEF.c: 37: }
  3469                           ;HEF.c: 39: PMCON2 = 0x55;
  3470  0163  3055               	movlw	85
  3471  0164  0096               	movwf	22	;volsfr
  3472                           
  3473                           ;HEF.c: 40: PMCON2 = 0xAA;
  3474  0165  30AA               	movlw	170
  3475  0166  0096               	movwf	22	;volsfr
  3476                           
  3477                           ;HEF.c: 41: PMCON1bits.WR = 1;
  3478  0167  1495               	bsf	21,1	;volatile
  3479                           
  3480                           ;HEF.c: 42: __nop();
  3481  0168  0000               	nop
  3482                           
  3483                           ;HEF.c: 43: __nop();
  3484  0169  0000               	nop
  3485                           
  3486                           ;HEF.c: 44: count--;
  3487  016A  3001               	movlw	1
  3488  016B  02F5               	subwf	HEF_ByteArrayWrite@count,f
  3489  016C  294A               	goto	l1230
  3490  016D                     l241:	
  3491                           
  3492                           ;HEF.c: 45: }
  3493                           ;HEF.c: 47: PMCON1bits.WREN = 0;
  3494  016D  0023               	movlb	3	; select bank3
  3495  016E  1115               	bcf	21,2	;volatile
  3496                           
  3497                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
  3498  016F  0C78               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
  3499  0170  1C03               	skipc
  3500  0171  138B               	bcf	11,7	;volatile
  3501  0172  1803               	skipnc
  3502  0173  178B               	bsf	11,7	;volatile
  3503                           
  3504                           ;HEF.c: 50: return 0;
  3505  0174  3000               	movlw	0
  3506  0175  0008               	return
  3507  0176                     __end_of_HEF_ByteArrayWrite:	
  3508                           
  3509                           	psect	text15
  3510  02CB                     __ptext15:	
  3511 ;; *************** function _FLASH_EraseBlock *****************
  3512 ;; Defined at:
  3513 ;;		line 141 in file "mcc_generated_files/memory.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  startAddr       2    1[COMMON] unsigned int 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1
  3527 ;;      Params:         2       0       0
  3528 ;;      Locals:         1       0       0
  3529 ;;      Temps:          0       0       0
  3530 ;;      Totals:         3       0       0
  3531 ;;Total ram usage:        3 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    1
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_HEF_ByteArrayWrite
  3538 ;;		_FLASH_WriteBlock
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           
  3543                           ;psect for function _FLASH_EraseBlock
  3544  02CB                     _FLASH_EraseBlock:	
  3545                           
  3546                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  3547                           
  3548                           ;incstack = 0
  3549                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  3550  02CB  3000               	movlw	0
  3551  02CC  1B8B               	btfsc	11,7	;volatile
  3552  02CD  3001               	movlw	1
  3553  02CE  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  3554                           
  3555                           ;memory.c: 145: INTCONbits.GIE = 0;
  3556  02CF  138B               	bcf	11,7	;volatile
  3557                           
  3558                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  3559  02D0  0871               	movf	FLASH_EraseBlock@startAddr,w
  3560  02D1  0023               	movlb	3	; select bank3
  3561  02D2  0091               	movwf	17	;volatile
  3562                           
  3563                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  3564  02D3  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  3565  02D4  0092               	movwf	18	;volatile
  3566                           
  3567                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  3568  02D5  1315               	bcf	21,6	;volatile
  3569                           
  3570                           ;memory.c: 153: PMCON1bits.FREE = 1;
  3571  02D6  1615               	bsf	21,4	;volatile
  3572                           
  3573                           ;memory.c: 154: PMCON1bits.WREN = 1;
  3574  02D7  1515               	bsf	21,2	;volatile
  3575                           
  3576                           ;memory.c: 157: PMCON2 = 0x55;
  3577  02D8  3055               	movlw	85
  3578  02D9  0096               	movwf	22	;volsfr
  3579                           
  3580                           ;memory.c: 158: PMCON2 = 0xAA;
  3581  02DA  30AA               	movlw	170
  3582  02DB  0096               	movwf	22	;volsfr
  3583                           
  3584                           ;memory.c: 159: PMCON1bits.WR = 1;
  3585  02DC  1495               	bsf	21,1	;volatile
  3586                           
  3587                           ;memory.c: 160: __nop();
  3588  02DD  0000               	nop
  3589                           
  3590                           ;memory.c: 161: __nop();
  3591  02DE  0000               	nop
  3592                           
  3593                           ;memory.c: 163: PMCON1bits.WREN = 0;
  3594  02DF  0023               	movlb	3	; select bank3
  3595  02E0  1115               	bcf	21,2	;volatile
  3596                           
  3597                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  3598  02E1  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  3599  02E2  1C03               	skipc
  3600  02E3  138B               	bcf	11,7	;volatile
  3601  02E4  1803               	skipnc
  3602  02E5  178B               	bsf	11,7	;volatile
  3603  02E6  0008               	return
  3604  02E7                     __end_of_FLASH_EraseBlock:	
  3605                           
  3606                           	psect	text16
  3607  037B                     __ptext16:	
  3608 ;; *************** function _getBoostState *****************
  3609 ;; Defined at:
  3610 ;;		line 49 in file "state_manager.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;		None
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  2    1[BANK0 ] int 
  3617 ;; Registers used:
  3618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMMON   BANK0   BANK1
  3624 ;;      Params:         0       2       0
  3625 ;;      Locals:         0       0       0
  3626 ;;      Temps:          0       0       0
  3627 ;;      Totals:         0       2       0
  3628 ;;Total ram usage:        2 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    5
  3631 ;; This function calls:
  3632 ;;		_initStateManager
  3633 ;; This function is called by:
  3634 ;;		_initBoost
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           
  3639                           ;psect for function _getBoostState
  3640  037B                     _getBoostState:	
  3641                           
  3642                           ;state_manager.c: 50: if (!isInitialized) {
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in _getBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3646  037B  0020               	movlb	0	; select bank0
  3647  037C  0830               	movf	_isInitialized,w
  3648  037D  0431               	iorwf	_isInitialized+1,w
  3649  037E  1D03               	btfss	3,2
  3650  037F  2B81               	goto	l1376
  3651                           
  3652                           ;state_manager.c: 51: initStateManager();
  3653  0380  23A4               	fcall	_initStateManager
  3654  0381                     l1376:	
  3655                           
  3656                           ;state_manager.c: 52: }
  3657                           ;state_manager.c: 53: return pedalState.boost;
  3658  0381  0020               	movlb	0	; select bank0
  3659  0382  0837               	movf	_pedalState+3,w
  3660  0383  00C8               	movwf	?_getBoostState+1
  3661  0384  0836               	movf	_pedalState+2,w
  3662  0385  00C7               	movwf	?_getBoostState
  3663  0386  0008               	return
  3664  0387                     __end_of_getBoostState:	
  3665                           
  3666                           	psect	text17
  3667  03A4                     __ptext17:	
  3668 ;; *************** function _initStateManager *****************
  3669 ;; Defined at:
  3670 ;;		line 18 in file "state_manager.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;		None
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1
  3684 ;;      Params:         0       0       0
  3685 ;;      Locals:         0       0       0
  3686 ;;      Temps:          0       0       0
  3687 ;;      Totals:         0       0       0
  3688 ;;Total ram usage:        0 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    4
  3691 ;; This function calls:
  3692 ;;		_getCurrentState
  3693 ;; This function is called by:
  3694 ;;		_getBoostState
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           
  3699                           ;psect for function _initStateManager
  3700  03A4                     _initStateManager:	
  3701                           
  3702                           ;state_manager.c: 19: isInitialized = 0;
  3703                           
  3704                           ;incstack = 0
  3705                           ; Regs used in _initStateManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3706  03A4  0020               	movlb	0	; select bank0
  3707  03A5  01B0               	clrf	_isInitialized
  3708  03A6  01B1               	clrf	_isInitialized+1
  3709                           
  3710                           ;state_manager.c: 20: getCurrentState();
  3711  03A7  22A9               	fcall	_getCurrentState
  3712  03A8  0008               	return
  3713  03A9                     __end_of_initStateManager:	
  3714                           
  3715                           	psect	text18
  3716  02A9                     __ptext18:	
  3717 ;; *************** function _getCurrentState *****************
  3718 ;; Defined at:
  3719 ;;		line 23 in file "state_manager.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  r               1    0[BANK0 ] unsigned char 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  4  255[None  ] struct .
  3726 ;; Registers used:
  3727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMMON   BANK0   BANK1
  3733 ;;      Params:         0       0       0
  3734 ;;      Locals:         0       1       0
  3735 ;;      Temps:          2       0       0
  3736 ;;      Totals:         2       1       0
  3737 ;;Total ram usage:        3 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    3
  3740 ;; This function calls:
  3741 ;;		_HEF_ByteArrayRead
  3742 ;; This function is called by:
  3743 ;;		_initStateManager
  3744 ;;		_getFuzzState
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           
  3749                           ;psect for function _getCurrentState
  3750  02A9                     _getCurrentState:	
  3751                           
  3752                           ;state_manager.c: 24: if (!isInitialized) {
  3753                           
  3754                           ;incstack = 0
  3755                           ; Regs used in _getCurrentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3756  02A9  0020               	movlb	0	; select bank0
  3757  02AA  0830               	movf	_isInitialized,w
  3758  02AB  0431               	iorwf	_isInitialized+1,w
  3759  02AC  1D03               	btfss	3,2
  3760  02AD  0008               	return
  3761                           
  3762                           ;state_manager.c: 25: uint8_t r;
  3763                           ;state_manager.c: 28: r = HEF_ByteArrayRead((void *) &pedalState, 1, sizeof (pedalState)
      +                          );
  3764  02AE  01F4               	clrf	HEF_ByteArrayRead@block
  3765  02AF  0AF4               	incf	HEF_ByteArrayRead@block,f
  3766  02B0  3004               	movlw	4
  3767  02B1  00FB               	movwf	??_getCurrentState
  3768  02B2  087B               	movf	??_getCurrentState,w
  3769  02B3  00F5               	movwf	HEF_ByteArrayRead@count
  3770  02B4  3034               	movlw	(low (_pedalState| 0))& (0+255)
  3771  02B5  221E               	fcall	_HEF_ByteArrayRead
  3772  02B6  00FC               	movwf	??_getCurrentState+1
  3773  02B7  087C               	movf	??_getCurrentState+1,w
  3774  02B8  0020               	movlb	0	; select bank0
  3775  02B9  00C6               	movwf	getCurrentState@r
  3776                           
  3777                           ;state_manager.c: 30: if (pedalState.fuzz != 1) {
  3778  02BA  0334               	decf	_pedalState,w
  3779  02BB  0435               	iorwf	_pedalState+1,w
  3780  02BC  1903               	btfsc	3,2
  3781  02BD  2AC0               	goto	l1270
  3782                           
  3783                           ;state_manager.c: 31: pedalState.fuzz = 0;
  3784  02BE  01B4               	clrf	_pedalState
  3785  02BF  01B5               	clrf	_pedalState+1
  3786  02C0                     l1270:	
  3787                           
  3788                           ;state_manager.c: 32: }
  3789                           ;state_manager.c: 34: if (pedalState.boost != 1) {
  3790  02C0  0336               	decf	_pedalState+2,w
  3791  02C1  0437               	iorwf	_pedalState+3,w
  3792  02C2  1903               	btfsc	3,2
  3793  02C3  2AC6               	goto	l1274
  3794                           
  3795                           ;state_manager.c: 35: pedalState.boost = 0;
  3796  02C4  01B6               	clrf	_pedalState+2
  3797  02C5  01B7               	clrf	_pedalState+3
  3798  02C6                     l1274:	
  3799                           
  3800                           ;state_manager.c: 36: }
  3801                           ;state_manager.c: 37: isInitialized = 1;
  3802  02C6  3001               	movlw	1
  3803  02C7  00B0               	movwf	_isInitialized
  3804  02C8  3000               	movlw	0
  3805  02C9  00B1               	movwf	_isInitialized+1
  3806  02CA  0008               	return
  3807  02CB                     __end_of_getCurrentState:	
  3808                           ;state_manager.c: 38: }
  3809                           ;state_manager.c: 39: return pedalState;
  3810                           ;	Return value of _getCurrentState is never used
  3811                           
  3812                           
  3813                           	psect	text19
  3814  021E                     __ptext19:	
  3815 ;; *************** function _HEF_ByteArrayRead *****************
  3816 ;; Defined at:
  3817 ;;		line 53 in file "HEF.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  bArray          1    wreg     PTR unsigned char 
  3820 ;;		 -> pedalState(4), 
  3821 ;;  block           1    4[COMMON] unsigned char 
  3822 ;;  count           1    5[COMMON] unsigned char 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  bArray          1   10[COMMON] PTR unsigned char 
  3825 ;;		 -> pedalState(4), 
  3826 ;;  wordAdd         2    8[COMMON] unsigned int 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  1    wreg      char 
  3829 ;; Registers used:
  3830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMMON   BANK0   BANK1
  3836 ;;      Params:         2       0       0
  3837 ;;      Locals:         3       0       0
  3838 ;;      Temps:          2       0       0
  3839 ;;      Totals:         7       0       0
  3840 ;;Total ram usage:        7 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:    2
  3843 ;; This function calls:
  3844 ;;		_FLASH_ReadWord
  3845 ;; This function is called by:
  3846 ;;		_getCurrentState
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           
  3851                           ;psect for function _HEF_ByteArrayRead
  3852  021E                     _HEF_ByteArrayRead:	
  3853                           
  3854                           ;incstack = 0
  3855                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3856                           ;HEF_ByteArrayRead@bArray stored from wreg
  3857  021E  00FA               	movwf	HEF_ByteArrayRead@bArray
  3858                           
  3859                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
  3860  021F  0874               	movf	HEF_ByteArrayRead@block,w
  3861  0220  00F6               	movwf	??_HEF_ByteArrayRead
  3862  0221  01F7               	clrf	??_HEF_ByteArrayRead+1
  3863  0222  3005               	movlw	5
  3864  0223                     u635:	
  3865  0223  35F6               	lslf	??_HEF_ByteArrayRead,f
  3866  0224  0DF7               	rlf	??_HEF_ByteArrayRead+1,f
  3867  0225  0B89               	decfsz	9,f
  3868  0226  2A23               	goto	u635
  3869  0227  0876               	movf	??_HEF_ByteArrayRead,w
  3870  0228  3E80               	addlw	128
  3871  0229  00F8               	movwf	HEF_ByteArrayRead@wordAdd
  3872  022A  303F               	movlw	63
  3873  022B  3D77               	addwfc	??_HEF_ByteArrayRead+1,w
  3874  022C  00F9               	movwf	HEF_ByteArrayRead@wordAdd+1
  3875                           
  3876                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
  3877  022D  3021               	movlw	33
  3878  022E  0275               	subwf	HEF_ByteArrayRead@count,w
  3879  022F  1803               	skipnc
  3880  0230  2A35               	goto	l1244
  3881  0231  3004               	movlw	4
  3882  0232  0274               	subwf	HEF_ByteArrayRead@block,w
  3883  0233  1C03               	skipc
  3884  0234  2A4D               	goto	l1256
  3885  0235                     l1244:	
  3886                           
  3887                           ;HEF.c: 60: return -1;
  3888  0235  30FF               	movlw	255
  3889  0236  0008               	return
  3890  0237                     l1248:	
  3891                           ;HEF.c: 63: while ( count > 0)
  3892                           
  3893                           
  3894                           ;HEF.c: 64: {
  3895                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
  3896  0237  0879               	movf	HEF_ByteArrayRead@wordAdd+1,w
  3897  0238  00F2               	movwf	FLASH_ReadWord@flashAddr+1
  3898  0239  0878               	movf	HEF_ByteArrayRead@wordAdd,w
  3899  023A  00F1               	movwf	FLASH_ReadWord@flashAddr
  3900  023B  22E7               	fcall	_FLASH_ReadWord
  3901  023C  0871               	movf	?_FLASH_ReadWord,w
  3902  023D  00F6               	movwf	??_HEF_ByteArrayRead
  3903  023E  087A               	movf	HEF_ByteArrayRead@bArray,w
  3904  023F  0086               	movwf	6
  3905  0240  0187               	clrf	7
  3906  0241  0876               	movf	??_HEF_ByteArrayRead,w
  3907  0242  0081               	movwf	1
  3908  0243  3001               	movlw	1
  3909  0244  07F8               	addwf	HEF_ByteArrayRead@wordAdd,f
  3910  0245  3000               	movlw	0
  3911  0246  3DF9               	addwfc	HEF_ByteArrayRead@wordAdd+1,f
  3912  0247  3001               	movlw	1
  3913  0248  00F6               	movwf	??_HEF_ByteArrayRead
  3914  0249  0876               	movf	??_HEF_ByteArrayRead,w
  3915  024A  07FA               	addwf	HEF_ByteArrayRead@bArray,f
  3916                           
  3917                           ;HEF.c: 66: count--;
  3918  024B  3001               	movlw	1
  3919  024C  02F5               	subwf	HEF_ByteArrayRead@count,f
  3920  024D                     l1256:	
  3921  024D  0875               	movf	HEF_ByteArrayRead@count,w
  3922  024E  1D03               	btfss	3,2
  3923  024F  2A37               	goto	l1248
  3924                           
  3925                           ;HEF.c: 67: }
  3926                           ;HEF.c: 70: return 0;
  3927  0250  3000               	movlw	0
  3928  0251  0008               	return
  3929  0252                     __end_of_HEF_ByteArrayRead:	
  3930                           
  3931                           	psect	text20
  3932  02E7                     __ptext20:	
  3933 ;; *************** function _FLASH_ReadWord *****************
  3934 ;; Defined at:
  3935 ;;		line 58 in file "mcc_generated_files/memory.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  flashAddr       2    1[COMMON] unsigned int 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  2    1[COMMON] unsigned int 
  3942 ;; Registers used:
  3943 ;;		wreg, status,2, status,0
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1
  3949 ;;      Params:         2       0       0
  3950 ;;      Locals:         1       0       0
  3951 ;;      Temps:          0       0       0
  3952 ;;      Totals:         3       0       0
  3953 ;;Total ram usage:        3 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    1
  3956 ;; This function calls:
  3957 ;;		Nothing
  3958 ;; This function is called by:
  3959 ;;		_HEF_ByteArrayRead
  3960 ;;		_FLASH_WriteWord
  3961 ;;		_HEF_ByteRead
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           
  3966                           ;psect for function _FLASH_ReadWord
  3967  02E7                     _FLASH_ReadWord:	
  3968                           
  3969                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  3970                           
  3971                           ;incstack = 0
  3972                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3973  02E7  3000               	movlw	0
  3974  02E8  1B8B               	btfsc	11,7	;volatile
  3975  02E9  3001               	movlw	1
  3976  02EA  00F3               	movwf	FLASH_ReadWord@GIEBitValue
  3977                           
  3978                           ;memory.c: 61: INTCONbits.GIE = 0;
  3979  02EB  138B               	bcf	11,7	;volatile
  3980                           
  3981                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  3982  02EC  0871               	movf	FLASH_ReadWord@flashAddr,w
  3983  02ED  0023               	movlb	3	; select bank3
  3984  02EE  0091               	movwf	17	;volatile
  3985                           
  3986                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  3987  02EF  0872               	movf	FLASH_ReadWord@flashAddr+1,w
  3988  02F0  0092               	movwf	18	;volatile
  3989                           
  3990                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  3991  02F1  1315               	bcf	21,6	;volatile
  3992                           
  3993                           ;memory.c: 66: PMCON1bits.RD = 1;
  3994  02F2  1415               	bsf	21,0	;volatile
  3995                           
  3996                           ;memory.c: 67: __nop();
  3997  02F3  0000               	nop
  3998                           
  3999                           ;memory.c: 68: __nop();
  4000  02F4  0000               	nop
  4001                           
  4002                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  4003  02F5  0C73               	rrf	FLASH_ReadWord@GIEBitValue,w
  4004  02F6  1C03               	skipc
  4005  02F7  138B               	bcf	11,7	;volatile
  4006  02F8  1803               	skipnc
  4007  02F9  178B               	bsf	11,7	;volatile
  4008                           
  4009                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  4010  02FA  0023               	movlb	3	; select bank3
  4011  02FB  0814               	movf	20,w	;volatile
  4012  02FC  00F2               	movwf	?_FLASH_ReadWord+1
  4013  02FD  0813               	movf	19,w	;volatile
  4014  02FE  00F1               	movwf	?_FLASH_ReadWord
  4015  02FF  0008               	return
  4016  0300                     __end_of_FLASH_ReadWord:	
  4017                           
  4018                           	psect	text21
  4019  0300                     __ptext21:	
  4020 ;; *************** function _InitApp *****************
  4021 ;; Defined at:
  4022 ;;		line 27 in file "user.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;		None
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;		None
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0, pclath, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMMON   BANK0   BANK1
  4036 ;;      Params:         0       0       0
  4037 ;;      Locals:         0       0       0
  4038 ;;      Temps:          0       0       0
  4039 ;;      Totals:         0       0       0
  4040 ;;Total ram usage:        0 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    2
  4043 ;; This function calls:
  4044 ;;		_init_adc
  4045 ;; This function is called by:
  4046 ;;		_main
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           
  4051                           ;psect for function _InitApp
  4052  0300                     _InitApp:	
  4053                           
  4054                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  4055                           
  4056                           ;incstack = 0
  4057                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  4058  0300  0021               	movlb	1	; select bank1
  4059  0301  100C               	bcf	12,0	;volatile
  4060                           
  4061                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  4062  0302  108C               	bcf	12,1	;volatile
  4063                           
  4064                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  4065  0303  110C               	bcf	12,2	;volatile
  4066                           
  4067                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  4068  0304  160C               	bsf	12,4	;volatile
  4069                           
  4070                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  4071  0305  168C               	bsf	12,5	;volatile
  4072                           
  4073                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  4074  0306  0023               	movlb	3	; select bank3
  4075  0307  120C               	bcf	12,4	;volatile
  4076                           
  4077                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  4078  0308  0021               	movlb	1	; select bank1
  4079  0309  100E               	bcf	14,0	;volatile
  4080                           
  4081                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  4082  030A  108E               	bcf	14,1	;volatile
  4083                           
  4084                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  4085  030B  110E               	bcf	14,2	;volatile
  4086                           
  4087                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  4088  030C  118E               	bcf	14,3	;volatile
  4089                           
  4090                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  4091  030D  120E               	bcf	14,4	;volatile
  4092                           
  4093                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  4094  030E  128E               	bcf	14,5	;volatile
  4095                           
  4096                           ;user.c: 43: LATCbits.LATC5 = 0;
  4097  030F  0022               	movlb	2	; select bank2
  4098  0310  128E               	bcf	14,5	;volatile
  4099                           
  4100                           ;user.c: 45: LATAbits.LATA2 = 0;
  4101  0311  110C               	bcf	12,2	;volatile
  4102                           
  4103                           ;user.c: 46: LATCbits.LATC3 = 0;
  4104  0312  118E               	bcf	14,3	;volatile
  4105                           
  4106                           ;user.c: 48: init_adc();
  4107  0313  2387               	fcall	_init_adc
  4108  0314  0008               	return
  4109  0315                     __end_of_InitApp:	
  4110                           
  4111                           	psect	text22
  4112  0387                     __ptext22:	
  4113 ;; *************** function _init_adc *****************
  4114 ;; Defined at:
  4115 ;;		line 60 in file "user.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1
  4129 ;;      Params:         0       0       0
  4130 ;;      Locals:         0       0       0
  4131 ;;      Temps:          0       0       0
  4132 ;;      Totals:         0       0       0
  4133 ;;Total ram usage:        0 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    1
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_InitApp
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function _init_adc
  4145  0387                     _init_adc:	
  4146                           
  4147                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  4148                           
  4149                           ;incstack = 0
  4150                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  4151  0387  0021               	movlb	1	; select bank1
  4152  0388  179E               	bsf	30,7	;volatile
  4153                           
  4154                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  4155  0389  081E               	movf	30,w	;volatile
  4156  038A  398F               	andlw	-113
  4157  038B  3860               	iorlw	96
  4158  038C  009E               	movwf	30	;volatile
  4159                           
  4160                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  4161  038D  30FC               	movlw	-4
  4162  038E  059E               	andwf	30,f	;volatile
  4163                           
  4164                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  4165  038F  141D               	bsf	29,0	;volatile
  4166  0390  0008               	return
  4167  0391                     __end_of_init_adc:	
  4168                           
  4169                           	psect	text23
  4170  03A9                     __ptext23:	
  4171 ;; *************** function _ConfigureOscillator *****************
  4172 ;; Defined at:
  4173 ;;		line 17 in file "system.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;		None
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;		None
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  1    wreg      void 
  4180 ;; Registers used:
  4181 ;;		wreg, status,2, status,0
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMMON   BANK0   BANK1
  4187 ;;      Params:         0       0       0
  4188 ;;      Locals:         0       0       0
  4189 ;;      Temps:          0       0       0
  4190 ;;      Totals:         0       0       0
  4191 ;;Total ram usage:        0 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    1
  4194 ;; This function calls:
  4195 ;;		Nothing
  4196 ;; This function is called by:
  4197 ;;		_main
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _ConfigureOscillator
  4203  03A9                     _ConfigureOscillator:	
  4204                           
  4205                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  4206                           
  4207                           ;incstack = 0
  4208                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  4209  03A9  3078               	movlw	120
  4210  03AA  0021               	movlb	1	; select bank1
  4211  03AB  0499               	iorwf	25,f	;volatile
  4212                           
  4213                           ;system.c: 20: OSCSTAT = 0x00;
  4214  03AC  019A               	clrf	26	;volatile
  4215  03AD  0008               	return
  4216  03AE                     __end_of_ConfigureOscillator:	
  4217                           
  4218                           	psect	intentry
  4219  0004                     __pintentry:	
  4220 ;; *************** function _isr *****************
  4221 ;; Defined at:
  4222 ;;		line 23 in file "interrupts.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;		None
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;		None
  4227 ;; Return value:  Size  Location     Type
  4228 ;;                  1    wreg      void 
  4229 ;; Registers used:
  4230 ;;		None
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMMON   BANK0   BANK1
  4236 ;;      Params:         0       0       0
  4237 ;;      Locals:         0       0       0
  4238 ;;      Temps:          1       0       0
  4239 ;;      Totals:         1       0       0
  4240 ;;Total ram usage:        1 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; This function calls:
  4243 ;;		Nothing
  4244 ;; This function is called by:
  4245 ;;		Interrupt level 1
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249  0004                     _isr:	
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in _isr: []
  4253  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4254  0005  3180               	pagesel	$
  4255  0006  0020               	movlb	0	; select bank0
  4256  0007  087F               	movf	127,w
  4257  0008  00F0               	movwf	??_isr
  4258  0009  0870               	movf	??_isr,w
  4259  000A  00FF               	movwf	127
  4260  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4261  000C  0009               	retfie
  4262  000D                     __end_of_isr:	
  4263  007E                     btemp	set	126	;btemp
  4264  007E                     int$flags	set	126
  4265  007E                     wtemp	set	126
  4266  007E                     wtemp0	set	126
  4267  0080                     wtemp1	set	128
  4268  0082                     wtemp2	set	130
  4269  0084                     wtemp3	set	132
  4270  0086                     wtemp4	set	134
  4271  0088                     wtemp5	set	136
  4272  007F                     wtemp6	set	127
  4273  007E                     ttemp	set	126
  4274  007E                     ttemp0	set	126
  4275  0081                     ttemp1	set	129
  4276  0084                     ttemp2	set	132
  4277  0087                     ttemp3	set	135
  4278  007F                     ttemp4	set	127
  4279  007E                     ltemp	set	126
  4280  007E                     ltemp0	set	126
  4281  0082                     ltemp1	set	130
  4282  0086                     ltemp2	set	134
  4283  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        14
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     12      50
    BANK1            32      0       0

Pointer List with Targets:

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 


Critical Paths under _main in COMMON

    _updateFuzzState->_saveState
    _getFuzzState->_getCurrentState
    _wait_ms->___lmul
    _updateBoostState->_saveState
    _saveState->_HEF_ByteArrayWrite
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _initStateManager->_getCurrentState
    _getCurrentState->_HEF_ByteArrayRead
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateFuzz
    _updateFuzz->_setFuzzState
    _updateBoost->_setBoostState
    _initFuzz->_setFuzzState
    _setFuzzState->_updateFuzzState
    _updateFuzzState->_saveState
    _setFeedbackState->_wait_ms
    _getFuzzState->_getCurrentState
    _initBoost->_setBoostState
    _setBoostState->_updateBoostState
    _updateBoostState->_saveState
    _initStateManager->_getCurrentState

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9421
                _ConfigureOscillator
                            _InitApp
                          _initBoost
                           _initFuzz
                        _updateBoost
                         _updateFuzz
 ---------------------------------------------------------------------------------
 (1) _updateFuzz                                           5     3      2    2645
                                              7 BANK0      5     3      2
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (1) _updateBoost                                          4     2      2    1630
                                              7 BANK0      4     2      2
                      _setBoostState
 ---------------------------------------------------------------------------------
 (1) _initFuzz                                             2     2      0    3069
                                              7 BANK0      2     2      0
                       _getFuzzState
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (2) _setFuzzState                                         2     0      2    1564
                                              5 BANK0      2     0      2
                    _updateFuzzState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _updateFuzzState                                      2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     2     0      2     928
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _getFuzzState                                         2     0      2     554
                                              1 BANK0      2     0      2
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (1) _initBoost                                            2     2      0    2077
                                              7 BANK0      2     2      0
                      _getBoostState
                      _setBoostState
 ---------------------------------------------------------------------------------
 (2) _setBoostState                                        2     0      2    1500
                                              5 BANK0      2     0      2
                   _updateBoostState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     626
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateBoostState                                     2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (4) _saveState                                            4     4      0     527
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                 _HEF_ByteArrayWrite
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayWrite                                   9     7      2     526
                                              4 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     195
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getBoostState                                        2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0     554
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (3) _getCurrentState                                      3     3      0     554
                                             11 COMMON     2     2      0
                                              0 BANK0      1     1      0
                  _HEF_ByteArrayRead
 ---------------------------------------------------------------------------------
 (4) _HEF_ByteArrayRead                                    7     5      2     553
                                              4 COMMON     7     5      2
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     259
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initBoost
     _getBoostState
       _initStateManager
         _getCurrentState
           _HEF_ByteArrayRead
             _FLASH_ReadWord
     _setBoostState
       _updateBoostState
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _initFuzz
     _getFuzzState
       _getCurrentState
         _HEF_ByteArrayRead
           _FLASH_ReadWord
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _updateFuzzState
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateBoost
     _setBoostState
       _updateBoostState
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateFuzz
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _updateFuzzState
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C      32       6       62.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3F       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Aug 08 22:55:05 2016

                  __CFG_CP$OFF 0000              initFuzz@initState 004D                             l73 029A  
                  __CFG_LVP$ON 0000                            l241 016D                            l159 005A  
                          u605 0136                            u810 020C                            u635 0223  
                          u715 0265                            u725 026C                            u805 01F1  
                          u850 01D2                            u780 0198                            u845 01B7  
                          u775 017D                            u935 0064                            u965 0099  
                          u885 002D                            u895 003E                _getCurrentState 02A9  
                          _isr 0004                   __CFG_BORV$LO 0000                            wreg 0009  
                _boost_pressed 0026                           l1230 014A                           l1310 0369  
                         l1302 035C                           l1244 0235                           l1500 010B  
                         l1270 02C0                           l1342 019A                           l1422 0034  
                         l1248 0237                           l1256 024D                           l1192 0130  
                         l1274 02C6                           l1282 025A                           l1426 0045  
                         l1196 0132                           l1364 020E                           l1286 0264  
                         l1454 008B                           l1446 007C                           l1376 0381  
                         l1392 01D4                           l1456 008F                           l1490 00EC  
                         l1466 00AC                           l1580 0319                           l1486 00DB  
                         l1498 0107                           ?_isr 0070                           u1005 00D4  
                         u1015 00E5                           u1040 00FF                           u1050 0100  
                         u1065 0115                   __CFG_WRT$OFF 0000     __end_of_HEF_ByteArrayWrite 0176  
                         _main 0315                           fsr0h 0005                           fsr1h 0007  
                         fsr0l 0004                           indf0 0000                           indf1 0001  
                         fsr1l 0006                           btemp 007E                           ltemp 007E  
     __end_of_setFeedbackState 021E                           start 000D                           ttemp 007E  
                         wtemp 007E          __end_of_setBoostState 01EA                  __CFG_MCLRE$ON 0000  
              __end_of_InitApp 0315                          ??_isr 0070                          ?_main 0070  
                __CFG_WDTE$OFF 0000           updateFuzzState@state 0049                          _PMADR 0191  
      __end_of_updateFuzzState 0362            _ConfigureOscillator 03A9            ___lmul@multiplicand 0075  
     __end_of_updateBoostState 036F          updateBoostState@state 0049                 __CFG_BOREN$OFF 0000  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                __end_of_wait_ms 02A9                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003         HEF_ByteArrayRead@block 0074  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F         HEF_ByteArrayRead@count 0075           ?_ConfigureOscillator 0070  
              __initialization 000E                   __end_of_main 0326        __end_of_getCurrentState 02CB  
               __CFG_LPBOR$OFF 0000               _initStateManager 03A4                         ??_main 007D  
      __size_of_FLASH_ReadWord 0019             updateFuzz@fb_state 0050           __end_of_getFuzzState 0398  
               _feedback_state 003E              _HEF_ByteArrayRead 021E                         _ADRESH 009C  
                       _ADRESL 009B             ?_HEF_ByteArrayRead 0074                         _PMADRH 0192  
                       _PMADRL 0191                         _PMDATH 0194                         _PMDATL 0193  
                       _PMCON2 0196      __size_of_FLASH_EraseBlock 001C                 _debounce_limit 003C  
                    ??_InitApp 0071          ??_ConfigureOscillator 0071            ??_HEF_ByteArrayRead 0076  
               __CFG_PWRTE$OFF 0000                         ___lmul 0252                 __CFG_STVREN$ON 0000  
             __end_of_initFuzz 0337               __end_of_init_adc 0391        FLASH_ReadWord@flashAddr 0071  
    __end_of_HEF_ByteArrayRead 0252               ?_updateFuzzState 0049        HEF_ByteArrayRead@bArray 007A  
                    ??_wait_ms 007D          __end_of_getBoostState 0387        __end_of__initialization 001E  
    updateBoost@debounce_limit 004D                   ?_updateBoost 004D               getCurrentState@r 0046  
               __pcstackCOMMON 0070                   __pidataBANK0 0347               ?_getCurrentState 0070  
                   __pbssBANK0 0020             __size_of_initBoost 000C              ?_setFeedbackState 0048  
             _long_press_limit 0044                     __pmaintext 0315             ??_setFeedbackState 007D  
                ?_setFuzzState 004B                        ?___lmul 0071                     __pintentry 0004  
           _HEF_ByteArrayWrite 0123             __size_of_saveState 0010                 ___lmul@product 0079  
        __size_of_getFuzzState 0007       updateFuzz@debounce_limit 004D                 _FLASH_ReadWord 02E7  
          ?_HEF_ByteArrayWrite 0074     __size_of_HEF_ByteArrayRead 0034                        _OSCSTAT 009A  
                   _boost_down 0024              ?_updateBoostState 0049               _FLASH_EraseBlock 02CB  
     __end_of_initStateManager 03A9                      ?_initFuzz 0070                      ?_init_adc 0070  
           ??_updateBoostState 007D                        _InitApp 0300           ??_HEF_ByteArrayWrite 0076  
                 _getFuzzState 0391                 ??_setFuzzState 007D                     _pedalState 0034  
              __size_of___lmul 002F         __end_of_FLASH_ReadWord 0300                        __ptext1 0021  
                      __ptext2 00C8                        __ptext3 0326                        __ptext4 0176  
                      __ptext5 0355                        __ptext6 01EA                        __ptext7 0391  
                      __ptext8 036F                        __ptext9 01B0              __end_of_initBoost 037B  
                    _T2CONbits 001C                   __size_of_isr 0009                        _fuzz_up 0042  
       __size_of_setBoostState 003A                        _wait_ms 0281                        clrloop0 0399  
          setFuzzState@f_state 004B           end_of_initialization 001E              __end_of_saveState 0347  
                   ??_initFuzz 007D                        init_ram 039E                     ??_init_adc 0071  
                      initloop 039F                     _fuzz_state 0040           __size_of_updateBoost 005B  
                  wait_ms@time 0046      FLASH_ReadWord@GIEBitValue 0073                ?_FLASH_ReadWord 0071  
                    _PORTAbits 000C               __CFG_FOSC$INTOSC 0000                      _TRISAbits 008C  
                    _TRISCbits 008E                     _updateFuzz 0021       HEF_ByteArrayRead@wordAdd 0078  
      setFeedbackState@f_state 0048    __end_of_ConfigureOscillator 03AE        HEF_ByteArrayWrite@block 0079  
      HEF_ByteArrayWrite@count 0075                  _setBoostState 01B0                 __end_of___lmul 0281  
          start_initialization 000E                    __end_of_isr 000D           __end_of_setFuzzState 01B0  
     __size_of_updateFuzzState 000D                 ?_setBoostState 004B                       ??___lmul 0079  
                  __pdataBANK0 0038    FLASH_EraseBlock@GIEBitValue 0073       __end_of_FLASH_EraseBlock 02E7  
       __size_of_getBoostState 000C           setBoostState@f_state 004B      __size_of_setFeedbackState 0034  
                    ___latbits 0000                  __pcstackBANK0 0046       __size_of_getCurrentState 0022  
                  ?_updateFuzz 004D              ?_initStateManager 0070                       ?_InitApp 0070  
            __size_of_initFuzz 0011              __size_of_init_adc 000A             ??_initStateManager 007D  
           initBoost@initState 004D      __size_of_updateBoostState 000D    HEF_ByteArrayWrite@blockAddr 007A  
                   saveState@r 007C                      _initBoost 036F                       ?_wait_ms 0046  
  HEF_ByteArrayWrite@byteArray 0074                  _getBoostState 037B                       _LATAbits 010C  
              ??_setBoostState 007D                       _LATCbits 010E                      clear_ram0 0398  
                    _saveState 0337    __size_of_HEF_ByteArrayWrite 0053                      _fuzz_down 0028  
                     _PIR1bits 0011      FLASH_EraseBlock@startAddr 0071              ??_updateFuzzState 007D  
             ??_FLASH_ReadWord 0073            __size_of_updateFuzz 00A7                     _ADCON0bits 009D  
                   _ADCON1bits 009E          __size_of_setFuzzState 003A                    _boost_state 0038  
                   ?_initBoost 0070              ___lmul@multiplier 0071                 ?_getBoostState 0047  
            ??_getCurrentState 007B                     ?_saveState 0070                  ??_updateBoost 004F  
             __size_of_InitApp 0015                   _setFuzzState 0176                     _ANSELAbits 018C  
             _setFeedbackState 01EA                       __ptext10 0281                       __ptext11 0252  
                     __ptext20 02E7                       __ptext12 0362                       __ptext21 0300  
                     __ptext13 0337                       __ptext22 0387                       __ptext14 0123  
                     __ptext23 03A9                       __ptext15 02CB                       __ptext16 037B  
                     __ptext17 03A4                       __ptext18 02A9                       __ptext19 021E  
             __size_of_wait_ms 0028                       _boost_up 003A                   _fuzz_pressed 002A  
                     _initFuzz 0326                       _init_adc 0387                  __size_of_main 0011  
 __size_of_ConfigureOscillator 0005                       int$flags 007E               _updateBoostState 0362  
              _fuzz_turning_on 002E            __end_of_updateBoost 0123               _last_boost_state 0032  
            ?_FLASH_EraseBlock 0071             ??_FLASH_EraseBlock 0073                     _INTCONbits 000B  
                 ??_updateFuzz 004F                    ??_initBoost 007D                ??_getBoostState 007D  
                     intlevel1 0000                     _PMCON1bits 0195  HEF_ByteArrayWrite@GIEBitValue 0078  
            __CFG_CLKOUTEN$OFF 0000                    ??_saveState 0046                    _fuzz_toggle 002C  
                   _OSCCONbits 0099                  ?_getFuzzState 0047             __end_of_updateFuzz 00C8  
                _isInitialized 0030                   wait_ms@timel 0020      __size_of_initStateManager 0005  
              _updateFuzzState 0355                 ??_getFuzzState 007D                    _updateBoost 00C8  
