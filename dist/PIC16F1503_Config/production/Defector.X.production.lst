

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Aug 02 23:43:11 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000E                     	;# 
    41  0011                     	;# 
    42  0012                     	;# 
    43  0013                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0016                     	;# 
    47  0017                     	;# 
    48  0018                     	;# 
    49  0019                     	;# 
    50  001A                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  008C                     	;# 
    54  008E                     	;# 
    55  0091                     	;# 
    56  0092                     	;# 
    57  0093                     	;# 
    58  0095                     	;# 
    59  0096                     	;# 
    60  0097                     	;# 
    61  0099                     	;# 
    62  009A                     	;# 
    63  009B                     	;# 
    64  009B                     	;# 
    65  009C                     	;# 
    66  009D                     	;# 
    67  009E                     	;# 
    68  009F                     	;# 
    69  010C                     	;# 
    70  010E                     	;# 
    71  0111                     	;# 
    72  0112                     	;# 
    73  0113                     	;# 
    74  0114                     	;# 
    75  0115                     	;# 
    76  0116                     	;# 
    77  0117                     	;# 
    78  0118                     	;# 
    79  0119                     	;# 
    80  011D                     	;# 
    81  018C                     	;# 
    82  018E                     	;# 
    83  0191                     	;# 
    84  0191                     	;# 
    85  0192                     	;# 
    86  0193                     	;# 
    87  0193                     	;# 
    88  0194                     	;# 
    89  0195                     	;# 
    90  0196                     	;# 
    91  0197                     	;# 
    92  020C                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0391                     	;# 
   109  0392                     	;# 
   110  0393                     	;# 
   111  0498                     	;# 
   112  0498                     	;# 
   113  0499                     	;# 
   114  049A                     	;# 
   115  049B                     	;# 
   116  049B                     	;# 
   117  049C                     	;# 
   118  049D                     	;# 
   119  049E                     	;# 
   120  049F                     	;# 
   121  0611                     	;# 
   122  0612                     	;# 
   123  0613                     	;# 
   124  0613                     	;# 
   125  0614                     	;# 
   126  0615                     	;# 
   127  0616                     	;# 
   128  0616                     	;# 
   129  0617                     	;# 
   130  0618                     	;# 
   131  0619                     	;# 
   132  0619                     	;# 
   133  061A                     	;# 
   134  061B                     	;# 
   135  061C                     	;# 
   136  061C                     	;# 
   137  0691                     	;# 
   138  0692                     	;# 
   139  0693                     	;# 
   140  0694                     	;# 
   141  0695                     	;# 
   142  0F0F                     	;# 
   143  0F10                     	;# 
   144  0F11                     	;# 
   145  0F12                     	;# 
   146  0F13                     	;# 
   147  0F14                     	;# 
   148  0F15                     	;# 
   149  0F16                     	;# 
   150  0F17                     	;# 
   151  0F18                     	;# 
   152  0F19                     	;# 
   153  0F1A                     	;# 
   154  0F1B                     	;# 
   155  0F1C                     	;# 
   156  0F1D                     	;# 
   157  0F1E                     	;# 
   158  0F1F                     	;# 
   159  0FE3                     	;# 
   160  0FE4                     	;# 
   161  0FE5                     	;# 
   162  0FE6                     	;# 
   163  0FE7                     	;# 
   164  0FE8                     	;# 
   165  0FE9                     	;# 
   166  0FEA                     	;# 
   167  0FEB                     	;# 
   168  0FED                     	;# 
   169  0FEE                     	;# 
   170  0FEF                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000E                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  008C                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010E                     	;# 
   215  0111                     	;# 
   216  0112                     	;# 
   217  0113                     	;# 
   218  0114                     	;# 
   219  0115                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0118                     	;# 
   223  0119                     	;# 
   224  011D                     	;# 
   225  018C                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0197                     	;# 
   236  020C                     	;# 
   237  0211                     	;# 
   238  0211                     	;# 
   239  0212                     	;# 
   240  0212                     	;# 
   241  0213                     	;# 
   242  0213                     	;# 
   243  0214                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0498                     	;# 
   256  0498                     	;# 
   257  0499                     	;# 
   258  049A                     	;# 
   259  049B                     	;# 
   260  049B                     	;# 
   261  049C                     	;# 
   262  049D                     	;# 
   263  049E                     	;# 
   264  049F                     	;# 
   265  0611                     	;# 
   266  0612                     	;# 
   267  0613                     	;# 
   268  0613                     	;# 
   269  0614                     	;# 
   270  0615                     	;# 
   271  0616                     	;# 
   272  0616                     	;# 
   273  0617                     	;# 
   274  0618                     	;# 
   275  0619                     	;# 
   276  0619                     	;# 
   277  061A                     	;# 
   278  061B                     	;# 
   279  061C                     	;# 
   280  061C                     	;# 
   281  0691                     	;# 
   282  0692                     	;# 
   283  0693                     	;# 
   284  0694                     	;# 
   285  0695                     	;# 
   286  0F0F                     	;# 
   287  0F10                     	;# 
   288  0F11                     	;# 
   289  0F12                     	;# 
   290  0F13                     	;# 
   291  0F14                     	;# 
   292  0F15                     	;# 
   293  0F16                     	;# 
   294  0F17                     	;# 
   295  0F18                     	;# 
   296  0F19                     	;# 
   297  0F1A                     	;# 
   298  0F1B                     	;# 
   299  0F1C                     	;# 
   300  0F1D                     	;# 
   301  0F1E                     	;# 
   302  0F1F                     	;# 
   303  0FE3                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000E                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  008C                     	;# 
   342  008E                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0099                     	;# 
   350  009A                     	;# 
   351  009B                     	;# 
   352  009B                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  009F                     	;# 
   357  010C                     	;# 
   358  010E                     	;# 
   359  0111                     	;# 
   360  0112                     	;# 
   361  0113                     	;# 
   362  0114                     	;# 
   363  0115                     	;# 
   364  0116                     	;# 
   365  0117                     	;# 
   366  0118                     	;# 
   367  0119                     	;# 
   368  011D                     	;# 
   369  018C                     	;# 
   370  018E                     	;# 
   371  0191                     	;# 
   372  0191                     	;# 
   373  0192                     	;# 
   374  0193                     	;# 
   375  0193                     	;# 
   376  0194                     	;# 
   377  0195                     	;# 
   378  0196                     	;# 
   379  0197                     	;# 
   380  020C                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0216                     	;# 
   393  0216                     	;# 
   394  0217                     	;# 
   395  0217                     	;# 
   396  0391                     	;# 
   397  0392                     	;# 
   398  0393                     	;# 
   399  0498                     	;# 
   400  0498                     	;# 
   401  0499                     	;# 
   402  049A                     	;# 
   403  049B                     	;# 
   404  049B                     	;# 
   405  049C                     	;# 
   406  049D                     	;# 
   407  049E                     	;# 
   408  049F                     	;# 
   409  0611                     	;# 
   410  0612                     	;# 
   411  0613                     	;# 
   412  0613                     	;# 
   413  0614                     	;# 
   414  0615                     	;# 
   415  0616                     	;# 
   416  0616                     	;# 
   417  0617                     	;# 
   418  0618                     	;# 
   419  0619                     	;# 
   420  0619                     	;# 
   421  061A                     	;# 
   422  061B                     	;# 
   423  061C                     	;# 
   424  061C                     	;# 
   425  0691                     	;# 
   426  0692                     	;# 
   427  0693                     	;# 
   428  0694                     	;# 
   429  0695                     	;# 
   430  0F0F                     	;# 
   431  0F10                     	;# 
   432  0F11                     	;# 
   433  0F12                     	;# 
   434  0F13                     	;# 
   435  0F14                     	;# 
   436  0F15                     	;# 
   437  0F16                     	;# 
   438  0F17                     	;# 
   439  0F18                     	;# 
   440  0F19                     	;# 
   441  0F1A                     	;# 
   442  0F1B                     	;# 
   443  0F1C                     	;# 
   444  0F1D                     	;# 
   445  0F1E                     	;# 
   446  0F1F                     	;# 
   447  0FE3                     	;# 
   448  0FE4                     	;# 
   449  0FE5                     	;# 
   450  0FE6                     	;# 
   451  0FE7                     	;# 
   452  0FE8                     	;# 
   453  0FE9                     	;# 
   454  0FEA                     	;# 
   455  0FEB                     	;# 
   456  0FED                     	;# 
   457  0FEE                     	;# 
   458  0FEF                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0008                     	;# 
   468  0009                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000E                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0015                     	;# 
   477  0016                     	;# 
   478  0016                     	;# 
   479  0017                     	;# 
   480  0018                     	;# 
   481  0019                     	;# 
   482  001A                     	;# 
   483  001B                     	;# 
   484  001C                     	;# 
   485  008C                     	;# 
   486  008E                     	;# 
   487  0091                     	;# 
   488  0092                     	;# 
   489  0093                     	;# 
   490  0095                     	;# 
   491  0096                     	;# 
   492  0097                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009B                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  009F                     	;# 
   501  010C                     	;# 
   502  010E                     	;# 
   503  0111                     	;# 
   504  0112                     	;# 
   505  0113                     	;# 
   506  0114                     	;# 
   507  0115                     	;# 
   508  0116                     	;# 
   509  0117                     	;# 
   510  0118                     	;# 
   511  0119                     	;# 
   512  011D                     	;# 
   513  018C                     	;# 
   514  018E                     	;# 
   515  0191                     	;# 
   516  0191                     	;# 
   517  0192                     	;# 
   518  0193                     	;# 
   519  0193                     	;# 
   520  0194                     	;# 
   521  0195                     	;# 
   522  0196                     	;# 
   523  0197                     	;# 
   524  020C                     	;# 
   525  0211                     	;# 
   526  0211                     	;# 
   527  0212                     	;# 
   528  0212                     	;# 
   529  0213                     	;# 
   530  0213                     	;# 
   531  0214                     	;# 
   532  0214                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0216                     	;# 
   537  0216                     	;# 
   538  0217                     	;# 
   539  0217                     	;# 
   540  0391                     	;# 
   541  0392                     	;# 
   542  0393                     	;# 
   543  0498                     	;# 
   544  0498                     	;# 
   545  0499                     	;# 
   546  049A                     	;# 
   547  049B                     	;# 
   548  049B                     	;# 
   549  049C                     	;# 
   550  049D                     	;# 
   551  049E                     	;# 
   552  049F                     	;# 
   553  0611                     	;# 
   554  0612                     	;# 
   555  0613                     	;# 
   556  0613                     	;# 
   557  0614                     	;# 
   558  0615                     	;# 
   559  0616                     	;# 
   560  0616                     	;# 
   561  0617                     	;# 
   562  0618                     	;# 
   563  0619                     	;# 
   564  0619                     	;# 
   565  061A                     	;# 
   566  061B                     	;# 
   567  061C                     	;# 
   568  061C                     	;# 
   569  0691                     	;# 
   570  0692                     	;# 
   571  0693                     	;# 
   572  0694                     	;# 
   573  0695                     	;# 
   574  0F0F                     	;# 
   575  0F10                     	;# 
   576  0F11                     	;# 
   577  0F12                     	;# 
   578  0F13                     	;# 
   579  0F14                     	;# 
   580  0F15                     	;# 
   581  0F16                     	;# 
   582  0F17                     	;# 
   583  0F18                     	;# 
   584  0F19                     	;# 
   585  0F1A                     	;# 
   586  0F1B                     	;# 
   587  0F1C                     	;# 
   588  0F1D                     	;# 
   589  0F1E                     	;# 
   590  0F1F                     	;# 
   591  0FE3                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000E                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0013                     	;# 
   620  0015                     	;# 
   621  0016                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001C                     	;# 
   629  008C                     	;# 
   630  008E                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0093                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  009F                     	;# 
   645  010C                     	;# 
   646  010E                     	;# 
   647  0111                     	;# 
   648  0112                     	;# 
   649  0113                     	;# 
   650  0114                     	;# 
   651  0115                     	;# 
   652  0116                     	;# 
   653  0117                     	;# 
   654  0118                     	;# 
   655  0119                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018E                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0197                     	;# 
   668  020C                     	;# 
   669  0211                     	;# 
   670  0211                     	;# 
   671  0212                     	;# 
   672  0212                     	;# 
   673  0213                     	;# 
   674  0213                     	;# 
   675  0214                     	;# 
   676  0214                     	;# 
   677  0215                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0216                     	;# 
   681  0216                     	;# 
   682  0217                     	;# 
   683  0217                     	;# 
   684  0391                     	;# 
   685  0392                     	;# 
   686  0393                     	;# 
   687  0498                     	;# 
   688  0498                     	;# 
   689  0499                     	;# 
   690  049A                     	;# 
   691  049B                     	;# 
   692  049B                     	;# 
   693  049C                     	;# 
   694  049D                     	;# 
   695  049E                     	;# 
   696  049F                     	;# 
   697  0611                     	;# 
   698  0612                     	;# 
   699  0613                     	;# 
   700  0613                     	;# 
   701  0614                     	;# 
   702  0615                     	;# 
   703  0616                     	;# 
   704  0616                     	;# 
   705  0617                     	;# 
   706  0618                     	;# 
   707  0619                     	;# 
   708  0619                     	;# 
   709  061A                     	;# 
   710  061B                     	;# 
   711  061C                     	;# 
   712  061C                     	;# 
   713  0691                     	;# 
   714  0692                     	;# 
   715  0693                     	;# 
   716  0694                     	;# 
   717  0695                     	;# 
   718  0F0F                     	;# 
   719  0F10                     	;# 
   720  0F11                     	;# 
   721  0F12                     	;# 
   722  0F13                     	;# 
   723  0F14                     	;# 
   724  0F15                     	;# 
   725  0F16                     	;# 
   726  0F17                     	;# 
   727  0F18                     	;# 
   728  0F19                     	;# 
   729  0F1A                     	;# 
   730  0F1B                     	;# 
   731  0F1C                     	;# 
   732  0F1D                     	;# 
   733  0F1E                     	;# 
   734  0F1F                     	;# 
   735  0FE3                     	;# 
   736  0FE4                     	;# 
   737  0FE5                     	;# 
   738  0FE6                     	;# 
   739  0FE7                     	;# 
   740  0FE8                     	;# 
   741  0FE9                     	;# 
   742  0FEA                     	;# 
   743  0FEB                     	;# 
   744  0FED                     	;# 
   745  0FEE                     	;# 
   746  0FEF                     	;# 
   747  0000                     	;# 
   748  0001                     	;# 
   749  0002                     	;# 
   750  0003                     	;# 
   751  0004                     	;# 
   752  0005                     	;# 
   753  0006                     	;# 
   754  0007                     	;# 
   755  0008                     	;# 
   756  0009                     	;# 
   757  000A                     	;# 
   758  000B                     	;# 
   759  000C                     	;# 
   760  000E                     	;# 
   761  0011                     	;# 
   762  0012                     	;# 
   763  0013                     	;# 
   764  0015                     	;# 
   765  0016                     	;# 
   766  0016                     	;# 
   767  0017                     	;# 
   768  0018                     	;# 
   769  0019                     	;# 
   770  001A                     	;# 
   771  001B                     	;# 
   772  001C                     	;# 
   773  008C                     	;# 
   774  008E                     	;# 
   775  0091                     	;# 
   776  0092                     	;# 
   777  0093                     	;# 
   778  0095                     	;# 
   779  0096                     	;# 
   780  0097                     	;# 
   781  0099                     	;# 
   782  009A                     	;# 
   783  009B                     	;# 
   784  009B                     	;# 
   785  009C                     	;# 
   786  009D                     	;# 
   787  009E                     	;# 
   788  009F                     	;# 
   789  010C                     	;# 
   790  010E                     	;# 
   791  0111                     	;# 
   792  0112                     	;# 
   793  0113                     	;# 
   794  0114                     	;# 
   795  0115                     	;# 
   796  0116                     	;# 
   797  0117                     	;# 
   798  0118                     	;# 
   799  0119                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  018E                     	;# 
   803  0191                     	;# 
   804  0191                     	;# 
   805  0192                     	;# 
   806  0193                     	;# 
   807  0193                     	;# 
   808  0194                     	;# 
   809  0195                     	;# 
   810  0196                     	;# 
   811  0197                     	;# 
   812  020C                     	;# 
   813  0211                     	;# 
   814  0211                     	;# 
   815  0212                     	;# 
   816  0212                     	;# 
   817  0213                     	;# 
   818  0213                     	;# 
   819  0214                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0216                     	;# 
   825  0216                     	;# 
   826  0217                     	;# 
   827  0217                     	;# 
   828  0391                     	;# 
   829  0392                     	;# 
   830  0393                     	;# 
   831  0498                     	;# 
   832  0498                     	;# 
   833  0499                     	;# 
   834  049A                     	;# 
   835  049B                     	;# 
   836  049B                     	;# 
   837  049C                     	;# 
   838  049D                     	;# 
   839  049E                     	;# 
   840  049F                     	;# 
   841  0611                     	;# 
   842  0612                     	;# 
   843  0613                     	;# 
   844  0613                     	;# 
   845  0614                     	;# 
   846  0615                     	;# 
   847  0616                     	;# 
   848  0616                     	;# 
   849  0617                     	;# 
   850  0618                     	;# 
   851  0619                     	;# 
   852  0619                     	;# 
   853  061A                     	;# 
   854  061B                     	;# 
   855  061C                     	;# 
   856  061C                     	;# 
   857  0691                     	;# 
   858  0692                     	;# 
   859  0693                     	;# 
   860  0694                     	;# 
   861  0695                     	;# 
   862  0F0F                     	;# 
   863  0F10                     	;# 
   864  0F11                     	;# 
   865  0F12                     	;# 
   866  0F13                     	;# 
   867  0F14                     	;# 
   868  0F15                     	;# 
   869  0F16                     	;# 
   870  0F17                     	;# 
   871  0F18                     	;# 
   872  0F19                     	;# 
   873  0F1A                     	;# 
   874  0F1B                     	;# 
   875  0F1C                     	;# 
   876  0F1D                     	;# 
   877  0F1E                     	;# 
   878  0F1F                     	;# 
   879  0FE3                     	;# 
   880  0FE4                     	;# 
   881  0FE5                     	;# 
   882  0FE6                     	;# 
   883  0FE7                     	;# 
   884  0FE8                     	;# 
   885  0FE9                     	;# 
   886  0FEA                     	;# 
   887  0FEB                     	;# 
   888  0FED                     	;# 
   889  0FEE                     	;# 
   890  0FEF                     	;# 
   891  0000                     	;# 
   892  0001                     	;# 
   893  0002                     	;# 
   894  0003                     	;# 
   895  0004                     	;# 
   896  0005                     	;# 
   897  0006                     	;# 
   898  0007                     	;# 
   899  0008                     	;# 
   900  0009                     	;# 
   901  000A                     	;# 
   902  000B                     	;# 
   903  000C                     	;# 
   904  000E                     	;# 
   905  0011                     	;# 
   906  0012                     	;# 
   907  0013                     	;# 
   908  0015                     	;# 
   909  0016                     	;# 
   910  0016                     	;# 
   911  0017                     	;# 
   912  0018                     	;# 
   913  0019                     	;# 
   914  001A                     	;# 
   915  001B                     	;# 
   916  001C                     	;# 
   917  008C                     	;# 
   918  008E                     	;# 
   919  0091                     	;# 
   920  0092                     	;# 
   921  0093                     	;# 
   922  0095                     	;# 
   923  0096                     	;# 
   924  0097                     	;# 
   925  0099                     	;# 
   926  009A                     	;# 
   927  009B                     	;# 
   928  009B                     	;# 
   929  009C                     	;# 
   930  009D                     	;# 
   931  009E                     	;# 
   932  009F                     	;# 
   933  010C                     	;# 
   934  010E                     	;# 
   935  0111                     	;# 
   936  0112                     	;# 
   937  0113                     	;# 
   938  0114                     	;# 
   939  0115                     	;# 
   940  0116                     	;# 
   941  0117                     	;# 
   942  0118                     	;# 
   943  0119                     	;# 
   944  011D                     	;# 
   945  018C                     	;# 
   946  018E                     	;# 
   947  0191                     	;# 
   948  0191                     	;# 
   949  0192                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0194                     	;# 
   953  0195                     	;# 
   954  0196                     	;# 
   955  0197                     	;# 
   956  020C                     	;# 
   957  0211                     	;# 
   958  0211                     	;# 
   959  0212                     	;# 
   960  0212                     	;# 
   961  0213                     	;# 
   962  0213                     	;# 
   963  0214                     	;# 
   964  0214                     	;# 
   965  0215                     	;# 
   966  0215                     	;# 
   967  0215                     	;# 
   968  0216                     	;# 
   969  0216                     	;# 
   970  0217                     	;# 
   971  0217                     	;# 
   972  0391                     	;# 
   973  0392                     	;# 
   974  0393                     	;# 
   975  0498                     	;# 
   976  0498                     	;# 
   977  0499                     	;# 
   978  049A                     	;# 
   979  049B                     	;# 
   980  049B                     	;# 
   981  049C                     	;# 
   982  049D                     	;# 
   983  049E                     	;# 
   984  049F                     	;# 
   985  0611                     	;# 
   986  0612                     	;# 
   987  0613                     	;# 
   988  0613                     	;# 
   989  0614                     	;# 
   990  0615                     	;# 
   991  0616                     	;# 
   992  0616                     	;# 
   993  0617                     	;# 
   994  0618                     	;# 
   995  0619                     	;# 
   996  0619                     	;# 
   997  061A                     	;# 
   998  061B                     	;# 
   999  061C                     	;# 
  1000  061C                     	;# 
  1001  0691                     	;# 
  1002  0692                     	;# 
  1003  0693                     	;# 
  1004  0694                     	;# 
  1005  0695                     	;# 
  1006  0F0F                     	;# 
  1007  0F10                     	;# 
  1008  0F11                     	;# 
  1009  0F12                     	;# 
  1010  0F13                     	;# 
  1011  0F14                     	;# 
  1012  0F15                     	;# 
  1013  0F16                     	;# 
  1014  0F17                     	;# 
  1015  0F18                     	;# 
  1016  0F19                     	;# 
  1017  0F1A                     	;# 
  1018  0F1B                     	;# 
  1019  0F1C                     	;# 
  1020  0F1D                     	;# 
  1021  0F1E                     	;# 
  1022  0F1F                     	;# 
  1023  0FE3                     	;# 
  1024  0FE4                     	;# 
  1025  0FE5                     	;# 
  1026  0FE6                     	;# 
  1027  0FE7                     	;# 
  1028  0FE8                     	;# 
  1029  0FE9                     	;# 
  1030  0FEA                     	;# 
  1031  0FEB                     	;# 
  1032  0FED                     	;# 
  1033  0FEE                     	;# 
  1034  0FEF                     	;# 
  1035  0000                     	;# 
  1036  0001                     	;# 
  1037  0002                     	;# 
  1038  0003                     	;# 
  1039  0004                     	;# 
  1040  0005                     	;# 
  1041  0006                     	;# 
  1042  0007                     	;# 
  1043  0008                     	;# 
  1044  0009                     	;# 
  1045  000A                     	;# 
  1046  000B                     	;# 
  1047  000C                     	;# 
  1048  000E                     	;# 
  1049  0011                     	;# 
  1050  0012                     	;# 
  1051  0013                     	;# 
  1052  0015                     	;# 
  1053  0016                     	;# 
  1054  0016                     	;# 
  1055  0017                     	;# 
  1056  0018                     	;# 
  1057  0019                     	;# 
  1058  001A                     	;# 
  1059  001B                     	;# 
  1060  001C                     	;# 
  1061  008C                     	;# 
  1062  008E                     	;# 
  1063  0091                     	;# 
  1064  0092                     	;# 
  1065  0093                     	;# 
  1066  0095                     	;# 
  1067  0096                     	;# 
  1068  0097                     	;# 
  1069  0099                     	;# 
  1070  009A                     	;# 
  1071  009B                     	;# 
  1072  009B                     	;# 
  1073  009C                     	;# 
  1074  009D                     	;# 
  1075  009E                     	;# 
  1076  009F                     	;# 
  1077  010C                     	;# 
  1078  010E                     	;# 
  1079  0111                     	;# 
  1080  0112                     	;# 
  1081  0113                     	;# 
  1082  0114                     	;# 
  1083  0115                     	;# 
  1084  0116                     	;# 
  1085  0117                     	;# 
  1086  0118                     	;# 
  1087  0119                     	;# 
  1088  011D                     	;# 
  1089  018C                     	;# 
  1090  018E                     	;# 
  1091  0191                     	;# 
  1092  0191                     	;# 
  1093  0192                     	;# 
  1094  0193                     	;# 
  1095  0193                     	;# 
  1096  0194                     	;# 
  1097  0195                     	;# 
  1098  0196                     	;# 
  1099  0197                     	;# 
  1100  020C                     	;# 
  1101  0211                     	;# 
  1102  0211                     	;# 
  1103  0212                     	;# 
  1104  0212                     	;# 
  1105  0213                     	;# 
  1106  0213                     	;# 
  1107  0214                     	;# 
  1108  0214                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0216                     	;# 
  1113  0216                     	;# 
  1114  0217                     	;# 
  1115  0217                     	;# 
  1116  0391                     	;# 
  1117  0392                     	;# 
  1118  0393                     	;# 
  1119  0498                     	;# 
  1120  0498                     	;# 
  1121  0499                     	;# 
  1122  049A                     	;# 
  1123  049B                     	;# 
  1124  049B                     	;# 
  1125  049C                     	;# 
  1126  049D                     	;# 
  1127  049E                     	;# 
  1128  049F                     	;# 
  1129  0611                     	;# 
  1130  0612                     	;# 
  1131  0613                     	;# 
  1132  0613                     	;# 
  1133  0614                     	;# 
  1134  0615                     	;# 
  1135  0616                     	;# 
  1136  0616                     	;# 
  1137  0617                     	;# 
  1138  0618                     	;# 
  1139  0619                     	;# 
  1140  0619                     	;# 
  1141  061A                     	;# 
  1142  061B                     	;# 
  1143  061C                     	;# 
  1144  061C                     	;# 
  1145  0691                     	;# 
  1146  0692                     	;# 
  1147  0693                     	;# 
  1148  0694                     	;# 
  1149  0695                     	;# 
  1150  0F0F                     	;# 
  1151  0F10                     	;# 
  1152  0F11                     	;# 
  1153  0F12                     	;# 
  1154  0F13                     	;# 
  1155  0F14                     	;# 
  1156  0F15                     	;# 
  1157  0F16                     	;# 
  1158  0F17                     	;# 
  1159  0F18                     	;# 
  1160  0F19                     	;# 
  1161  0F1A                     	;# 
  1162  0F1B                     	;# 
  1163  0F1C                     	;# 
  1164  0F1D                     	;# 
  1165  0F1E                     	;# 
  1166  0F1F                     	;# 
  1167  0FE3                     	;# 
  1168  0FE4                     	;# 
  1169  0FE5                     	;# 
  1170  0FE6                     	;# 
  1171  0FE7                     	;# 
  1172  0FE8                     	;# 
  1173  0FE9                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEF                     	;# 
  1179                           
  1180                           	psect	idataBANK0
  1181  024D                     __pidataBANK0:	
  1182                           
  1183                           ;initializer for _boost_up
  1184  024D  3401               	retlw	1
  1185  024E  3400               	retlw	0
  1186                           
  1187                           ;initializer for _debounce_limit
  1188  024F  3419               	retlw	25
  1189  0250  3400               	retlw	0
  1190                           
  1191                           ;initializer for _fuzz_up
  1192  0251  3401               	retlw	1
  1193  0252  3400               	retlw	0
  1194                           
  1195                           ;initializer for _long_press_limit
  1196  0253  3400               	retlw	0
  1197  0254  342D               	retlw	45
  1198  000B                     _INTCONbits	set	11
  1199  0011                     _PIR1bits	set	17
  1200  000C                     _PORTAbits	set	12
  1201  001C                     _T2CONbits	set	28
  1202  009D                     _ADCON0bits	set	157
  1203  009E                     _ADCON1bits	set	158
  1204  009C                     _ADRESH	set	156
  1205  009B                     _ADRESL	set	155
  1206  0099                     _OSCCONbits	set	153
  1207  009A                     _OSCSTAT	set	154
  1208  008C                     _TRISAbits	set	140
  1209  008E                     _TRISCbits	set	142
  1210  010C                     _LATAbits	set	268
  1211  010E                     _LATCbits	set	270
  1212  018C                     _ANSELAbits	set	396
  1213  0192                     _PMADRH	set	402
  1214  0191                     _PMADRL	set	401
  1215  0195                     _PMCON1bits	set	405
  1216  0196                     _PMCON2	set	406
  1217  0194                     _PMDATH	set	404
  1218  0193                     _PMDATL	set	403
  1219                           
  1220                           ; #config settings
  1221  0000                     
  1222                           	psect	cinit
  1223  000E                     start_initialization:	
  1224  000E                     __initialization:	
  1225                           
  1226                           ; Clear objects allocated to BANK0
  1227  000E  3020               	movlw	low __pbssBANK0
  1228  000F  0084               	movwf	4
  1229  0010  3000               	movlw	high __pbssBANK0
  1230  0011  0085               	movwf	5
  1231  0012  3018               	movlw	24
  1232  0013  2255               	fcall	clear_ram0
  1233                           
  1234                           ; Initialize objects allocated to BANK0
  1235  0014  304D               	movlw	low __pidataBANK0
  1236  0015  0084               	movwf	4
  1237  0016  3082               	movlw	(high __pidataBANK0)| (0+128)
  1238  0017  0085               	movwf	5
  1239  0018  3041               	movlw	low __pdataBANK0
  1240  0019  0086               	movwf	6
  1241  001A  3000               	movlw	high __pdataBANK0
  1242  001B  0087               	movwf	7
  1243  001C  3008               	movlw	8
  1244  001D  225B               	fcall	init_ram
  1245  001E                     end_of_initialization:	
  1246                           ;End of C runtime variable initialization code
  1247                           
  1248  001E                     __end_of__initialization:	
  1249  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1250  001F  0020               	movlb	0
  1251  0020  2A16               	ljmp	_main	;jump to C main() function
  1252                           
  1253                           	psect	bssBANK0
  1254  0020                     __pbssBANK0:	
  1255  0020                     wait_ms@timel:	
  1256  0020                     	ds	4
  1257  0024                     _boost_down:	
  1258  0024                     	ds	2
  1259  0026                     _boost_pressed:	
  1260  0026                     	ds	2
  1261  0028                     _boost_state:	
  1262  0028                     	ds	2
  1263  002A                     _feedback_state:	
  1264  002A                     	ds	2
  1265  002C                     _fuzz_down:	
  1266  002C                     	ds	2
  1267  002E                     _fuzz_pressed:	
  1268  002E                     	ds	2
  1269  0030                     _fuzz_state:	
  1270  0030                     	ds	2
  1271  0032                     _fuzz_toggle:	
  1272  0032                     	ds	2
  1273  0034                     _fuzz_turning_on:	
  1274  0034                     	ds	2
  1275  0036                     _last_boost_state:	
  1276  0036                     	ds	2
  1277                           
  1278                           	psect	dataBANK0
  1279  0041                     __pdataBANK0:	
  1280  0041                     _boost_up:	
  1281  0041                     	ds	2
  1282  0043                     _debounce_limit:	
  1283  0043                     	ds	2
  1284  0045                     _fuzz_up:	
  1285  0045                     	ds	2
  1286  0047                     _long_press_limit:	
  1287  0047                     	ds	2
  1288                           
  1289                           	psect	clrtext
  1290  0255                     clear_ram0:	
  1291                           ;	Called with FSR0 containing the base address, and
  1292                           ;	WREG with the size to clear
  1293                           
  1294  0255  0064               	clrwdt	;clear the watchdog before getting into this loop
  1295  0256                     clrloop0:	
  1296  0256  0180               	clrf	0	;clear RAM location pointed to by FSR
  1297  0257  3101               	addfsr 0,1
  1298  0258  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1299  0259  2A56               	goto	clrloop0	;have we reached the end yet?
  1300  025A  3400               	retlw	0	;all done for this memory range, return
  1301                           
  1302                           	psect	inittext
  1303  025B                     init_ram:	
  1304  025B  00FE               	movwf	126
  1305  025C                     initloop:	
  1306  025C  0012               	moviw fsr0++
  1307  025D  001E               	movwi fsr1++
  1308  025E  0BFE               	decfsz	126,f
  1309  025F  2A5C               	goto	initloop
  1310  0260  3400               	retlw	0
  1311                           
  1312                           	psect	cstackCOMMON
  1313  0070                     __pcstackCOMMON:	
  1314  0070                     ?_ConfigureOscillator:	
  1315  0070                     ?_InitApp:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0070                     ?_initFuzz:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0070                     ?_initBoost:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0070                     ?_init_adc:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0070                     ?_isr:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0070                     ??_isr:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0070                     ?_main:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336                           
  1337                           ; 1 bytes @ 0x0
  1338  0070                     	ds	1
  1339  0071                     ??_ConfigureOscillator:	
  1340  0071                     ??_InitApp:	
  1341                           ; 1 bytes @ 0x1
  1342                           
  1343  0071                     ??_init_adc:	
  1344                           ; 1 bytes @ 0x1
  1345                           
  1346  0071                     ?___lmul:	
  1347                           ; 1 bytes @ 0x1
  1348                           
  1349  0071                     ___lmul@multiplier:	
  1350                           ; 4 bytes @ 0x1
  1351                           
  1352                           
  1353                           ; 4 bytes @ 0x1
  1354  0071                     	ds	4
  1355  0075                     ___lmul@multiplicand:	
  1356                           
  1357                           ; 4 bytes @ 0x5
  1358  0075                     	ds	4
  1359  0079                     ??___lmul:	
  1360  0079                     ___lmul@product:	
  1361                           ; 1 bytes @ 0x9
  1362                           
  1363                           
  1364                           ; 4 bytes @ 0x9
  1365  0079                     	ds	4
  1366  007D                     ??_initFuzz:	
  1367  007D                     ??_initBoost:	
  1368                           ; 1 bytes @ 0xD
  1369                           
  1370  007D                     ??_setFuzzState:	
  1371                           ; 1 bytes @ 0xD
  1372                           
  1373  007D                     ??_setFeedbackState:	
  1374                           ; 1 bytes @ 0xD
  1375                           
  1376  007D                     ??_setBoostState:	
  1377                           ; 1 bytes @ 0xD
  1378                           
  1379  007D                     ??_main:	
  1380                           ; 1 bytes @ 0xD
  1381                           
  1382  007D                     ??_wait_ms:	
  1383                           ; 1 bytes @ 0xD
  1384                           
  1385                           
  1386                           	psect	cstackBANK0
  1387  0038                     __pcstackBANK0:	
  1388                           ; 1 bytes @ 0xD
  1389                           
  1390  0038                     ?_wait_ms:	
  1391  0038                     wait_ms@time:	
  1392                           ; 1 bytes @ 0x0
  1393                           
  1394                           
  1395                           ; 2 bytes @ 0x0
  1396  0038                     	ds	2
  1397  003A                     ?_setFuzzState:	
  1398  003A                     ?_setFeedbackState:	
  1399                           ; 1 bytes @ 0x2
  1400                           
  1401  003A                     ?_setBoostState:	
  1402                           ; 1 bytes @ 0x2
  1403                           
  1404  003A                     setFuzzState@f_state:	
  1405                           ; 1 bytes @ 0x2
  1406                           
  1407  003A                     setFeedbackState@f_state:	
  1408                           ; 2 bytes @ 0x2
  1409                           
  1410  003A                     setBoostState@f_state:	
  1411                           ; 2 bytes @ 0x2
  1412                           
  1413                           
  1414                           ; 2 bytes @ 0x2
  1415  003A                     	ds	2
  1416  003C                     ?_updateFuzz:	
  1417  003C                     ?_updateBoost:	
  1418                           ; 1 bytes @ 0x4
  1419                           
  1420  003C                     updateFuzz@debounce_limit:	
  1421                           ; 1 bytes @ 0x4
  1422                           
  1423  003C                     updateBoost@debounce_limit:	
  1424                           ; 2 bytes @ 0x4
  1425                           
  1426                           
  1427                           ; 2 bytes @ 0x4
  1428  003C                     	ds	2
  1429  003E                     ??_updateFuzz:	
  1430  003E                     ??_updateBoost:	
  1431                           ; 1 bytes @ 0x6
  1432                           
  1433                           
  1434                           ; 1 bytes @ 0x6
  1435  003E                     	ds	1
  1436  003F                     updateFuzz@fb_state:	
  1437                           
  1438                           ; 2 bytes @ 0x7
  1439  003F                     	ds	2
  1440                           
  1441                           	psect	maintext
  1442  0216                     __pmaintext:	
  1443 ;;
  1444 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1445 ;;
  1446 ;; *************** function _main *****************
  1447 ;; Defined at:
  1448 ;;		line 28 in file "main.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;		None
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;		None
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      void 
  1455 ;; Registers used:
  1456 ;;		wreg, status,2, status,0, pclath, cstack
  1457 ;; Tracked objects:
  1458 ;;		On entry : B1F/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMMON   BANK0   BANK1
  1462 ;;      Params:         0       0       0
  1463 ;;      Locals:         0       0       0
  1464 ;;      Temps:          0       0       0
  1465 ;;      Totals:         0       0       0
  1466 ;;Total ram usage:        0 bytes
  1467 ;; Hardware stack levels required when called:    5
  1468 ;; This function calls:
  1469 ;;		_ConfigureOscillator
  1470 ;;		_InitApp
  1471 ;;		_initBoost
  1472 ;;		_initFuzz
  1473 ;;		_updateBoost
  1474 ;;		_updateFuzz
  1475 ;; This function is called by:
  1476 ;;		Startup code after reset
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           
  1481                           ;psect for function _main
  1482  0216                     _main:	
  1483                           
  1484                           ;main.c: 29: ConfigureOscillator();
  1485                           
  1486                           ;incstack = 0
  1487                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1488  0216  2267               	fcall	_ConfigureOscillator
  1489                           
  1490                           ;main.c: 30: InitApp();
  1491  0217  2227               	fcall	_InitApp
  1492                           
  1493                           ;main.c: 32: initFuzz();
  1494  0218  2238               	fcall	_initFuzz
  1495                           
  1496                           ;main.c: 33: initBoost();
  1497  0219  2261               	fcall	_initBoost
  1498  021A                     l58:	
  1499                           ;main.c: 35: while (1) {
  1500                           
  1501                           
  1502                           ;main.c: 36: updateFuzz(debounce_limit);
  1503  021A  0020               	movlb	0	; select bank0
  1504  021B  0844               	movf	_debounce_limit+1,w
  1505  021C  00BD               	movwf	updateFuzz@debounce_limit+1
  1506  021D  0843               	movf	_debounce_limit,w
  1507  021E  00BC               	movwf	updateFuzz@debounce_limit
  1508  021F  2021               	fcall	_updateFuzz
  1509                           
  1510                           ;main.c: 37: updateBoost(debounce_limit);
  1511  0220  0020               	movlb	0	; select bank0
  1512  0221  0844               	movf	_debounce_limit+1,w
  1513  0222  00BD               	movwf	updateBoost@debounce_limit+1
  1514  0223  0843               	movf	_debounce_limit,w
  1515  0224  00BC               	movwf	updateBoost@debounce_limit
  1516  0225  20C8               	fcall	_updateBoost
  1517  0226  2A1A               	goto	l58
  1518  0227                     __end_of_main:	
  1519                           
  1520                           	psect	text1
  1521  0021                     __ptext1:	
  1522 ;; *************** function _updateFuzz *****************
  1523 ;; Defined at:
  1524 ;;		line 44 in file "mcc_generated_files/fuzz.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;  debounce_lim    2    4[BANK0 ] int 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  fb_state        2    7[BANK0 ] int 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, status,2, status,0, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON   BANK0   BANK1
  1538 ;;      Params:         0       2       0
  1539 ;;      Locals:         0       2       0
  1540 ;;      Temps:          0       1       0
  1541 ;;      Totals:         0       5       0
  1542 ;;Total ram usage:        5 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    4
  1545 ;; This function calls:
  1546 ;;		_setFeedbackState
  1547 ;;		_setFuzzState
  1548 ;; This function is called by:
  1549 ;;		_main
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function _updateFuzz
  1555  0021                     _updateFuzz:	
  1556                           
  1557                           ;fuzz.c: 51: if (PORTAbits.RA4 == 0) {
  1558                           
  1559                           ;incstack = 0
  1560                           ; Regs used in _updateFuzz: [wreg+status,2+status,0+pclath+cstack]
  1561  0021  0020               	movlb	0	; select bank0
  1562  0022  1A0C               	btfsc	12,4	;volatile
  1563  0023  2834               	goto	l1003
  1564                           
  1565                           ;fuzz.c: 52: if (fuzz_pressed > 0) {
  1566  0024  082F               	movf	_fuzz_pressed+1,w
  1567  0025  3A80               	xorlw	128
  1568  0026  00BE               	movwf	??_updateFuzz
  1569  0027  3080               	movlw	128
  1570  0028  023E               	subwf	??_updateFuzz,w
  1571  0029  1D03               	skipz
  1572  002A  282D               	goto	u575
  1573  002B  3001               	movlw	1
  1574  002C  022E               	subwf	_fuzz_pressed,w
  1575  002D                     u575:	
  1576  002D  1C03               	skipc
  1577  002E  2845               	goto	l1007
  1578                           
  1579                           ;fuzz.c: 53: fuzz_pressed--;
  1580  002F  30FF               	movlw	255
  1581  0030  0020               	movlb	0	; select bank0
  1582  0031  07AE               	addwf	_fuzz_pressed,f
  1583  0032  30FF               	movlw	255
  1584  0033  2844               	goto	L1
  1585  0034                     l1003:	
  1586                           ;fuzz.c: 54: }
  1587                           ;fuzz.c: 55: } else if (fuzz_pressed < debounce_limit) {
  1588                           
  1589  0034  082F               	movf	_fuzz_pressed+1,w
  1590  0035  3A80               	xorlw	128
  1591  0036  00BE               	movwf	??_updateFuzz
  1592  0037  083D               	movf	updateFuzz@debounce_limit+1,w
  1593  0038  3A80               	xorlw	128
  1594  0039  023E               	subwf	??_updateFuzz,w
  1595  003A  1D03               	skipz
  1596  003B  283E               	goto	u585
  1597  003C  083C               	movf	updateFuzz@debounce_limit,w
  1598  003D  022E               	subwf	_fuzz_pressed,w
  1599  003E                     u585:	
  1600  003E  1803               	skipnc
  1601  003F  2845               	goto	l1007
  1602                           
  1603                           ;fuzz.c: 56: fuzz_pressed++;
  1604  0040  3001               	movlw	1
  1605  0041  0020               	movlb	0	; select bank0
  1606  0042  07AE               	addwf	_fuzz_pressed,f
  1607  0043  3000               	movlw	0
  1608  0044                     L1:	
  1609  0044  3DAF               	addwfc	_fuzz_pressed+1,f
  1610  0045                     l1007:	
  1611                           
  1612                           ;fuzz.c: 58: }
  1613                           ;fuzz.c: 64: if (fuzz_pressed == 0) {
  1614  0045  0020               	movlb	0	; select bank0
  1615  0046  082E               	movf	_fuzz_pressed,w
  1616  0047  042F               	iorwf	_fuzz_pressed+1,w
  1617  0048  1D03               	btfss	3,2
  1618  0049  288F               	goto	l1037
  1619                           
  1620                           ;fuzz.c: 66: fuzz_down++;
  1621  004A  3001               	movlw	1
  1622  004B  07AC               	addwf	_fuzz_down,f
  1623  004C  3000               	movlw	0
  1624  004D  3DAD               	addwfc	_fuzz_down+1,f
  1625                           
  1626                           ;fuzz.c: 67: if (fuzz_state == 1) {
  1627  004E  0330               	decf	_fuzz_state,w
  1628  004F  0431               	iorwf	_fuzz_state+1,w
  1629  0050  1D03               	btfss	3,2
  1630  0051  287C               	goto	l1027
  1631                           
  1632                           ;fuzz.c: 68: if (fuzz_up == 1) {
  1633  0052  0345               	decf	_fuzz_up,w
  1634  0053  0446               	iorwf	_fuzz_up+1,w
  1635  0054  1D03               	btfss	3,2
  1636  0055  285A               	goto	l151
  1637                           
  1638                           ;fuzz.c: 69: fuzz_toggle = 1;
  1639  0056  3001               	movlw	1
  1640  0057  00B2               	movwf	_fuzz_toggle
  1641  0058  3000               	movlw	0
  1642  0059  00B3               	movwf	_fuzz_toggle+1
  1643  005A                     l151:	
  1644                           
  1645                           ;fuzz.c: 70: }
  1646                           ;fuzz.c: 72: if (fuzz_down >= long_press_limit && feedback_state == 0 && fuzz_turning_on
      +                           == 0) {
  1647  005A  082D               	movf	_fuzz_down+1,w
  1648  005B  3A80               	xorlw	128
  1649  005C  00BE               	movwf	??_updateFuzz
  1650  005D  0848               	movf	_long_press_limit+1,w
  1651  005E  3A80               	xorlw	128
  1652  005F  023E               	subwf	??_updateFuzz,w
  1653  0060  1D03               	skipz
  1654  0061  2864               	goto	u625
  1655  0062  0847               	movf	_long_press_limit,w
  1656  0063  022C               	subwf	_fuzz_down,w
  1657  0064                     u625:	
  1658  0064  1C03               	skipc
  1659  0065  288B               	goto	l1035
  1660  0066  0020               	movlb	0	; select bank0
  1661  0067  082A               	movf	_feedback_state,w
  1662  0068  042B               	iorwf	_feedback_state+1,w
  1663  0069  1D03               	btfss	3,2
  1664  006A  288B               	goto	l1035
  1665  006B  0834               	movf	_fuzz_turning_on,w
  1666  006C  0435               	iorwf	_fuzz_turning_on+1,w
  1667  006D  1D03               	btfss	3,2
  1668  006E  288B               	goto	l1035
  1669                           
  1670                           ;fuzz.c: 74: fuzz_down = long_press_limit;
  1671  006F  0848               	movf	_long_press_limit+1,w
  1672  0070  00AD               	movwf	_fuzz_down+1
  1673  0071  0847               	movf	_long_press_limit,w
  1674  0072  00AC               	movwf	_fuzz_down
  1675                           
  1676                           ;fuzz.c: 75: LATAbits.LATA2 = 0;
  1677  0073  0022               	movlb	2	; select bank2
  1678  0074  110C               	bcf	12,2	;volatile
  1679                           
  1680                           ;fuzz.c: 76: setFeedbackState(1);
  1681  0075  3001               	movlw	1
  1682  0076  0020               	movlb	0	; select bank0
  1683  0077  00BA               	movwf	setFeedbackState@f_state
  1684  0078  3000               	movlw	0
  1685  0079  00BB               	movwf	setFeedbackState@f_state+1
  1686  007A  2157               	fcall	_setFeedbackState
  1687                           
  1688                           ;fuzz.c: 77: }
  1689                           ;fuzz.c: 78: } else {
  1690  007B  288B               	goto	l1035
  1691  007C                     l1027:	
  1692                           
  1693                           ;fuzz.c: 80: fuzz_turning_on = 1;
  1694  007C  3001               	movlw	1
  1695  007D  0020               	movlb	0	; select bank0
  1696  007E  00B4               	movwf	_fuzz_turning_on
  1697  007F  3000               	movlw	0
  1698  0080  00B5               	movwf	_fuzz_turning_on+1
  1699                           
  1700                           ;fuzz.c: 81: fuzz_toggle = 0;
  1701  0081  01B2               	clrf	_fuzz_toggle
  1702  0082  01B3               	clrf	_fuzz_toggle+1
  1703                           
  1704                           ;fuzz.c: 82: setFuzzState(1);
  1705  0083  3001               	movlw	1
  1706  0084  00BA               	movwf	setFuzzState@f_state
  1707  0085  3000               	movlw	0
  1708  0086  00BB               	movwf	setFuzzState@f_state+1
  1709  0087  2123               	fcall	_setFuzzState
  1710                           
  1711                           ;fuzz.c: 83: feedback_state = 0;
  1712  0088  0020               	movlb	0	; select bank0
  1713  0089  01AA               	clrf	_feedback_state
  1714  008A  01AB               	clrf	_feedback_state+1
  1715  008B                     l1035:	
  1716                           
  1717                           ;fuzz.c: 84: }
  1718                           ;fuzz.c: 87: fuzz_up = 0;
  1719  008B  0020               	movlb	0	; select bank0
  1720  008C  01C5               	clrf	_fuzz_up
  1721  008D  01C6               	clrf	_fuzz_up+1
  1722                           
  1723                           ;fuzz.c: 88: } else if (fuzz_pressed >= debounce_limit) {
  1724  008E  0008               	return
  1725  008F                     l1037:	
  1726  008F  082F               	movf	_fuzz_pressed+1,w
  1727  0090  3A80               	xorlw	128
  1728  0091  00BE               	movwf	??_updateFuzz
  1729  0092  083D               	movf	updateFuzz@debounce_limit+1,w
  1730  0093  3A80               	xorlw	128
  1731  0094  023E               	subwf	??_updateFuzz,w
  1732  0095  1D03               	skipz
  1733  0096  2899               	goto	u655
  1734  0097  083C               	movf	updateFuzz@debounce_limit,w
  1735  0098  022E               	subwf	_fuzz_pressed,w
  1736  0099                     u655:	
  1737  0099  1C03               	skipc
  1738  009A  0008               	return
  1739                           
  1740                           ;fuzz.c: 89: int fb_state = feedback_state;
  1741  009B  0020               	movlb	0	; select bank0
  1742  009C  082B               	movf	_feedback_state+1,w
  1743  009D  00C0               	movwf	updateFuzz@fb_state+1
  1744  009E  082A               	movf	_feedback_state,w
  1745  009F  00BF               	movwf	updateFuzz@fb_state
  1746                           
  1747                           ;fuzz.c: 90: if (fuzz_toggle == 1 && fb_state == 0) {
  1748  00A0  0332               	decf	_fuzz_toggle,w
  1749  00A1  0433               	iorwf	_fuzz_toggle+1,w
  1750  00A2  1D03               	btfss	3,2
  1751  00A3  28AC               	goto	l1047
  1752  00A4  083F               	movf	updateFuzz@fb_state,w
  1753  00A5  0440               	iorwf	updateFuzz@fb_state+1,w
  1754  00A6  1D03               	btfss	3,2
  1755  00A7  28AC               	goto	l1047
  1756                           
  1757                           ;fuzz.c: 91: setFuzzState(0);
  1758  00A8  3000               	movlw	0
  1759  00A9  00BA               	movwf	setFuzzState@f_state
  1760  00AA  00BB               	movwf	setFuzzState@f_state+1
  1761  00AB  2123               	fcall	_setFuzzState
  1762  00AC                     l1047:	
  1763                           
  1764                           ;fuzz.c: 92: }
  1765                           ;fuzz.c: 93: LATAbits.LATA2 = fuzz_state;
  1766  00AC  0020               	movlb	0	; select bank0
  1767  00AD  0C30               	rrf	_fuzz_state,w
  1768  00AE  0022               	movlb	2	; select bank2
  1769  00AF  1C03               	skipc
  1770  00B0  110C               	bcf	12,2	;volatile
  1771  00B1  1803               	skipnc
  1772  00B2  150C               	bsf	12,2	;volatile
  1773                           
  1774                           ;fuzz.c: 95: setFeedbackState(0);
  1775  00B3  3000               	movlw	0
  1776  00B4  0020               	movlb	0	; select bank0
  1777  00B5  00BA               	movwf	setFeedbackState@f_state
  1778  00B6  00BB               	movwf	setFeedbackState@f_state+1
  1779  00B7  2157               	fcall	_setFeedbackState
  1780                           
  1781                           ;fuzz.c: 96: fuzz_turning_on = 0;
  1782  00B8  0020               	movlb	0	; select bank0
  1783  00B9  01B4               	clrf	_fuzz_turning_on
  1784  00BA  01B5               	clrf	_fuzz_turning_on+1
  1785                           
  1786                           ;fuzz.c: 97: fuzz_toggle = 0;
  1787  00BB  01B2               	clrf	_fuzz_toggle
  1788  00BC  01B3               	clrf	_fuzz_toggle+1
  1789                           
  1790                           ;fuzz.c: 98: fuzz_up = 1;
  1791  00BD  3001               	movlw	1
  1792  00BE  00C5               	movwf	_fuzz_up
  1793  00BF  3000               	movlw	0
  1794  00C0  00C6               	movwf	_fuzz_up+1
  1795                           
  1796                           ;fuzz.c: 99: fuzz_down = 0;
  1797  00C1  01AC               	clrf	_fuzz_down
  1798  00C2  01AD               	clrf	_fuzz_down+1
  1799                           
  1800                           ;fuzz.c: 100: fuzz_pressed = debounce_limit;
  1801  00C3  083D               	movf	updateFuzz@debounce_limit+1,w
  1802  00C4  00AF               	movwf	_fuzz_pressed+1
  1803  00C5  083C               	movf	updateFuzz@debounce_limit,w
  1804  00C6  00AE               	movwf	_fuzz_pressed
  1805  00C7  0008               	return
  1806  00C8                     __end_of_updateFuzz:	
  1807                           
  1808                           	psect	text2
  1809  00C8                     __ptext2:	
  1810 ;; *************** function _updateBoost *****************
  1811 ;; Defined at:
  1812 ;;		line 26 in file "mcc_generated_files/boost.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  debounce_lim    2    4[BANK0 ] int 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;		None
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0, pclath, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1
  1826 ;;      Params:         0       2       0
  1827 ;;      Locals:         0       0       0
  1828 ;;      Temps:          0       2       0
  1829 ;;      Totals:         0       4       0
  1830 ;;Total ram usage:        4 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    4
  1833 ;; This function calls:
  1834 ;;		_setBoostState
  1835 ;; This function is called by:
  1836 ;;		_main
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           
  1841                           ;psect for function _updateBoost
  1842  00C8                     _updateBoost:	
  1843                           
  1844                           ;boost.c: 33: if (PORTAbits.RA5 == 0) {
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in _updateBoost: [wreg+status,2+status,0+pclath+cstack]
  1848  00C8  0020               	movlb	0	; select bank0
  1849  00C9  1A8C               	btfsc	12,5	;volatile
  1850  00CA  28DB               	goto	l1067
  1851                           
  1852                           ;boost.c: 34: if (boost_pressed > 0) {
  1853  00CB  0827               	movf	_boost_pressed+1,w
  1854  00CC  3A80               	xorlw	128
  1855  00CD  00BE               	movwf	??_updateBoost
  1856  00CE  3080               	movlw	128
  1857  00CF  023E               	subwf	??_updateBoost,w
  1858  00D0  1D03               	skipz
  1859  00D1  28D4               	goto	u695
  1860  00D2  3001               	movlw	1
  1861  00D3  0226               	subwf	_boost_pressed,w
  1862  00D4                     u695:	
  1863  00D4  1C03               	skipc
  1864  00D5  28EC               	goto	l1071
  1865                           
  1866                           ;boost.c: 35: boost_pressed--;
  1867  00D6  30FF               	movlw	255
  1868  00D7  0020               	movlb	0	; select bank0
  1869  00D8  07A6               	addwf	_boost_pressed,f
  1870  00D9  30FF               	movlw	255
  1871  00DA  28EB               	goto	L2
  1872  00DB                     l1067:	
  1873                           ;boost.c: 36: }
  1874                           ;boost.c: 37: } else if (boost_pressed < debounce_limit) {
  1875                           
  1876  00DB  0827               	movf	_boost_pressed+1,w
  1877  00DC  3A80               	xorlw	128
  1878  00DD  00BE               	movwf	??_updateBoost
  1879  00DE  083D               	movf	updateBoost@debounce_limit+1,w
  1880  00DF  3A80               	xorlw	128
  1881  00E0  023E               	subwf	??_updateBoost,w
  1882  00E1  1D03               	skipz
  1883  00E2  28E5               	goto	u705
  1884  00E3  083C               	movf	updateBoost@debounce_limit,w
  1885  00E4  0226               	subwf	_boost_pressed,w
  1886  00E5                     u705:	
  1887  00E5  1803               	skipnc
  1888  00E6  28EC               	goto	l1071
  1889                           
  1890                           ;boost.c: 38: boost_pressed++;
  1891  00E7  3001               	movlw	1
  1892  00E8  0020               	movlb	0	; select bank0
  1893  00E9  07A6               	addwf	_boost_pressed,f
  1894  00EA  3000               	movlw	0
  1895  00EB                     L2:	
  1896  00EB  3DA7               	addwfc	_boost_pressed+1,f
  1897  00EC                     l1071:	
  1898                           
  1899                           ;boost.c: 39: }
  1900                           ;boost.c: 45: if (boost_pressed == 0) {
  1901  00EC  0020               	movlb	0	; select bank0
  1902  00ED  0826               	movf	_boost_pressed,w
  1903  00EE  0427               	iorwf	_boost_pressed+1,w
  1904  00EF  1D03               	btfss	3,2
  1905  00F0  290B               	goto	l1081
  1906                           
  1907                           ;boost.c: 46: boost_down = 1;
  1908  00F1  3001               	movlw	1
  1909  00F2  00A4               	movwf	_boost_down
  1910  00F3  3000               	movlw	0
  1911  00F4  00A5               	movwf	_boost_down+1
  1912                           
  1913                           ;boost.c: 47: if (boost_up == 1) {
  1914  00F5  0341               	decf	_boost_up,w
  1915  00F6  0442               	iorwf	_boost_up+1,w
  1916  00F7  1D03               	btfss	3,2
  1917  00F8  2907               	goto	l1079
  1918                           
  1919                           ;boost.c: 48: setBoostState(!boost_state);
  1920  00F9  0828               	movf	_boost_state,w
  1921  00FA  0429               	iorwf	_boost_state+1,w
  1922  00FB  1D03               	btfss	3,2
  1923  00FC  28FF               	goto	u730
  1924  00FD  3001               	movlw	1
  1925  00FE  2900               	goto	u740
  1926  00FF                     u730:	
  1927  00FF  3000               	movlw	0
  1928  0100                     u740:	
  1929  0100  00BE               	movwf	??_updateBoost
  1930  0101  01BF               	clrf	??_updateBoost+1
  1931  0102  083E               	movf	??_updateBoost,w
  1932  0103  00BA               	movwf	setBoostState@f_state
  1933  0104  083F               	movf	??_updateBoost+1,w
  1934  0105  00BB               	movwf	setBoostState@f_state+1
  1935  0106  218B               	fcall	_setBoostState
  1936  0107                     l1079:	
  1937                           
  1938                           ;boost.c: 49: }
  1939                           ;boost.c: 50: boost_up = 0;
  1940  0107  0020               	movlb	0	; select bank0
  1941  0108  01C1               	clrf	_boost_up
  1942  0109  01C2               	clrf	_boost_up+1
  1943                           
  1944                           ;boost.c: 51: } else if (boost_pressed >= debounce_limit) {
  1945  010A  0008               	return
  1946  010B                     l1081:	
  1947  010B  0827               	movf	_boost_pressed+1,w
  1948  010C  3A80               	xorlw	128
  1949  010D  00BE               	movwf	??_updateBoost
  1950  010E  083D               	movf	updateBoost@debounce_limit+1,w
  1951  010F  3A80               	xorlw	128
  1952  0110  023E               	subwf	??_updateBoost,w
  1953  0111  1D03               	skipz
  1954  0112  2915               	goto	u755
  1955  0113  083C               	movf	updateBoost@debounce_limit,w
  1956  0114  0226               	subwf	_boost_pressed,w
  1957  0115                     u755:	
  1958  0115  1C03               	skipc
  1959  0116  0008               	return
  1960                           
  1961                           ;boost.c: 52: boost_up = 1;
  1962  0117  3001               	movlw	1
  1963  0118  0020               	movlb	0	; select bank0
  1964  0119  00C1               	movwf	_boost_up
  1965  011A  3000               	movlw	0
  1966  011B  00C2               	movwf	_boost_up+1
  1967                           
  1968                           ;boost.c: 53: boost_down = 0;
  1969  011C  01A4               	clrf	_boost_down
  1970  011D  01A5               	clrf	_boost_down+1
  1971                           
  1972                           ;boost.c: 54: boost_pressed = debounce_limit;
  1973  011E  083D               	movf	updateBoost@debounce_limit+1,w
  1974  011F  00A7               	movwf	_boost_pressed+1
  1975  0120  083C               	movf	updateBoost@debounce_limit,w
  1976  0121  00A6               	movwf	_boost_pressed
  1977  0122  0008               	return
  1978  0123                     __end_of_updateBoost:	
  1979                           
  1980                           	psect	text3
  1981  0238                     __ptext3:	
  1982 ;; *************** function _initFuzz *****************
  1983 ;; Defined at:
  1984 ;;		line 27 in file "mcc_generated_files/fuzz.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, status,0, pclath, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMMON   BANK0   BANK1
  1998 ;;      Params:         0       0       0
  1999 ;;      Locals:         0       0       0
  2000 ;;      Temps:          0       0       0
  2001 ;;      Totals:         0       0       0
  2002 ;;Total ram usage:        0 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    4
  2005 ;; This function calls:
  2006 ;;		_setFeedbackState
  2007 ;;		_setFuzzState
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           
  2014                           ;psect for function _initFuzz
  2015  0238                     _initFuzz:	
  2016                           
  2017                           ;fuzz.c: 32: setFuzzState(0);
  2018                           
  2019                           ;incstack = 0
  2020                           ; Regs used in _initFuzz: [wreg+status,2+status,0+pclath+cstack]
  2021  0238  3000               	movlw	0
  2022  0239  0020               	movlb	0	; select bank0
  2023  023A  00BA               	movwf	setFuzzState@f_state
  2024  023B  00BB               	movwf	setFuzzState@f_state+1
  2025  023C  2123               	fcall	_setFuzzState
  2026                           
  2027                           ;fuzz.c: 40: setFeedbackState(0);
  2028  023D  3000               	movlw	0
  2029  023E  0020               	movlb	0	; select bank0
  2030  023F  00BA               	movwf	setFeedbackState@f_state
  2031  0240  00BB               	movwf	setFeedbackState@f_state+1
  2032  0241  2157               	fcall	_setFeedbackState
  2033  0242  0008               	return
  2034  0243                     __end_of_initFuzz:	
  2035                           
  2036                           	psect	text4
  2037  0123                     __ptext4:	
  2038 ;; *************** function _setFuzzState *****************
  2039 ;; Defined at:
  2040 ;;		line 104 in file "mcc_generated_files/fuzz.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  f_state         2    2[BANK0 ] int 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;		None
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      void 
  2047 ;; Registers used:
  2048 ;;		wreg, status,2, status,0, pclath, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMMON   BANK0   BANK1
  2054 ;;      Params:         0       2       0
  2055 ;;      Locals:         0       0       0
  2056 ;;      Temps:          0       0       0
  2057 ;;      Totals:         0       2       0
  2058 ;;Total ram usage:        2 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    3
  2061 ;; This function calls:
  2062 ;;		_wait_ms
  2063 ;; This function is called by:
  2064 ;;		_initFuzz
  2065 ;;		_updateFuzz
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           
  2070                           ;psect for function _setFuzzState
  2071  0123                     _setFuzzState:	
  2072                           
  2073                           ;fuzz.c: 105: if (fuzz_state == f_state) {return;}
  2074                           
  2075                           ;incstack = 0
  2076                           ; Regs used in _setFuzzState: [wreg+status,2+status,0+pclath+cstack]
  2077  0123  0020               	movlb	0	; select bank0
  2078  0124  083B               	movf	setFuzzState@f_state+1,w
  2079  0125  0631               	xorwf	_fuzz_state+1,w
  2080  0126  1D03               	skipz
  2081  0127  292A               	goto	u475
  2082  0128  083A               	movf	setFuzzState@f_state,w
  2083  0129  0630               	xorwf	_fuzz_state,w
  2084  012A                     u475:	
  2085  012A  1903               	btfsc	3,2
  2086  012B  0008               	return
  2087                           
  2088                           ;fuzz.c: 106: fuzz_state = f_state;
  2089  012C  083B               	movf	setFuzzState@f_state+1,w
  2090  012D  00B1               	movwf	_fuzz_state+1
  2091  012E  083A               	movf	setFuzzState@f_state,w
  2092  012F  00B0               	movwf	_fuzz_state
  2093                           
  2094                           ;fuzz.c: 107: LATAbits.LATA2 = f_state;
  2095  0130  0C3A               	rrf	setFuzzState@f_state,w
  2096  0131  0022               	movlb	2	; select bank2
  2097  0132  1C03               	skipc
  2098  0133  110C               	bcf	12,2	;volatile
  2099  0134  1803               	skipnc
  2100  0135  150C               	bsf	12,2	;volatile
  2101                           
  2102                           ;fuzz.c: 108: LATCbits.LATC2 = f_state;
  2103  0136  0020               	movlb	0	; select bank0
  2104  0137  0C3A               	rrf	setFuzzState@f_state,w
  2105  0138  0022               	movlb	2	; select bank2
  2106  0139  1C03               	skipc
  2107  013A  110E               	bcf	14,2	;volatile
  2108  013B  1803               	skipnc
  2109  013C  150E               	bsf	14,2	;volatile
  2110                           
  2111                           ;fuzz.c: 109: LATCbits.LATC1 = !f_state;
  2112  013D  0020               	movlb	0	; select bank0
  2113  013E  083A               	movf	setFuzzState@f_state,w
  2114  013F  043B               	iorwf	setFuzzState@f_state+1,w
  2115  0140  1D03               	btfss	3,2
  2116  0141  2945               	goto	u480
  2117  0142  0022               	movlb	2	; select bank2
  2118  0143  148E               	bsf	14,1	;volatile
  2119  0144  2947               	goto	l937
  2120  0145                     u480:	
  2121  0145  0022               	movlb	2	; select bank2
  2122  0146  108E               	bcf	14,1	;volatile
  2123  0147                     l937:	
  2124                           
  2125                           ;fuzz.c: 111: wait_ms(20);
  2126  0147  3014               	movlw	20
  2127  0148  0020               	movlb	0	; select bank0
  2128  0149  00B8               	movwf	wait_ms@time
  2129  014A  3000               	movlw	0
  2130  014B  00B9               	movwf	wait_ms@time+1
  2131  014C  21EE               	fcall	_wait_ms
  2132                           
  2133                           ;fuzz.c: 113: LATCbits.LATC2 = 0;
  2134  014D  0022               	movlb	2	; select bank2
  2135  014E  110E               	bcf	14,2	;volatile
  2136                           
  2137                           ;fuzz.c: 114: LATCbits.LATC1 = 0;
  2138  014F  108E               	bcf	14,1	;volatile
  2139                           
  2140                           ;fuzz.c: 117: wait_ms(20);
  2141  0150  3014               	movlw	20
  2142  0151  0020               	movlb	0	; select bank0
  2143  0152  00B8               	movwf	wait_ms@time
  2144  0153  3000               	movlw	0
  2145  0154  00B9               	movwf	wait_ms@time+1
  2146  0155  21EE               	fcall	_wait_ms
  2147  0156  0008               	return
  2148  0157                     __end_of_setFuzzState:	
  2149                           
  2150                           	psect	text5
  2151  0157                     __ptext5:	
  2152 ;; *************** function _setFeedbackState *****************
  2153 ;; Defined at:
  2154 ;;		line 121 in file "mcc_generated_files/fuzz.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  f_state         2    2[BANK0 ] int 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0, pclath, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMMON   BANK0   BANK1
  2168 ;;      Params:         0       2       0
  2169 ;;      Locals:         0       0       0
  2170 ;;      Temps:          0       0       0
  2171 ;;      Totals:         0       2       0
  2172 ;;Total ram usage:        2 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    3
  2175 ;; This function calls:
  2176 ;;		_wait_ms
  2177 ;; This function is called by:
  2178 ;;		_initFuzz
  2179 ;;		_updateFuzz
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           
  2184                           ;psect for function _setFeedbackState
  2185  0157                     _setFeedbackState:	
  2186                           
  2187                           ;fuzz.c: 122: if (feedback_state == f_state) {return;}
  2188                           
  2189                           ;incstack = 0
  2190                           ; Regs used in _setFeedbackState: [wreg+status,2+status,0+pclath+cstack]
  2191  0157  0020               	movlb	0	; select bank0
  2192  0158  083B               	movf	setFeedbackState@f_state+1,w
  2193  0159  062B               	xorwf	_feedback_state+1,w
  2194  015A  1D03               	skipz
  2195  015B  295E               	goto	u505
  2196  015C  083A               	movf	setFeedbackState@f_state,w
  2197  015D  062A               	xorwf	_feedback_state,w
  2198  015E                     u505:	
  2199  015E  1903               	btfsc	3,2
  2200  015F  0008               	return
  2201                           
  2202                           ;fuzz.c: 123: feedback_state = f_state;
  2203  0160  083B               	movf	setFeedbackState@f_state+1,w
  2204  0161  00AB               	movwf	_feedback_state+1
  2205  0162  083A               	movf	setFeedbackState@f_state,w
  2206  0163  00AA               	movwf	_feedback_state
  2207                           
  2208                           ;fuzz.c: 124: LATCbits.LATC3 = f_state;
  2209  0164  0C3A               	rrf	setFeedbackState@f_state,w
  2210  0165  0022               	movlb	2	; select bank2
  2211  0166  1C03               	skipc
  2212  0167  118E               	bcf	14,3	;volatile
  2213  0168  1803               	skipnc
  2214  0169  158E               	bsf	14,3	;volatile
  2215                           
  2216                           ;fuzz.c: 125: LATAbits.LATA0 = f_state;
  2217  016A  0020               	movlb	0	; select bank0
  2218  016B  0C3A               	rrf	setFeedbackState@f_state,w
  2219  016C  0022               	movlb	2	; select bank2
  2220  016D  1C03               	skipc
  2221  016E  100C               	bcf	12,0	;volatile
  2222  016F  1803               	skipnc
  2223  0170  140C               	bsf	12,0	;volatile
  2224                           
  2225                           ;fuzz.c: 126: LATAbits.LATA1 = !f_state;
  2226  0171  0020               	movlb	0	; select bank0
  2227  0172  083A               	movf	setFeedbackState@f_state,w
  2228  0173  043B               	iorwf	setFeedbackState@f_state+1,w
  2229  0174  1D03               	btfss	3,2
  2230  0175  2979               	goto	u510
  2231  0176  0022               	movlb	2	; select bank2
  2232  0177  148C               	bsf	12,1	;volatile
  2233  0178  297B               	goto	l957
  2234  0179                     u510:	
  2235  0179  0022               	movlb	2	; select bank2
  2236  017A  108C               	bcf	12,1	;volatile
  2237  017B                     l957:	
  2238                           
  2239                           ;fuzz.c: 128: wait_ms(20);
  2240  017B  3014               	movlw	20
  2241  017C  0020               	movlb	0	; select bank0
  2242  017D  00B8               	movwf	wait_ms@time
  2243  017E  3000               	movlw	0
  2244  017F  00B9               	movwf	wait_ms@time+1
  2245  0180  21EE               	fcall	_wait_ms
  2246                           
  2247                           ;fuzz.c: 130: LATAbits.LATA0 = 0;
  2248  0181  0022               	movlb	2	; select bank2
  2249  0182  100C               	bcf	12,0	;volatile
  2250                           
  2251                           ;fuzz.c: 131: LATAbits.LATA1 = 0;
  2252  0183  108C               	bcf	12,1	;volatile
  2253                           
  2254                           ;fuzz.c: 134: wait_ms(20);
  2255  0184  3014               	movlw	20
  2256  0185  0020               	movlb	0	; select bank0
  2257  0186  00B8               	movwf	wait_ms@time
  2258  0187  3000               	movlw	0
  2259  0188  00B9               	movwf	wait_ms@time+1
  2260  0189  21EE               	fcall	_wait_ms
  2261  018A  0008               	return
  2262  018B                     __end_of_setFeedbackState:	
  2263                           
  2264                           	psect	text6
  2265  0261                     __ptext6:	
  2266 ;; *************** function _initBoost *****************
  2267 ;; Defined at:
  2268 ;;		line 22 in file "mcc_generated_files/boost.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, status,2, status,0, pclath, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMMON   BANK0   BANK1
  2282 ;;      Params:         0       0       0
  2283 ;;      Locals:         0       0       0
  2284 ;;      Temps:          0       0       0
  2285 ;;      Totals:         0       0       0
  2286 ;;Total ram usage:        0 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    4
  2289 ;; This function calls:
  2290 ;;		_setBoostState
  2291 ;; This function is called by:
  2292 ;;		_main
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           
  2297                           ;psect for function _initBoost
  2298  0261                     _initBoost:	
  2299                           
  2300                           ;boost.c: 23: setBoostState(0);
  2301                           
  2302                           ;incstack = 0
  2303                           ; Regs used in _initBoost: [wreg+status,2+status,0+pclath+cstack]
  2304  0261  3000               	movlw	0
  2305  0262  0020               	movlb	0	; select bank0
  2306  0263  00BA               	movwf	setBoostState@f_state
  2307  0264  00BB               	movwf	setBoostState@f_state+1
  2308  0265  218B               	fcall	_setBoostState
  2309  0266  0008               	return
  2310  0267                     __end_of_initBoost:	
  2311                           
  2312                           	psect	text7
  2313  018B                     __ptext7:	
  2314 ;; *************** function _setBoostState *****************
  2315 ;; Defined at:
  2316 ;;		line 61 in file "mcc_generated_files/boost.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  f_state         2    2[BANK0 ] int 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;		None
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  1    wreg      void 
  2323 ;; Registers used:
  2324 ;;		wreg, status,2, status,0, pclath, cstack
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMMON   BANK0   BANK1
  2330 ;;      Params:         0       2       0
  2331 ;;      Locals:         0       0       0
  2332 ;;      Temps:          0       0       0
  2333 ;;      Totals:         0       2       0
  2334 ;;Total ram usage:        2 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; Hardware stack levels required when called:    3
  2337 ;; This function calls:
  2338 ;;		_wait_ms
  2339 ;; This function is called by:
  2340 ;;		_initBoost
  2341 ;;		_updateBoost
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           
  2346                           ;psect for function _setBoostState
  2347  018B                     _setBoostState:	
  2348                           
  2349                           ;boost.c: 62: if (boost_state == f_state) {return;}
  2350                           
  2351                           ;incstack = 0
  2352                           ; Regs used in _setBoostState: [wreg+status,2+status,0+pclath+cstack]
  2353  018B  0020               	movlb	0	; select bank0
  2354  018C  083B               	movf	setBoostState@f_state+1,w
  2355  018D  0629               	xorwf	_boost_state+1,w
  2356  018E  1D03               	skipz
  2357  018F  2992               	goto	u535
  2358  0190  083A               	movf	setBoostState@f_state,w
  2359  0191  0628               	xorwf	_boost_state,w
  2360  0192                     u535:	
  2361  0192  1903               	btfsc	3,2
  2362  0193  0008               	return
  2363                           
  2364                           ;boost.c: 63: boost_state = f_state;
  2365  0194  083B               	movf	setBoostState@f_state+1,w
  2366  0195  00A9               	movwf	_boost_state+1
  2367  0196  083A               	movf	setBoostState@f_state,w
  2368  0197  00A8               	movwf	_boost_state
  2369                           
  2370                           ;boost.c: 64: LATCbits.LATC5 = f_state;
  2371  0198  0C3A               	rrf	setBoostState@f_state,w
  2372  0199  0022               	movlb	2	; select bank2
  2373  019A  1C03               	skipc
  2374  019B  128E               	bcf	14,5	;volatile
  2375  019C  1803               	skipnc
  2376  019D  168E               	bsf	14,5	;volatile
  2377                           
  2378                           ;boost.c: 65: LATCbits.LATC0 = f_state;
  2379  019E  0020               	movlb	0	; select bank0
  2380  019F  0C3A               	rrf	setBoostState@f_state,w
  2381  01A0  0022               	movlb	2	; select bank2
  2382  01A1  1C03               	skipc
  2383  01A2  100E               	bcf	14,0	;volatile
  2384  01A3  1803               	skipnc
  2385  01A4  140E               	bsf	14,0	;volatile
  2386                           
  2387                           ;boost.c: 66: LATCbits.LATC4 = !f_state;
  2388  01A5  0020               	movlb	0	; select bank0
  2389  01A6  083A               	movf	setBoostState@f_state,w
  2390  01A7  043B               	iorwf	setBoostState@f_state+1,w
  2391  01A8  1D03               	btfss	3,2
  2392  01A9  29AD               	goto	u540
  2393  01AA  0022               	movlb	2	; select bank2
  2394  01AB  160E               	bsf	14,4	;volatile
  2395  01AC  29AF               	goto	l977
  2396  01AD                     u540:	
  2397  01AD  0022               	movlb	2	; select bank2
  2398  01AE  120E               	bcf	14,4	;volatile
  2399  01AF                     l977:	
  2400                           
  2401                           ;boost.c: 68: wait_ms(20);
  2402  01AF  3014               	movlw	20
  2403  01B0  0020               	movlb	0	; select bank0
  2404  01B1  00B8               	movwf	wait_ms@time
  2405  01B2  3000               	movlw	0
  2406  01B3  00B9               	movwf	wait_ms@time+1
  2407  01B4  21EE               	fcall	_wait_ms
  2408                           
  2409                           ;boost.c: 70: LATCbits.LATC0 = 0;
  2410  01B5  0022               	movlb	2	; select bank2
  2411  01B6  100E               	bcf	14,0	;volatile
  2412                           
  2413                           ;boost.c: 71: LATCbits.LATC4 = 0;
  2414  01B7  120E               	bcf	14,4	;volatile
  2415                           
  2416                           ;boost.c: 73: wait_ms(20);
  2417  01B8  3014               	movlw	20
  2418  01B9  0020               	movlb	0	; select bank0
  2419  01BA  00B8               	movwf	wait_ms@time
  2420  01BB  3000               	movlw	0
  2421  01BC  00B9               	movwf	wait_ms@time+1
  2422  01BD  21EE               	fcall	_wait_ms
  2423  01BE  0008               	return
  2424  01BF                     __end_of_setBoostState:	
  2425                           
  2426                           	psect	text8
  2427  01EE                     __ptext8:	
  2428 ;; *************** function _wait_ms *****************
  2429 ;; Defined at:
  2430 ;;		line 23 in file "system.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  time            2    0[BANK0 ] unsigned int 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;		None
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  1    wreg      void 
  2437 ;; Registers used:
  2438 ;;		wreg, status,2, status,0, pclath, cstack
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMMON   BANK0   BANK1
  2444 ;;      Params:         0       2       0
  2445 ;;      Locals:         0       0       0
  2446 ;;      Temps:          0       0       0
  2447 ;;      Totals:         0       2       0
  2448 ;;Total ram usage:        2 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; Hardware stack levels required when called:    2
  2451 ;; This function calls:
  2452 ;;		___lmul
  2453 ;; This function is called by:
  2454 ;;		_setFuzzState
  2455 ;;		_setFeedbackState
  2456 ;;		_setBoostState
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           
  2461                           ;psect for function _wait_ms
  2462  01EE                     _wait_ms:	
  2463                           
  2464                           ;system.c: 25: static long timel = 0;
  2465                           ;system.c: 26: timel = time * 1000l;
  2466                           
  2467                           ;incstack = 0
  2468                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  2469  01EE  0020               	movlb	0	; select bank0
  2470  01EF  0838               	movf	wait_ms@time,w
  2471  01F0  00F1               	movwf	___lmul@multiplier
  2472  01F1  0839               	movf	wait_ms@time+1,w
  2473  01F2  00F2               	movwf	___lmul@multiplier+1
  2474  01F3  01F3               	clrf	___lmul@multiplier+2
  2475  01F4  01F4               	clrf	___lmul@multiplier+3
  2476  01F5  3000               	movlw	0
  2477  01F6  00F8               	movwf	___lmul@multiplicand+3
  2478  01F7  3000               	movlw	0
  2479  01F8  00F7               	movwf	___lmul@multiplicand+2
  2480  01F9  3003               	movlw	3
  2481  01FA  00F6               	movwf	___lmul@multiplicand+1
  2482  01FB  30E8               	movlw	232
  2483  01FC  00F5               	movwf	___lmul@multiplicand
  2484  01FD  21BF               	fcall	___lmul
  2485  01FE  0874               	movf	?___lmul+3,w
  2486  01FF  0020               	movlb	0	; select bank0
  2487  0200  00A3               	movwf	wait_ms@timel+3
  2488  0201  0873               	movf	?___lmul+2,w
  2489  0202  00A2               	movwf	wait_ms@timel+2
  2490  0203  0872               	movf	?___lmul+1,w
  2491  0204  00A1               	movwf	wait_ms@timel+1
  2492  0205  0871               	movf	?___lmul,w
  2493  0206  00A0               	movwf	wait_ms@timel
  2494  0207                     l73:	
  2495                           ;system.c: 27: for( ; timel; timel--);
  2496                           
  2497  0207  0823               	movf	wait_ms@timel+3,w
  2498  0208  0422               	iorwf	wait_ms@timel+2,w
  2499  0209  0421               	iorwf	wait_ms@timel+1,w
  2500  020A  0420               	iorwf	wait_ms@timel,w
  2501  020B  1903               	btfsc	3,2
  2502  020C  0008               	return
  2503  020D  30FF               	movlw	255
  2504  020E  07A0               	addwf	wait_ms@timel,f
  2505  020F  30FF               	movlw	255
  2506  0210  3DA1               	addwfc	wait_ms@timel+1,f
  2507  0211  30FF               	movlw	255
  2508  0212  3DA2               	addwfc	wait_ms@timel+2,f
  2509  0213  30FF               	movlw	255
  2510  0214  3DA3               	addwfc	wait_ms@timel+3,f
  2511  0215  2A07               	goto	l73
  2512  0216                     __end_of_wait_ms:	
  2513                           
  2514                           	psect	text9
  2515  01BF                     __ptext9:	
  2516 ;; *************** function ___lmul *****************
  2517 ;; Defined at:
  2518 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  multiplier      4    1[COMMON] unsigned long 
  2521 ;;  multiplicand    4    5[COMMON] unsigned long 
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  product         4    9[COMMON] unsigned long 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  4    1[COMMON] unsigned long 
  2526 ;; Registers used:
  2527 ;;		wreg, status,2, status,0
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1
  2533 ;;      Params:         8       0       0
  2534 ;;      Locals:         4       0       0
  2535 ;;      Temps:          0       0       0
  2536 ;;      Totals:        12       0       0
  2537 ;;Total ram usage:       12 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    1
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_wait_ms
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           
  2548                           ;psect for function ___lmul
  2549  01BF                     ___lmul:	
  2550                           
  2551                           ;incstack = 0
  2552                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2553  01BF  3000               	movlw	0
  2554  01C0  00FC               	movwf	___lmul@product+3
  2555  01C1  3000               	movlw	0
  2556  01C2  00FB               	movwf	___lmul@product+2
  2557  01C3  3000               	movlw	0
  2558  01C4  00FA               	movwf	___lmul@product+1
  2559  01C5  3000               	movlw	0
  2560  01C6  00F9               	movwf	___lmul@product
  2561  01C7                     l903:	
  2562  01C7  1C71               	btfss	___lmul@multiplier,0
  2563  01C8  29D1               	goto	l907
  2564  01C9  0875               	movf	___lmul@multiplicand,w
  2565  01CA  07F9               	addwf	___lmul@product,f
  2566  01CB  0876               	movf	___lmul@multiplicand+1,w
  2567  01CC  3DFA               	addwfc	___lmul@product+1,f
  2568  01CD  0877               	movf	___lmul@multiplicand+2,w
  2569  01CE  3DFB               	addwfc	___lmul@product+2,f
  2570  01CF  0878               	movf	___lmul@multiplicand+3,w
  2571  01D0  3DFC               	addwfc	___lmul@product+3,f
  2572  01D1                     l907:	
  2573  01D1  3001               	movlw	1
  2574  01D2                     u435:	
  2575  01D2  35F5               	lslf	___lmul@multiplicand,f
  2576  01D3  0DF6               	rlf	___lmul@multiplicand+1,f
  2577  01D4  0DF7               	rlf	___lmul@multiplicand+2,f
  2578  01D5  0DF8               	rlf	___lmul@multiplicand+3,f
  2579  01D6  0B89               	decfsz	9,f
  2580  01D7  29D2               	goto	u435
  2581  01D8  3001               	movlw	1
  2582  01D9                     u445:	
  2583  01D9  36F4               	lsrf	___lmul@multiplier+3,f
  2584  01DA  0CF3               	rrf	___lmul@multiplier+2,f
  2585  01DB  0CF2               	rrf	___lmul@multiplier+1,f
  2586  01DC  0CF1               	rrf	___lmul@multiplier,f
  2587  01DD  0B89               	decfsz	9,f
  2588  01DE  29D9               	goto	u445
  2589  01DF  0874               	movf	___lmul@multiplier+3,w
  2590  01E0  0473               	iorwf	___lmul@multiplier+2,w
  2591  01E1  0472               	iorwf	___lmul@multiplier+1,w
  2592  01E2  0471               	iorwf	___lmul@multiplier,w
  2593  01E3  1D03               	skipz
  2594  01E4  29C7               	goto	l903
  2595  01E5  087C               	movf	___lmul@product+3,w
  2596  01E6  00F4               	movwf	?___lmul+3
  2597  01E7  087B               	movf	___lmul@product+2,w
  2598  01E8  00F3               	movwf	?___lmul+2
  2599  01E9  087A               	movf	___lmul@product+1,w
  2600  01EA  00F2               	movwf	?___lmul+1
  2601  01EB  0879               	movf	___lmul@product,w
  2602  01EC  00F1               	movwf	?___lmul
  2603  01ED  0008               	return
  2604  01EE                     __end_of___lmul:	
  2605                           
  2606                           	psect	text10
  2607  0227                     __ptext10:	
  2608 ;; *************** function _InitApp *****************
  2609 ;; Defined at:
  2610 ;;		line 27 in file "user.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;		None
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		wreg, status,2, status,0, pclath, cstack
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMMON   BANK0   BANK1
  2624 ;;      Params:         0       0       0
  2625 ;;      Locals:         0       0       0
  2626 ;;      Temps:          0       0       0
  2627 ;;      Totals:         0       0       0
  2628 ;;Total ram usage:        0 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:    2
  2631 ;; This function calls:
  2632 ;;		_init_adc
  2633 ;; This function is called by:
  2634 ;;		_main
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           
  2639                           ;psect for function _InitApp
  2640  0227                     _InitApp:	
  2641                           
  2642                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  2643                           
  2644                           ;incstack = 0
  2645                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  2646  0227  0021               	movlb	1	; select bank1
  2647  0228  100C               	bcf	12,0	;volatile
  2648                           
  2649                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  2650  0229  108C               	bcf	12,1	;volatile
  2651                           
  2652                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  2653  022A  110C               	bcf	12,2	;volatile
  2654                           
  2655                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  2656  022B  160C               	bsf	12,4	;volatile
  2657                           
  2658                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  2659  022C  168C               	bsf	12,5	;volatile
  2660                           
  2661                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  2662  022D  0023               	movlb	3	; select bank3
  2663  022E  120C               	bcf	12,4	;volatile
  2664                           
  2665                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  2666  022F  0021               	movlb	1	; select bank1
  2667  0230  100E               	bcf	14,0	;volatile
  2668                           
  2669                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  2670  0231  108E               	bcf	14,1	;volatile
  2671                           
  2672                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  2673  0232  110E               	bcf	14,2	;volatile
  2674                           
  2675                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  2676  0233  118E               	bcf	14,3	;volatile
  2677                           
  2678                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  2679  0234  120E               	bcf	14,4	;volatile
  2680                           
  2681                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  2682  0235  128E               	bcf	14,5	;volatile
  2683                           
  2684                           ;user.c: 43: init_adc();
  2685  0236  2243               	fcall	_init_adc
  2686  0237  0008               	return
  2687  0238                     __end_of_InitApp:	
  2688                           
  2689                           	psect	text11
  2690  0243                     __ptext11:	
  2691 ;; *************** function _init_adc *****************
  2692 ;; Defined at:
  2693 ;;		line 55 in file "user.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMMON   BANK0   BANK1
  2707 ;;      Params:         0       0       0
  2708 ;;      Locals:         0       0       0
  2709 ;;      Temps:          0       0       0
  2710 ;;      Totals:         0       0       0
  2711 ;;Total ram usage:        0 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    1
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_InitApp
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function _init_adc
  2723  0243                     _init_adc:	
  2724                           
  2725                           ;user.c: 56: ADCON1bits.ADFM = 0b1;
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  2729  0243  0021               	movlb	1	; select bank1
  2730  0244  179E               	bsf	30,7	;volatile
  2731                           
  2732                           ;user.c: 57: ADCON1bits.ADCS = 0b110;
  2733  0245  081E               	movf	30,w	;volatile
  2734  0246  398F               	andlw	-113
  2735  0247  3860               	iorlw	96
  2736  0248  009E               	movwf	30	;volatile
  2737                           
  2738                           ;user.c: 58: ADCON1bits.ADPREF = 0b00;
  2739  0249  30FC               	movlw	-4
  2740  024A  059E               	andwf	30,f	;volatile
  2741                           
  2742                           ;user.c: 59: ADCON0bits.ADON = 0b1;
  2743  024B  141D               	bsf	29,0	;volatile
  2744  024C  0008               	return
  2745  024D                     __end_of_init_adc:	
  2746                           
  2747                           	psect	text12
  2748  0267                     __ptext12:	
  2749 ;; *************** function _ConfigureOscillator *****************
  2750 ;; Defined at:
  2751 ;;		line 17 in file "system.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2, status,0
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMMON   BANK0   BANK1
  2765 ;;      Params:         0       0       0
  2766 ;;      Locals:         0       0       0
  2767 ;;      Temps:          0       0       0
  2768 ;;      Totals:         0       0       0
  2769 ;;Total ram usage:        0 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    1
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		_main
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           
  2780                           ;psect for function _ConfigureOscillator
  2781  0267                     _ConfigureOscillator:	
  2782                           
  2783                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  2784                           
  2785                           ;incstack = 0
  2786                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  2787  0267  3078               	movlw	120
  2788  0268  0021               	movlb	1	; select bank1
  2789  0269  0499               	iorwf	25,f	;volatile
  2790                           
  2791                           ;system.c: 20: OSCSTAT = 0x00;
  2792  026A  019A               	clrf	26	;volatile
  2793  026B  0008               	return
  2794  026C                     __end_of_ConfigureOscillator:	
  2795                           
  2796                           	psect	intentry
  2797  0004                     __pintentry:	
  2798 ;; *************** function _isr *****************
  2799 ;; Defined at:
  2800 ;;		line 23 in file "interrupts.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		None
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1
  2814 ;;      Params:         0       0       0
  2815 ;;      Locals:         0       0       0
  2816 ;;      Temps:          1       0       0
  2817 ;;      Totals:         1       0       0
  2818 ;;Total ram usage:        1 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		Interrupt level 1
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827  0004                     _isr:	
  2828                           
  2829                           ;incstack = 0
  2830                           ; Regs used in _isr: []
  2831  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2832  0005  3180               	pagesel	$
  2833  0006  0020               	movlb	0	; select bank0
  2834  0007  087F               	movf	127,w
  2835  0008  00F0               	movwf	??_isr
  2836  0009  0870               	movf	??_isr,w
  2837  000A  00FF               	movwf	127
  2838  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2839  000C  0009               	retfie
  2840  000D                     __end_of_isr:	
  2841  007E                     btemp	set	126	;btemp
  2842  007E                     int$flags	set	126
  2843  007E                     wtemp	set	126
  2844  007E                     wtemp0	set	126
  2845  0080                     wtemp1	set	128
  2846  0082                     wtemp2	set	130
  2847  0084                     wtemp3	set	132
  2848  0086                     wtemp4	set	134
  2849  0088                     wtemp5	set	136
  2850  007F                     wtemp6	set	127
  2851  007E                     ttemp	set	126
  2852  007E                     ttemp0	set	126
  2853  0081                     ttemp1	set	129
  2854  0084                     ttemp2	set	132
  2855  0087                     ttemp3	set	135
  2856  007F                     ttemp4	set	127
  2857  007E                     ltemp	set	126
  2858  007E                     ltemp0	set	126
  2859  0082                     ltemp1	set	130
  2860  0086                     ltemp2	set	134
  2861  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      9      41
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _wait_ms->___lmul

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateFuzz
    _updateFuzz->_setFeedbackState
    _updateFuzz->_setFuzzState
    _updateBoost->_setBoostState
    _initFuzz->_setFeedbackState
    _initFuzz->_setFuzzState
    _setFuzzState->_wait_ms
    _setFeedbackState->_wait_ms
    _initBoost->_setBoostState
    _setBoostState->_wait_ms

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5723
                _ConfigureOscillator
                            _InitApp
                          _initBoost
                           _initFuzz
                        _updateBoost
                         _updateFuzz
 ---------------------------------------------------------------------------------
 (1) _updateFuzz                                           5     3      2    2009
                                              4 BANK0      5     3      2
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (1) _updateBoost                                          4     2      2     994
                                              4 BANK0      4     2      2
                      _setBoostState
 ---------------------------------------------------------------------------------
 (1) _initFuzz                                             0     0      0    1856
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (2) _setFuzzState                                         2     0      2     928
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     2     0      2     928
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _initBoost                                            0     0      0     864
                      _setBoostState
 ---------------------------------------------------------------------------------
 (2) _setBoostState                                        2     0      2     864
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     626
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initBoost
     _setBoostState
       _wait_ms
         ___lmul
   _initFuzz
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _wait_ms
         ___lmul
   _updateBoost
     _setBoostState
       _wait_ms
         ___lmul
   _updateFuzz
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      36       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      29       6       51.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      36       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Aug 02 23:43:11 2016

                 __CFG_CP$OFF 0000                            l73 0207                            l58 021A  
                 __CFG_LVP$ON 0000                           l151 005A                           l903 01C7  
                         l907 01D1                           l937 0147                           l957 017B  
                         l977 01AF                           u510 0179                           u505 015E  
                         u435 01D2                           u540 01AD                           u445 01D9  
                         u535 0192                           u480 0145                           u705 00E5  
                         u625 0064                           u730 00FF                           u475 012A  
                         u740 0100                           u655 0099                           u575 002D  
                         u585 003E                           u755 0115                           u695 00D4  
                         _isr 0004                  __CFG_BORV$LO 0000                           wreg 0009  
               _boost_pressed 0026                          l1003 0034                          l1007 0045  
                        l1035 008B                          l1027 007C                          l1037 008F  
                        l1071 00EC                          l1047 00AC                          l1081 010B  
                        l1067 00DB                          l1079 0107                          ?_isr 0070  
                __CFG_WRT$OFF 0000                          _main 0216                          fsr0h 0005  
                        fsr1h 0007                          fsr0l 0004                          indf0 0000  
                        fsr1l 0006                          btemp 007E                          ltemp 007E  
    __end_of_setFeedbackState 018B                          start 000D                          ttemp 007E  
                        wtemp 007E         __end_of_setBoostState 01BF                 __CFG_MCLRE$ON 0000  
             __end_of_InitApp 0238                         ??_isr 0070                         ?_main 0070  
               __CFG_WDTE$OFF 0000           _ConfigureOscillator 0267           ___lmul@multiplicand 0075  
              __CFG_BOREN$OFF 0000                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080               __end_of_wait_ms 0216  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F          ?_ConfigureOscillator 0070               __initialization 000E  
                __end_of_main 0227                __CFG_LPBOR$OFF 0000                        ??_main 007D  
          updateFuzz@fb_state 003F                _feedback_state 002A                        _ADRESH 009C  
                      _ADRESL 009B                        _PMADRH 0192                        _PMADRL 0191  
                      _PMDATH 0194                        _PMDATL 0193                        _PMCON2 0196  
              _debounce_limit 0043                     ??_InitApp 0071         ??_ConfigureOscillator 0071  
              __CFG_PWRTE$OFF 0000                        ___lmul 01BF                __CFG_STVREN$ON 0000  
            __end_of_initFuzz 0243              __end_of_init_adc 024D                     ??_wait_ms 007D  
     __end_of__initialization 001E     updateBoost@debounce_limit 003C                  ?_updateBoost 003C  
              __pcstackCOMMON 0070                  __pidataBANK0 024D                    __pbssBANK0 0020  
          __size_of_initBoost 0006             ?_setFeedbackState 003A              _long_press_limit 0047  
                  __pmaintext 0216            ??_setFeedbackState 007D                 ?_setFuzzState 003A  
                     ?___lmul 0071                    __pintentry 0004                ___lmul@product 0079  
    updateFuzz@debounce_limit 003C                       _OSCSTAT 009A                    _boost_down 0024  
                   ?_initFuzz 0070                     ?_init_adc 0070                       _InitApp 0227  
              ??_setFuzzState 007D               __size_of___lmul 002F                       __ptext1 0021  
                     __ptext2 00C8                       __ptext3 0238                       __ptext4 0123  
                     __ptext5 0157                       __ptext6 0261                       __ptext7 018B  
                     __ptext8 01EE                       __ptext9 01BF             __end_of_initBoost 0267  
                   _T2CONbits 001C                  __size_of_isr 0009                       _fuzz_up 0045  
      __size_of_setBoostState 0034                       _wait_ms 01EE                       clrloop0 0256  
         setFuzzState@f_state 003A          end_of_initialization 001E                    ??_initFuzz 007D  
                     init_ram 025B                    ??_init_adc 0071                       initloop 025C  
                  _fuzz_state 0030          __size_of_updateBoost 005B                   wait_ms@time 0038  
                   _PORTAbits 000C              __CFG_FOSC$INTOSC 0000                     _TRISAbits 008C  
                   _TRISCbits 008E                    _updateFuzz 0021       setFeedbackState@f_state 003A  
 __end_of_ConfigureOscillator 026C                 _setBoostState 018B                __end_of___lmul 01EE  
         start_initialization 000E                   __end_of_isr 000D          __end_of_setFuzzState 0157  
              ?_setBoostState 003A                      ??___lmul 0079                   __pdataBANK0 0041  
        setBoostState@f_state 003A     __size_of_setFeedbackState 0034                     ___latbits 0000  
               __pcstackBANK0 0038                   ?_updateFuzz 003C                      ?_InitApp 0070  
           __size_of_initFuzz 000B             __size_of_init_adc 000A                     _initBoost 0261  
                    ?_wait_ms 0038                      _LATAbits 010C               ??_setBoostState 007D  
                    _LATCbits 010E                     clear_ram0 0255                     _fuzz_down 002C  
                    _PIR1bits 0011           __size_of_updateFuzz 00A7                    _ADCON0bits 009D  
                  _ADCON1bits 009E         __size_of_setFuzzState 0034                   _boost_state 0028  
                  ?_initBoost 0070             ___lmul@multiplier 0071                 ??_updateBoost 003E  
            __size_of_InitApp 0011                  _setFuzzState 0123                    _ANSELAbits 018C  
            _setFeedbackState 0157                      __ptext10 0227                      __ptext11 0243  
                    __ptext12 0267              __size_of_wait_ms 0028                      _boost_up 0041  
                _fuzz_pressed 002E                      _initFuzz 0238                      _init_adc 0243  
               __size_of_main 0011  __size_of_ConfigureOscillator 0005                      int$flags 007E  
             _fuzz_turning_on 0034           __end_of_updateBoost 0123              _last_boost_state 0036  
                  _INTCONbits 000B                  ??_updateFuzz 003E                   ??_initBoost 007D  
                    intlevel1 0000                    _PMCON1bits 0195             __CFG_CLKOUTEN$OFF 0000  
                 _fuzz_toggle 0032                    _OSCCONbits 0099            __end_of_updateFuzz 00C8  
                wait_ms@timel 0020                   _updateBoost 00C8  
