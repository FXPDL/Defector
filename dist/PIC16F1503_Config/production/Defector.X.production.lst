

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Aug 03 17:35:40 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000E                     	;# 
    41  0011                     	;# 
    42  0012                     	;# 
    43  0013                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0016                     	;# 
    47  0017                     	;# 
    48  0018                     	;# 
    49  0019                     	;# 
    50  001A                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  008C                     	;# 
    54  008E                     	;# 
    55  0091                     	;# 
    56  0092                     	;# 
    57  0093                     	;# 
    58  0095                     	;# 
    59  0096                     	;# 
    60  0097                     	;# 
    61  0099                     	;# 
    62  009A                     	;# 
    63  009B                     	;# 
    64  009B                     	;# 
    65  009C                     	;# 
    66  009D                     	;# 
    67  009E                     	;# 
    68  009F                     	;# 
    69  010C                     	;# 
    70  010E                     	;# 
    71  0111                     	;# 
    72  0112                     	;# 
    73  0113                     	;# 
    74  0114                     	;# 
    75  0115                     	;# 
    76  0116                     	;# 
    77  0117                     	;# 
    78  0118                     	;# 
    79  0119                     	;# 
    80  011D                     	;# 
    81  018C                     	;# 
    82  018E                     	;# 
    83  0191                     	;# 
    84  0191                     	;# 
    85  0192                     	;# 
    86  0193                     	;# 
    87  0193                     	;# 
    88  0194                     	;# 
    89  0195                     	;# 
    90  0196                     	;# 
    91  0197                     	;# 
    92  020C                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0391                     	;# 
   109  0392                     	;# 
   110  0393                     	;# 
   111  0498                     	;# 
   112  0498                     	;# 
   113  0499                     	;# 
   114  049A                     	;# 
   115  049B                     	;# 
   116  049B                     	;# 
   117  049C                     	;# 
   118  049D                     	;# 
   119  049E                     	;# 
   120  049F                     	;# 
   121  0611                     	;# 
   122  0612                     	;# 
   123  0613                     	;# 
   124  0613                     	;# 
   125  0614                     	;# 
   126  0615                     	;# 
   127  0616                     	;# 
   128  0616                     	;# 
   129  0617                     	;# 
   130  0618                     	;# 
   131  0619                     	;# 
   132  0619                     	;# 
   133  061A                     	;# 
   134  061B                     	;# 
   135  061C                     	;# 
   136  061C                     	;# 
   137  0691                     	;# 
   138  0692                     	;# 
   139  0693                     	;# 
   140  0694                     	;# 
   141  0695                     	;# 
   142  0F0F                     	;# 
   143  0F10                     	;# 
   144  0F11                     	;# 
   145  0F12                     	;# 
   146  0F13                     	;# 
   147  0F14                     	;# 
   148  0F15                     	;# 
   149  0F16                     	;# 
   150  0F17                     	;# 
   151  0F18                     	;# 
   152  0F19                     	;# 
   153  0F1A                     	;# 
   154  0F1B                     	;# 
   155  0F1C                     	;# 
   156  0F1D                     	;# 
   157  0F1E                     	;# 
   158  0F1F                     	;# 
   159  0FE3                     	;# 
   160  0FE4                     	;# 
   161  0FE5                     	;# 
   162  0FE6                     	;# 
   163  0FE7                     	;# 
   164  0FE8                     	;# 
   165  0FE9                     	;# 
   166  0FEA                     	;# 
   167  0FEB                     	;# 
   168  0FED                     	;# 
   169  0FEE                     	;# 
   170  0FEF                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000E                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  008C                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010E                     	;# 
   215  0111                     	;# 
   216  0112                     	;# 
   217  0113                     	;# 
   218  0114                     	;# 
   219  0115                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0118                     	;# 
   223  0119                     	;# 
   224  011D                     	;# 
   225  018C                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0197                     	;# 
   236  020C                     	;# 
   237  0211                     	;# 
   238  0211                     	;# 
   239  0212                     	;# 
   240  0212                     	;# 
   241  0213                     	;# 
   242  0213                     	;# 
   243  0214                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0498                     	;# 
   256  0498                     	;# 
   257  0499                     	;# 
   258  049A                     	;# 
   259  049B                     	;# 
   260  049B                     	;# 
   261  049C                     	;# 
   262  049D                     	;# 
   263  049E                     	;# 
   264  049F                     	;# 
   265  0611                     	;# 
   266  0612                     	;# 
   267  0613                     	;# 
   268  0613                     	;# 
   269  0614                     	;# 
   270  0615                     	;# 
   271  0616                     	;# 
   272  0616                     	;# 
   273  0617                     	;# 
   274  0618                     	;# 
   275  0619                     	;# 
   276  0619                     	;# 
   277  061A                     	;# 
   278  061B                     	;# 
   279  061C                     	;# 
   280  061C                     	;# 
   281  0691                     	;# 
   282  0692                     	;# 
   283  0693                     	;# 
   284  0694                     	;# 
   285  0695                     	;# 
   286  0F0F                     	;# 
   287  0F10                     	;# 
   288  0F11                     	;# 
   289  0F12                     	;# 
   290  0F13                     	;# 
   291  0F14                     	;# 
   292  0F15                     	;# 
   293  0F16                     	;# 
   294  0F17                     	;# 
   295  0F18                     	;# 
   296  0F19                     	;# 
   297  0F1A                     	;# 
   298  0F1B                     	;# 
   299  0F1C                     	;# 
   300  0F1D                     	;# 
   301  0F1E                     	;# 
   302  0F1F                     	;# 
   303  0FE3                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000E                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  008C                     	;# 
   342  008E                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0099                     	;# 
   350  009A                     	;# 
   351  009B                     	;# 
   352  009B                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  009F                     	;# 
   357  010C                     	;# 
   358  010E                     	;# 
   359  0111                     	;# 
   360  0112                     	;# 
   361  0113                     	;# 
   362  0114                     	;# 
   363  0115                     	;# 
   364  0116                     	;# 
   365  0117                     	;# 
   366  0118                     	;# 
   367  0119                     	;# 
   368  011D                     	;# 
   369  018C                     	;# 
   370  018E                     	;# 
   371  0191                     	;# 
   372  0191                     	;# 
   373  0192                     	;# 
   374  0193                     	;# 
   375  0193                     	;# 
   376  0194                     	;# 
   377  0195                     	;# 
   378  0196                     	;# 
   379  0197                     	;# 
   380  020C                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0216                     	;# 
   393  0216                     	;# 
   394  0217                     	;# 
   395  0217                     	;# 
   396  0391                     	;# 
   397  0392                     	;# 
   398  0393                     	;# 
   399  0498                     	;# 
   400  0498                     	;# 
   401  0499                     	;# 
   402  049A                     	;# 
   403  049B                     	;# 
   404  049B                     	;# 
   405  049C                     	;# 
   406  049D                     	;# 
   407  049E                     	;# 
   408  049F                     	;# 
   409  0611                     	;# 
   410  0612                     	;# 
   411  0613                     	;# 
   412  0613                     	;# 
   413  0614                     	;# 
   414  0615                     	;# 
   415  0616                     	;# 
   416  0616                     	;# 
   417  0617                     	;# 
   418  0618                     	;# 
   419  0619                     	;# 
   420  0619                     	;# 
   421  061A                     	;# 
   422  061B                     	;# 
   423  061C                     	;# 
   424  061C                     	;# 
   425  0691                     	;# 
   426  0692                     	;# 
   427  0693                     	;# 
   428  0694                     	;# 
   429  0695                     	;# 
   430  0F0F                     	;# 
   431  0F10                     	;# 
   432  0F11                     	;# 
   433  0F12                     	;# 
   434  0F13                     	;# 
   435  0F14                     	;# 
   436  0F15                     	;# 
   437  0F16                     	;# 
   438  0F17                     	;# 
   439  0F18                     	;# 
   440  0F19                     	;# 
   441  0F1A                     	;# 
   442  0F1B                     	;# 
   443  0F1C                     	;# 
   444  0F1D                     	;# 
   445  0F1E                     	;# 
   446  0F1F                     	;# 
   447  0FE3                     	;# 
   448  0FE4                     	;# 
   449  0FE5                     	;# 
   450  0FE6                     	;# 
   451  0FE7                     	;# 
   452  0FE8                     	;# 
   453  0FE9                     	;# 
   454  0FEA                     	;# 
   455  0FEB                     	;# 
   456  0FED                     	;# 
   457  0FEE                     	;# 
   458  0FEF                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0008                     	;# 
   468  0009                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000E                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0015                     	;# 
   477  0016                     	;# 
   478  0016                     	;# 
   479  0017                     	;# 
   480  0018                     	;# 
   481  0019                     	;# 
   482  001A                     	;# 
   483  001B                     	;# 
   484  001C                     	;# 
   485  008C                     	;# 
   486  008E                     	;# 
   487  0091                     	;# 
   488  0092                     	;# 
   489  0093                     	;# 
   490  0095                     	;# 
   491  0096                     	;# 
   492  0097                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009B                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  009F                     	;# 
   501  010C                     	;# 
   502  010E                     	;# 
   503  0111                     	;# 
   504  0112                     	;# 
   505  0113                     	;# 
   506  0114                     	;# 
   507  0115                     	;# 
   508  0116                     	;# 
   509  0117                     	;# 
   510  0118                     	;# 
   511  0119                     	;# 
   512  011D                     	;# 
   513  018C                     	;# 
   514  018E                     	;# 
   515  0191                     	;# 
   516  0191                     	;# 
   517  0192                     	;# 
   518  0193                     	;# 
   519  0193                     	;# 
   520  0194                     	;# 
   521  0195                     	;# 
   522  0196                     	;# 
   523  0197                     	;# 
   524  020C                     	;# 
   525  0211                     	;# 
   526  0211                     	;# 
   527  0212                     	;# 
   528  0212                     	;# 
   529  0213                     	;# 
   530  0213                     	;# 
   531  0214                     	;# 
   532  0214                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0216                     	;# 
   537  0216                     	;# 
   538  0217                     	;# 
   539  0217                     	;# 
   540  0391                     	;# 
   541  0392                     	;# 
   542  0393                     	;# 
   543  0498                     	;# 
   544  0498                     	;# 
   545  0499                     	;# 
   546  049A                     	;# 
   547  049B                     	;# 
   548  049B                     	;# 
   549  049C                     	;# 
   550  049D                     	;# 
   551  049E                     	;# 
   552  049F                     	;# 
   553  0611                     	;# 
   554  0612                     	;# 
   555  0613                     	;# 
   556  0613                     	;# 
   557  0614                     	;# 
   558  0615                     	;# 
   559  0616                     	;# 
   560  0616                     	;# 
   561  0617                     	;# 
   562  0618                     	;# 
   563  0619                     	;# 
   564  0619                     	;# 
   565  061A                     	;# 
   566  061B                     	;# 
   567  061C                     	;# 
   568  061C                     	;# 
   569  0691                     	;# 
   570  0692                     	;# 
   571  0693                     	;# 
   572  0694                     	;# 
   573  0695                     	;# 
   574  0F0F                     	;# 
   575  0F10                     	;# 
   576  0F11                     	;# 
   577  0F12                     	;# 
   578  0F13                     	;# 
   579  0F14                     	;# 
   580  0F15                     	;# 
   581  0F16                     	;# 
   582  0F17                     	;# 
   583  0F18                     	;# 
   584  0F19                     	;# 
   585  0F1A                     	;# 
   586  0F1B                     	;# 
   587  0F1C                     	;# 
   588  0F1D                     	;# 
   589  0F1E                     	;# 
   590  0F1F                     	;# 
   591  0FE3                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000E                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0013                     	;# 
   620  0015                     	;# 
   621  0016                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001C                     	;# 
   629  008C                     	;# 
   630  008E                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0093                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  009F                     	;# 
   645  010C                     	;# 
   646  010E                     	;# 
   647  0111                     	;# 
   648  0112                     	;# 
   649  0113                     	;# 
   650  0114                     	;# 
   651  0115                     	;# 
   652  0116                     	;# 
   653  0117                     	;# 
   654  0118                     	;# 
   655  0119                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018E                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0197                     	;# 
   668  020C                     	;# 
   669  0211                     	;# 
   670  0211                     	;# 
   671  0212                     	;# 
   672  0212                     	;# 
   673  0213                     	;# 
   674  0213                     	;# 
   675  0214                     	;# 
   676  0214                     	;# 
   677  0215                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0216                     	;# 
   681  0216                     	;# 
   682  0217                     	;# 
   683  0217                     	;# 
   684  0391                     	;# 
   685  0392                     	;# 
   686  0393                     	;# 
   687  0498                     	;# 
   688  0498                     	;# 
   689  0499                     	;# 
   690  049A                     	;# 
   691  049B                     	;# 
   692  049B                     	;# 
   693  049C                     	;# 
   694  049D                     	;# 
   695  049E                     	;# 
   696  049F                     	;# 
   697  0611                     	;# 
   698  0612                     	;# 
   699  0613                     	;# 
   700  0613                     	;# 
   701  0614                     	;# 
   702  0615                     	;# 
   703  0616                     	;# 
   704  0616                     	;# 
   705  0617                     	;# 
   706  0618                     	;# 
   707  0619                     	;# 
   708  0619                     	;# 
   709  061A                     	;# 
   710  061B                     	;# 
   711  061C                     	;# 
   712  061C                     	;# 
   713  0691                     	;# 
   714  0692                     	;# 
   715  0693                     	;# 
   716  0694                     	;# 
   717  0695                     	;# 
   718  0F0F                     	;# 
   719  0F10                     	;# 
   720  0F11                     	;# 
   721  0F12                     	;# 
   722  0F13                     	;# 
   723  0F14                     	;# 
   724  0F15                     	;# 
   725  0F16                     	;# 
   726  0F17                     	;# 
   727  0F18                     	;# 
   728  0F19                     	;# 
   729  0F1A                     	;# 
   730  0F1B                     	;# 
   731  0F1C                     	;# 
   732  0F1D                     	;# 
   733  0F1E                     	;# 
   734  0F1F                     	;# 
   735  0FE3                     	;# 
   736  0FE4                     	;# 
   737  0FE5                     	;# 
   738  0FE6                     	;# 
   739  0FE7                     	;# 
   740  0FE8                     	;# 
   741  0FE9                     	;# 
   742  0FEA                     	;# 
   743  0FEB                     	;# 
   744  0FED                     	;# 
   745  0FEE                     	;# 
   746  0FEF                     	;# 
   747  0000                     	;# 
   748  0001                     	;# 
   749  0002                     	;# 
   750  0003                     	;# 
   751  0004                     	;# 
   752  0005                     	;# 
   753  0006                     	;# 
   754  0007                     	;# 
   755  0008                     	;# 
   756  0009                     	;# 
   757  000A                     	;# 
   758  000B                     	;# 
   759  000C                     	;# 
   760  000E                     	;# 
   761  0011                     	;# 
   762  0012                     	;# 
   763  0013                     	;# 
   764  0015                     	;# 
   765  0016                     	;# 
   766  0016                     	;# 
   767  0017                     	;# 
   768  0018                     	;# 
   769  0019                     	;# 
   770  001A                     	;# 
   771  001B                     	;# 
   772  001C                     	;# 
   773  008C                     	;# 
   774  008E                     	;# 
   775  0091                     	;# 
   776  0092                     	;# 
   777  0093                     	;# 
   778  0095                     	;# 
   779  0096                     	;# 
   780  0097                     	;# 
   781  0099                     	;# 
   782  009A                     	;# 
   783  009B                     	;# 
   784  009B                     	;# 
   785  009C                     	;# 
   786  009D                     	;# 
   787  009E                     	;# 
   788  009F                     	;# 
   789  010C                     	;# 
   790  010E                     	;# 
   791  0111                     	;# 
   792  0112                     	;# 
   793  0113                     	;# 
   794  0114                     	;# 
   795  0115                     	;# 
   796  0116                     	;# 
   797  0117                     	;# 
   798  0118                     	;# 
   799  0119                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  018E                     	;# 
   803  0191                     	;# 
   804  0191                     	;# 
   805  0192                     	;# 
   806  0193                     	;# 
   807  0193                     	;# 
   808  0194                     	;# 
   809  0195                     	;# 
   810  0196                     	;# 
   811  0197                     	;# 
   812  020C                     	;# 
   813  0211                     	;# 
   814  0211                     	;# 
   815  0212                     	;# 
   816  0212                     	;# 
   817  0213                     	;# 
   818  0213                     	;# 
   819  0214                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0216                     	;# 
   825  0216                     	;# 
   826  0217                     	;# 
   827  0217                     	;# 
   828  0391                     	;# 
   829  0392                     	;# 
   830  0393                     	;# 
   831  0498                     	;# 
   832  0498                     	;# 
   833  0499                     	;# 
   834  049A                     	;# 
   835  049B                     	;# 
   836  049B                     	;# 
   837  049C                     	;# 
   838  049D                     	;# 
   839  049E                     	;# 
   840  049F                     	;# 
   841  0611                     	;# 
   842  0612                     	;# 
   843  0613                     	;# 
   844  0613                     	;# 
   845  0614                     	;# 
   846  0615                     	;# 
   847  0616                     	;# 
   848  0616                     	;# 
   849  0617                     	;# 
   850  0618                     	;# 
   851  0619                     	;# 
   852  0619                     	;# 
   853  061A                     	;# 
   854  061B                     	;# 
   855  061C                     	;# 
   856  061C                     	;# 
   857  0691                     	;# 
   858  0692                     	;# 
   859  0693                     	;# 
   860  0694                     	;# 
   861  0695                     	;# 
   862  0F0F                     	;# 
   863  0F10                     	;# 
   864  0F11                     	;# 
   865  0F12                     	;# 
   866  0F13                     	;# 
   867  0F14                     	;# 
   868  0F15                     	;# 
   869  0F16                     	;# 
   870  0F17                     	;# 
   871  0F18                     	;# 
   872  0F19                     	;# 
   873  0F1A                     	;# 
   874  0F1B                     	;# 
   875  0F1C                     	;# 
   876  0F1D                     	;# 
   877  0F1E                     	;# 
   878  0F1F                     	;# 
   879  0FE3                     	;# 
   880  0FE4                     	;# 
   881  0FE5                     	;# 
   882  0FE6                     	;# 
   883  0FE7                     	;# 
   884  0FE8                     	;# 
   885  0FE9                     	;# 
   886  0FEA                     	;# 
   887  0FEB                     	;# 
   888  0FED                     	;# 
   889  0FEE                     	;# 
   890  0FEF                     	;# 
   891  0000                     	;# 
   892  0001                     	;# 
   893  0002                     	;# 
   894  0003                     	;# 
   895  0004                     	;# 
   896  0005                     	;# 
   897  0006                     	;# 
   898  0007                     	;# 
   899  0008                     	;# 
   900  0009                     	;# 
   901  000A                     	;# 
   902  000B                     	;# 
   903  000C                     	;# 
   904  000E                     	;# 
   905  0011                     	;# 
   906  0012                     	;# 
   907  0013                     	;# 
   908  0015                     	;# 
   909  0016                     	;# 
   910  0016                     	;# 
   911  0017                     	;# 
   912  0018                     	;# 
   913  0019                     	;# 
   914  001A                     	;# 
   915  001B                     	;# 
   916  001C                     	;# 
   917  008C                     	;# 
   918  008E                     	;# 
   919  0091                     	;# 
   920  0092                     	;# 
   921  0093                     	;# 
   922  0095                     	;# 
   923  0096                     	;# 
   924  0097                     	;# 
   925  0099                     	;# 
   926  009A                     	;# 
   927  009B                     	;# 
   928  009B                     	;# 
   929  009C                     	;# 
   930  009D                     	;# 
   931  009E                     	;# 
   932  009F                     	;# 
   933  010C                     	;# 
   934  010E                     	;# 
   935  0111                     	;# 
   936  0112                     	;# 
   937  0113                     	;# 
   938  0114                     	;# 
   939  0115                     	;# 
   940  0116                     	;# 
   941  0117                     	;# 
   942  0118                     	;# 
   943  0119                     	;# 
   944  011D                     	;# 
   945  018C                     	;# 
   946  018E                     	;# 
   947  0191                     	;# 
   948  0191                     	;# 
   949  0192                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0194                     	;# 
   953  0195                     	;# 
   954  0196                     	;# 
   955  0197                     	;# 
   956  020C                     	;# 
   957  0211                     	;# 
   958  0211                     	;# 
   959  0212                     	;# 
   960  0212                     	;# 
   961  0213                     	;# 
   962  0213                     	;# 
   963  0214                     	;# 
   964  0214                     	;# 
   965  0215                     	;# 
   966  0215                     	;# 
   967  0215                     	;# 
   968  0216                     	;# 
   969  0216                     	;# 
   970  0217                     	;# 
   971  0217                     	;# 
   972  0391                     	;# 
   973  0392                     	;# 
   974  0393                     	;# 
   975  0498                     	;# 
   976  0498                     	;# 
   977  0499                     	;# 
   978  049A                     	;# 
   979  049B                     	;# 
   980  049B                     	;# 
   981  049C                     	;# 
   982  049D                     	;# 
   983  049E                     	;# 
   984  049F                     	;# 
   985  0611                     	;# 
   986  0612                     	;# 
   987  0613                     	;# 
   988  0613                     	;# 
   989  0614                     	;# 
   990  0615                     	;# 
   991  0616                     	;# 
   992  0616                     	;# 
   993  0617                     	;# 
   994  0618                     	;# 
   995  0619                     	;# 
   996  0619                     	;# 
   997  061A                     	;# 
   998  061B                     	;# 
   999  061C                     	;# 
  1000  061C                     	;# 
  1001  0691                     	;# 
  1002  0692                     	;# 
  1003  0693                     	;# 
  1004  0694                     	;# 
  1005  0695                     	;# 
  1006  0F0F                     	;# 
  1007  0F10                     	;# 
  1008  0F11                     	;# 
  1009  0F12                     	;# 
  1010  0F13                     	;# 
  1011  0F14                     	;# 
  1012  0F15                     	;# 
  1013  0F16                     	;# 
  1014  0F17                     	;# 
  1015  0F18                     	;# 
  1016  0F19                     	;# 
  1017  0F1A                     	;# 
  1018  0F1B                     	;# 
  1019  0F1C                     	;# 
  1020  0F1D                     	;# 
  1021  0F1E                     	;# 
  1022  0F1F                     	;# 
  1023  0FE3                     	;# 
  1024  0FE4                     	;# 
  1025  0FE5                     	;# 
  1026  0FE6                     	;# 
  1027  0FE7                     	;# 
  1028  0FE8                     	;# 
  1029  0FE9                     	;# 
  1030  0FEA                     	;# 
  1031  0FEB                     	;# 
  1032  0FED                     	;# 
  1033  0FEE                     	;# 
  1034  0FEF                     	;# 
  1035  0000                     	;# 
  1036  0001                     	;# 
  1037  0002                     	;# 
  1038  0003                     	;# 
  1039  0004                     	;# 
  1040  0005                     	;# 
  1041  0006                     	;# 
  1042  0007                     	;# 
  1043  0008                     	;# 
  1044  0009                     	;# 
  1045  000A                     	;# 
  1046  000B                     	;# 
  1047  000C                     	;# 
  1048  000E                     	;# 
  1049  0011                     	;# 
  1050  0012                     	;# 
  1051  0013                     	;# 
  1052  0015                     	;# 
  1053  0016                     	;# 
  1054  0016                     	;# 
  1055  0017                     	;# 
  1056  0018                     	;# 
  1057  0019                     	;# 
  1058  001A                     	;# 
  1059  001B                     	;# 
  1060  001C                     	;# 
  1061  008C                     	;# 
  1062  008E                     	;# 
  1063  0091                     	;# 
  1064  0092                     	;# 
  1065  0093                     	;# 
  1066  0095                     	;# 
  1067  0096                     	;# 
  1068  0097                     	;# 
  1069  0099                     	;# 
  1070  009A                     	;# 
  1071  009B                     	;# 
  1072  009B                     	;# 
  1073  009C                     	;# 
  1074  009D                     	;# 
  1075  009E                     	;# 
  1076  009F                     	;# 
  1077  010C                     	;# 
  1078  010E                     	;# 
  1079  0111                     	;# 
  1080  0112                     	;# 
  1081  0113                     	;# 
  1082  0114                     	;# 
  1083  0115                     	;# 
  1084  0116                     	;# 
  1085  0117                     	;# 
  1086  0118                     	;# 
  1087  0119                     	;# 
  1088  011D                     	;# 
  1089  018C                     	;# 
  1090  018E                     	;# 
  1091  0191                     	;# 
  1092  0191                     	;# 
  1093  0192                     	;# 
  1094  0193                     	;# 
  1095  0193                     	;# 
  1096  0194                     	;# 
  1097  0195                     	;# 
  1098  0196                     	;# 
  1099  0197                     	;# 
  1100  020C                     	;# 
  1101  0211                     	;# 
  1102  0211                     	;# 
  1103  0212                     	;# 
  1104  0212                     	;# 
  1105  0213                     	;# 
  1106  0213                     	;# 
  1107  0214                     	;# 
  1108  0214                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0216                     	;# 
  1113  0216                     	;# 
  1114  0217                     	;# 
  1115  0217                     	;# 
  1116  0391                     	;# 
  1117  0392                     	;# 
  1118  0393                     	;# 
  1119  0498                     	;# 
  1120  0498                     	;# 
  1121  0499                     	;# 
  1122  049A                     	;# 
  1123  049B                     	;# 
  1124  049B                     	;# 
  1125  049C                     	;# 
  1126  049D                     	;# 
  1127  049E                     	;# 
  1128  049F                     	;# 
  1129  0611                     	;# 
  1130  0612                     	;# 
  1131  0613                     	;# 
  1132  0613                     	;# 
  1133  0614                     	;# 
  1134  0615                     	;# 
  1135  0616                     	;# 
  1136  0616                     	;# 
  1137  0617                     	;# 
  1138  0618                     	;# 
  1139  0619                     	;# 
  1140  0619                     	;# 
  1141  061A                     	;# 
  1142  061B                     	;# 
  1143  061C                     	;# 
  1144  061C                     	;# 
  1145  0691                     	;# 
  1146  0692                     	;# 
  1147  0693                     	;# 
  1148  0694                     	;# 
  1149  0695                     	;# 
  1150  0F0F                     	;# 
  1151  0F10                     	;# 
  1152  0F11                     	;# 
  1153  0F12                     	;# 
  1154  0F13                     	;# 
  1155  0F14                     	;# 
  1156  0F15                     	;# 
  1157  0F16                     	;# 
  1158  0F17                     	;# 
  1159  0F18                     	;# 
  1160  0F19                     	;# 
  1161  0F1A                     	;# 
  1162  0F1B                     	;# 
  1163  0F1C                     	;# 
  1164  0F1D                     	;# 
  1165  0F1E                     	;# 
  1166  0F1F                     	;# 
  1167  0FE3                     	;# 
  1168  0FE4                     	;# 
  1169  0FE5                     	;# 
  1170  0FE6                     	;# 
  1171  0FE7                     	;# 
  1172  0FE8                     	;# 
  1173  0FE9                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEF                     	;# 
  1179                           
  1180                           	psect	idataBANK0
  1181  023C                     __pidataBANK0:	
  1182                           
  1183                           ;initializer for _boost_state
  1184  023C  34FF               	retlw	255
  1185  023D  34FF               	retlw	255
  1186                           
  1187                           ;initializer for _boost_up
  1188  023E  3401               	retlw	1
  1189  023F  3400               	retlw	0
  1190                           
  1191                           ;initializer for _debounce_limit
  1192  0240  3419               	retlw	25
  1193  0241  3400               	retlw	0
  1194                           
  1195                           ;initializer for _feedback_state
  1196  0242  34FF               	retlw	255
  1197  0243  34FF               	retlw	255
  1198                           
  1199                           ;initializer for _fuzz_state
  1200  0244  34FF               	retlw	255
  1201  0245  34FF               	retlw	255
  1202                           
  1203                           ;initializer for _fuzz_up
  1204  0246  3401               	retlw	1
  1205  0247  3400               	retlw	0
  1206                           
  1207                           ;initializer for _long_press_limit
  1208  0248  3400               	retlw	0
  1209  0249  342D               	retlw	45
  1210  000B                     _INTCONbits	set	11
  1211  0011                     _PIR1bits	set	17
  1212  000C                     _PORTAbits	set	12
  1213  001C                     _T2CONbits	set	28
  1214  009D                     _ADCON0bits	set	157
  1215  009E                     _ADCON1bits	set	158
  1216  009C                     _ADRESH	set	156
  1217  009B                     _ADRESL	set	155
  1218  0099                     _OSCCONbits	set	153
  1219  009A                     _OSCSTAT	set	154
  1220  008C                     _TRISAbits	set	140
  1221  008E                     _TRISCbits	set	142
  1222  010C                     _LATAbits	set	268
  1223  010E                     _LATCbits	set	270
  1224  018C                     _ANSELAbits	set	396
  1225  0192                     _PMADRH	set	402
  1226  0191                     _PMADRL	set	401
  1227  0195                     _PMCON1bits	set	405
  1228  0196                     _PMCON2	set	406
  1229  0194                     _PMDATH	set	404
  1230  0193                     _PMDATL	set	403
  1231                           
  1232                           ; #config settings
  1233  0000                     
  1234                           	psect	cinit
  1235  000E                     start_initialization:	
  1236  000E                     __initialization:	
  1237                           
  1238                           ; Clear objects allocated to BANK0
  1239  000E  3020               	movlw	low __pbssBANK0
  1240  000F  0084               	movwf	4
  1241  0010  3000               	movlw	high __pbssBANK0
  1242  0011  0085               	movwf	5
  1243  0012  3012               	movlw	18
  1244  0013  225F               	fcall	clear_ram0
  1245                           
  1246                           ; Initialize objects allocated to BANK0
  1247  0014  303C               	movlw	low __pidataBANK0
  1248  0015  0084               	movwf	4
  1249  0016  3082               	movlw	(high __pidataBANK0)| (0+128)
  1250  0017  0085               	movwf	5
  1251  0018  3032               	movlw	low __pdataBANK0
  1252  0019  0086               	movwf	6
  1253  001A  3000               	movlw	high __pdataBANK0
  1254  001B  0087               	movwf	7
  1255  001C  300E               	movlw	14
  1256  001D  2265               	fcall	init_ram
  1257  001E                     end_of_initialization:	
  1258                           ;End of C runtime variable initialization code
  1259                           
  1260  001E                     __end_of__initialization:	
  1261  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1262  001F  0020               	movlb	0
  1263  0020  2A2B               	ljmp	_main	;jump to C main() function
  1264                           
  1265                           	psect	bssBANK0
  1266  0020                     __pbssBANK0:	
  1267  0020                     wait_ms@timel:	
  1268  0020                     	ds	4
  1269  0024                     _boost_down:	
  1270  0024                     	ds	2
  1271  0026                     _boost_pressed:	
  1272  0026                     	ds	2
  1273  0028                     _fuzz_down:	
  1274  0028                     	ds	2
  1275  002A                     _fuzz_pressed:	
  1276  002A                     	ds	2
  1277  002C                     _fuzz_toggle:	
  1278  002C                     	ds	2
  1279  002E                     _fuzz_turning_on:	
  1280  002E                     	ds	2
  1281  0030                     _last_boost_state:	
  1282  0030                     	ds	2
  1283                           
  1284                           	psect	dataBANK0
  1285  0032                     __pdataBANK0:	
  1286  0032                     _boost_state:	
  1287  0032                     	ds	2
  1288  0034                     _boost_up:	
  1289  0034                     	ds	2
  1290  0036                     _debounce_limit:	
  1291  0036                     	ds	2
  1292  0038                     _feedback_state:	
  1293  0038                     	ds	2
  1294  003A                     _fuzz_state:	
  1295  003A                     	ds	2
  1296  003C                     _fuzz_up:	
  1297  003C                     	ds	2
  1298  003E                     _long_press_limit:	
  1299  003E                     	ds	2
  1300                           
  1301                           	psect	clrtext
  1302  025F                     clear_ram0:	
  1303                           ;	Called with FSR0 containing the base address, and
  1304                           ;	WREG with the size to clear
  1305                           
  1306  025F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1307  0260                     clrloop0:	
  1308  0260  0180               	clrf	0	;clear RAM location pointed to by FSR
  1309  0261  3101               	addfsr 0,1
  1310  0262  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1311  0263  2A60               	goto	clrloop0	;have we reached the end yet?
  1312  0264  3400               	retlw	0	;all done for this memory range, return
  1313                           
  1314                           	psect	inittext
  1315  0265                     init_ram:	
  1316  0265  00FE               	movwf	126
  1317  0266                     initloop:	
  1318  0266  0012               	moviw fsr0++
  1319  0267  001E               	movwi fsr1++
  1320  0268  0BFE               	decfsz	126,f
  1321  0269  2A66               	goto	initloop
  1322  026A  3400               	retlw	0
  1323                           
  1324                           	psect	cstackCOMMON
  1325  0070                     __pcstackCOMMON:	
  1326  0070                     ?_ConfigureOscillator:	
  1327  0070                     ?_InitApp:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0070                     ?_initFuzz:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0070                     ?_initBoost:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  0070                     ?_init_adc:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  0070                     ?_isr:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0070                     ??_isr:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0070                     ?_main:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348                           
  1349                           ; 1 bytes @ 0x0
  1350  0070                     	ds	1
  1351  0071                     ??_ConfigureOscillator:	
  1352  0071                     ??_InitApp:	
  1353                           ; 1 bytes @ 0x1
  1354                           
  1355  0071                     ??_init_adc:	
  1356                           ; 1 bytes @ 0x1
  1357                           
  1358  0071                     ?___lmul:	
  1359                           ; 1 bytes @ 0x1
  1360                           
  1361  0071                     ___lmul@multiplier:	
  1362                           ; 4 bytes @ 0x1
  1363                           
  1364                           
  1365                           ; 4 bytes @ 0x1
  1366  0071                     	ds	4
  1367  0075                     ___lmul@multiplicand:	
  1368                           
  1369                           ; 4 bytes @ 0x5
  1370  0075                     	ds	4
  1371  0079                     ??___lmul:	
  1372  0079                     ___lmul@product:	
  1373                           ; 1 bytes @ 0x9
  1374                           
  1375                           
  1376                           ; 4 bytes @ 0x9
  1377  0079                     	ds	4
  1378  007D                     ??_initFuzz:	
  1379  007D                     ??_initBoost:	
  1380                           ; 1 bytes @ 0xD
  1381                           
  1382  007D                     ??_setFuzzState:	
  1383                           ; 1 bytes @ 0xD
  1384                           
  1385  007D                     ??_setFeedbackState:	
  1386                           ; 1 bytes @ 0xD
  1387                           
  1388  007D                     ??_setBoostState:	
  1389                           ; 1 bytes @ 0xD
  1390                           
  1391  007D                     ??_main:	
  1392                           ; 1 bytes @ 0xD
  1393                           
  1394  007D                     ??_wait_ms:	
  1395                           ; 1 bytes @ 0xD
  1396                           
  1397                           
  1398                           	psect	cstackBANK0
  1399  0040                     __pcstackBANK0:	
  1400                           ; 1 bytes @ 0xD
  1401                           
  1402  0040                     ?_wait_ms:	
  1403  0040                     wait_ms@time:	
  1404                           ; 1 bytes @ 0x0
  1405                           
  1406                           
  1407                           ; 2 bytes @ 0x0
  1408  0040                     	ds	2
  1409  0042                     ?_setFuzzState:	
  1410  0042                     ?_setFeedbackState:	
  1411                           ; 1 bytes @ 0x2
  1412                           
  1413  0042                     ?_setBoostState:	
  1414                           ; 1 bytes @ 0x2
  1415                           
  1416  0042                     setFuzzState@f_state:	
  1417                           ; 1 bytes @ 0x2
  1418                           
  1419  0042                     setFeedbackState@f_state:	
  1420                           ; 2 bytes @ 0x2
  1421                           
  1422  0042                     setBoostState@f_state:	
  1423                           ; 2 bytes @ 0x2
  1424                           
  1425                           
  1426                           ; 2 bytes @ 0x2
  1427  0042                     	ds	2
  1428  0044                     ?_updateFuzz:	
  1429  0044                     ?_updateBoost:	
  1430                           ; 1 bytes @ 0x4
  1431                           
  1432  0044                     updateFuzz@debounce_limit:	
  1433                           ; 1 bytes @ 0x4
  1434                           
  1435  0044                     updateBoost@debounce_limit:	
  1436                           ; 2 bytes @ 0x4
  1437                           
  1438                           
  1439                           ; 2 bytes @ 0x4
  1440  0044                     	ds	2
  1441  0046                     ??_updateFuzz:	
  1442  0046                     ??_updateBoost:	
  1443                           ; 1 bytes @ 0x6
  1444                           
  1445                           
  1446                           ; 1 bytes @ 0x6
  1447  0046                     	ds	1
  1448  0047                     updateFuzz@fb_state:	
  1449                           
  1450                           ; 2 bytes @ 0x7
  1451  0047                     	ds	2
  1452                           
  1453                           	psect	maintext
  1454  022B                     __pmaintext:	
  1455 ;;
  1456 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1457 ;;
  1458 ;; *************** function _main *****************
  1459 ;; Defined at:
  1460 ;;		line 28 in file "main.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0, pclath, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : B1F/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMMON   BANK0   BANK1
  1474 ;;      Params:         0       0       0
  1475 ;;      Locals:         0       0       0
  1476 ;;      Temps:          0       0       0
  1477 ;;      Totals:         0       0       0
  1478 ;;Total ram usage:        0 bytes
  1479 ;; Hardware stack levels required when called:    5
  1480 ;; This function calls:
  1481 ;;		_ConfigureOscillator
  1482 ;;		_InitApp
  1483 ;;		_initBoost
  1484 ;;		_initFuzz
  1485 ;;		_updateBoost
  1486 ;;		_updateFuzz
  1487 ;; This function is called by:
  1488 ;;		Startup code after reset
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           
  1493                           ;psect for function _main
  1494  022B                     _main:	
  1495                           
  1496                           ;main.c: 29: ConfigureOscillator();
  1497                           
  1498                           ;incstack = 0
  1499                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1500  022B  2271               	fcall	_ConfigureOscillator
  1501                           
  1502                           ;main.c: 30: InitApp();
  1503  022C  2216               	fcall	_InitApp
  1504                           
  1505                           ;main.c: 32: initFuzz();
  1506  022D  224A               	fcall	_initFuzz
  1507                           
  1508                           ;main.c: 33: initBoost();
  1509  022E  226B               	fcall	_initBoost
  1510  022F                     l58:	
  1511                           ;main.c: 35: while (1) {
  1512                           
  1513                           
  1514                           ;main.c: 36: updateFuzz(debounce_limit);
  1515  022F  0020               	movlb	0	; select bank0
  1516  0230  0837               	movf	_debounce_limit+1,w
  1517  0231  00C5               	movwf	updateFuzz@debounce_limit+1
  1518  0232  0836               	movf	_debounce_limit,w
  1519  0233  00C4               	movwf	updateFuzz@debounce_limit
  1520  0234  2021               	fcall	_updateFuzz
  1521                           
  1522                           ;main.c: 37: updateBoost(debounce_limit);
  1523  0235  0020               	movlb	0	; select bank0
  1524  0236  0837               	movf	_debounce_limit+1,w
  1525  0237  00C5               	movwf	updateBoost@debounce_limit+1
  1526  0238  0836               	movf	_debounce_limit,w
  1527  0239  00C4               	movwf	updateBoost@debounce_limit
  1528  023A  20C8               	fcall	_updateBoost
  1529  023B  2A2F               	goto	l58
  1530  023C                     __end_of_main:	
  1531                           
  1532                           	psect	text1
  1533  0021                     __ptext1:	
  1534 ;; *************** function _updateFuzz *****************
  1535 ;; Defined at:
  1536 ;;		line 44 in file "mcc_generated_files/fuzz.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;  debounce_lim    2    4[BANK0 ] int 
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;  fb_state        2    7[BANK0 ] int 
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg, status,2, status,0, pclath, cstack
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1
  1550 ;;      Params:         0       2       0
  1551 ;;      Locals:         0       2       0
  1552 ;;      Temps:          0       1       0
  1553 ;;      Totals:         0       5       0
  1554 ;;Total ram usage:        5 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    4
  1557 ;; This function calls:
  1558 ;;		_setFeedbackState
  1559 ;;		_setFuzzState
  1560 ;; This function is called by:
  1561 ;;		_main
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           
  1566                           ;psect for function _updateFuzz
  1567  0021                     _updateFuzz:	
  1568                           
  1569                           ;fuzz.c: 51: if (PORTAbits.RA4 == 0) {
  1570                           
  1571                           ;incstack = 0
  1572                           ; Regs used in _updateFuzz: [wreg+status,2+status,0+pclath+cstack]
  1573  0021  0020               	movlb	0	; select bank0
  1574  0022  1A0C               	btfsc	12,4	;volatile
  1575  0023  2834               	goto	l1007
  1576                           
  1577                           ;fuzz.c: 52: if (fuzz_pressed > 0) {
  1578  0024  082B               	movf	_fuzz_pressed+1,w
  1579  0025  3A80               	xorlw	128
  1580  0026  00C6               	movwf	??_updateFuzz
  1581  0027  3080               	movlw	128
  1582  0028  0246               	subwf	??_updateFuzz,w
  1583  0029  1D03               	skipz
  1584  002A  282D               	goto	u575
  1585  002B  3001               	movlw	1
  1586  002C  022A               	subwf	_fuzz_pressed,w
  1587  002D                     u575:	
  1588  002D  1C03               	skipc
  1589  002E  2845               	goto	l1011
  1590                           
  1591                           ;fuzz.c: 53: fuzz_pressed--;
  1592  002F  30FF               	movlw	255
  1593  0030  0020               	movlb	0	; select bank0
  1594  0031  07AA               	addwf	_fuzz_pressed,f
  1595  0032  30FF               	movlw	255
  1596  0033  2844               	goto	L1
  1597  0034                     l1007:	
  1598                           ;fuzz.c: 54: }
  1599                           ;fuzz.c: 55: } else if (fuzz_pressed < debounce_limit) {
  1600                           
  1601  0034  082B               	movf	_fuzz_pressed+1,w
  1602  0035  3A80               	xorlw	128
  1603  0036  00C6               	movwf	??_updateFuzz
  1604  0037  0845               	movf	updateFuzz@debounce_limit+1,w
  1605  0038  3A80               	xorlw	128
  1606  0039  0246               	subwf	??_updateFuzz,w
  1607  003A  1D03               	skipz
  1608  003B  283E               	goto	u585
  1609  003C  0844               	movf	updateFuzz@debounce_limit,w
  1610  003D  022A               	subwf	_fuzz_pressed,w
  1611  003E                     u585:	
  1612  003E  1803               	skipnc
  1613  003F  2845               	goto	l1011
  1614                           
  1615                           ;fuzz.c: 56: fuzz_pressed++;
  1616  0040  3001               	movlw	1
  1617  0041  0020               	movlb	0	; select bank0
  1618  0042  07AA               	addwf	_fuzz_pressed,f
  1619  0043  3000               	movlw	0
  1620  0044                     L1:	
  1621  0044  3DAB               	addwfc	_fuzz_pressed+1,f
  1622  0045                     l1011:	
  1623                           
  1624                           ;fuzz.c: 58: }
  1625                           ;fuzz.c: 64: if (fuzz_pressed == 0) {
  1626  0045  0020               	movlb	0	; select bank0
  1627  0046  082A               	movf	_fuzz_pressed,w
  1628  0047  042B               	iorwf	_fuzz_pressed+1,w
  1629  0048  1D03               	btfss	3,2
  1630  0049  288F               	goto	l1041
  1631                           
  1632                           ;fuzz.c: 66: fuzz_down++;
  1633  004A  3001               	movlw	1
  1634  004B  07A8               	addwf	_fuzz_down,f
  1635  004C  3000               	movlw	0
  1636  004D  3DA9               	addwfc	_fuzz_down+1,f
  1637                           
  1638                           ;fuzz.c: 67: if (fuzz_state == 1) {
  1639  004E  033A               	decf	_fuzz_state,w
  1640  004F  043B               	iorwf	_fuzz_state+1,w
  1641  0050  1D03               	btfss	3,2
  1642  0051  287C               	goto	l1031
  1643                           
  1644                           ;fuzz.c: 68: if (fuzz_up == 1) {
  1645  0052  033C               	decf	_fuzz_up,w
  1646  0053  043D               	iorwf	_fuzz_up+1,w
  1647  0054  1D03               	btfss	3,2
  1648  0055  285A               	goto	l155
  1649                           
  1650                           ;fuzz.c: 69: fuzz_toggle = 1;
  1651  0056  3001               	movlw	1
  1652  0057  00AC               	movwf	_fuzz_toggle
  1653  0058  3000               	movlw	0
  1654  0059  00AD               	movwf	_fuzz_toggle+1
  1655  005A                     l155:	
  1656                           
  1657                           ;fuzz.c: 70: }
  1658                           ;fuzz.c: 72: if (fuzz_down >= long_press_limit && feedback_state == 0 && fuzz_turning_on
      +                           == 0) {
  1659  005A  0829               	movf	_fuzz_down+1,w
  1660  005B  3A80               	xorlw	128
  1661  005C  00C6               	movwf	??_updateFuzz
  1662  005D  083F               	movf	_long_press_limit+1,w
  1663  005E  3A80               	xorlw	128
  1664  005F  0246               	subwf	??_updateFuzz,w
  1665  0060  1D03               	skipz
  1666  0061  2864               	goto	u625
  1667  0062  083E               	movf	_long_press_limit,w
  1668  0063  0228               	subwf	_fuzz_down,w
  1669  0064                     u625:	
  1670  0064  1C03               	skipc
  1671  0065  288B               	goto	l1039
  1672  0066  0020               	movlb	0	; select bank0
  1673  0067  0838               	movf	_feedback_state,w
  1674  0068  0439               	iorwf	_feedback_state+1,w
  1675  0069  1D03               	btfss	3,2
  1676  006A  288B               	goto	l1039
  1677  006B  082E               	movf	_fuzz_turning_on,w
  1678  006C  042F               	iorwf	_fuzz_turning_on+1,w
  1679  006D  1D03               	btfss	3,2
  1680  006E  288B               	goto	l1039
  1681                           
  1682                           ;fuzz.c: 74: fuzz_down = long_press_limit;
  1683  006F  083F               	movf	_long_press_limit+1,w
  1684  0070  00A9               	movwf	_fuzz_down+1
  1685  0071  083E               	movf	_long_press_limit,w
  1686  0072  00A8               	movwf	_fuzz_down
  1687                           
  1688                           ;fuzz.c: 75: LATAbits.LATA2 = 0;
  1689  0073  0022               	movlb	2	; select bank2
  1690  0074  110C               	bcf	12,2	;volatile
  1691                           
  1692                           ;fuzz.c: 76: setFeedbackState(1);
  1693  0075  3001               	movlw	1
  1694  0076  0020               	movlb	0	; select bank0
  1695  0077  00C2               	movwf	setFeedbackState@f_state
  1696  0078  3000               	movlw	0
  1697  0079  00C3               	movwf	setFeedbackState@f_state+1
  1698  007A  2157               	fcall	_setFeedbackState
  1699                           
  1700                           ;fuzz.c: 77: }
  1701                           ;fuzz.c: 78: } else {
  1702  007B  288B               	goto	l1039
  1703  007C                     l1031:	
  1704                           
  1705                           ;fuzz.c: 80: fuzz_turning_on = 1;
  1706  007C  3001               	movlw	1
  1707  007D  0020               	movlb	0	; select bank0
  1708  007E  00AE               	movwf	_fuzz_turning_on
  1709  007F  3000               	movlw	0
  1710  0080  00AF               	movwf	_fuzz_turning_on+1
  1711                           
  1712                           ;fuzz.c: 81: fuzz_toggle = 0;
  1713  0081  01AC               	clrf	_fuzz_toggle
  1714  0082  01AD               	clrf	_fuzz_toggle+1
  1715                           
  1716                           ;fuzz.c: 82: setFuzzState(1);
  1717  0083  3001               	movlw	1
  1718  0084  00C2               	movwf	setFuzzState@f_state
  1719  0085  3000               	movlw	0
  1720  0086  00C3               	movwf	setFuzzState@f_state+1
  1721  0087  2123               	fcall	_setFuzzState
  1722                           
  1723                           ;fuzz.c: 83: feedback_state = 0;
  1724  0088  0020               	movlb	0	; select bank0
  1725  0089  01B8               	clrf	_feedback_state
  1726  008A  01B9               	clrf	_feedback_state+1
  1727  008B                     l1039:	
  1728                           
  1729                           ;fuzz.c: 84: }
  1730                           ;fuzz.c: 87: fuzz_up = 0;
  1731  008B  0020               	movlb	0	; select bank0
  1732  008C  01BC               	clrf	_fuzz_up
  1733  008D  01BD               	clrf	_fuzz_up+1
  1734                           
  1735                           ;fuzz.c: 88: } else if (fuzz_pressed >= debounce_limit) {
  1736  008E  0008               	return
  1737  008F                     l1041:	
  1738  008F  082B               	movf	_fuzz_pressed+1,w
  1739  0090  3A80               	xorlw	128
  1740  0091  00C6               	movwf	??_updateFuzz
  1741  0092  0845               	movf	updateFuzz@debounce_limit+1,w
  1742  0093  3A80               	xorlw	128
  1743  0094  0246               	subwf	??_updateFuzz,w
  1744  0095  1D03               	skipz
  1745  0096  2899               	goto	u655
  1746  0097  0844               	movf	updateFuzz@debounce_limit,w
  1747  0098  022A               	subwf	_fuzz_pressed,w
  1748  0099                     u655:	
  1749  0099  1C03               	skipc
  1750  009A  0008               	return
  1751                           
  1752                           ;fuzz.c: 89: int fb_state = feedback_state;
  1753  009B  0020               	movlb	0	; select bank0
  1754  009C  0839               	movf	_feedback_state+1,w
  1755  009D  00C8               	movwf	updateFuzz@fb_state+1
  1756  009E  0838               	movf	_feedback_state,w
  1757  009F  00C7               	movwf	updateFuzz@fb_state
  1758                           
  1759                           ;fuzz.c: 90: if (fuzz_toggle == 1 && fb_state == 0) {
  1760  00A0  032C               	decf	_fuzz_toggle,w
  1761  00A1  042D               	iorwf	_fuzz_toggle+1,w
  1762  00A2  1D03               	btfss	3,2
  1763  00A3  28AC               	goto	l1051
  1764  00A4  0847               	movf	updateFuzz@fb_state,w
  1765  00A5  0448               	iorwf	updateFuzz@fb_state+1,w
  1766  00A6  1D03               	btfss	3,2
  1767  00A7  28AC               	goto	l1051
  1768                           
  1769                           ;fuzz.c: 91: setFuzzState(0);
  1770  00A8  3000               	movlw	0
  1771  00A9  00C2               	movwf	setFuzzState@f_state
  1772  00AA  00C3               	movwf	setFuzzState@f_state+1
  1773  00AB  2123               	fcall	_setFuzzState
  1774  00AC                     l1051:	
  1775                           
  1776                           ;fuzz.c: 92: }
  1777                           ;fuzz.c: 93: LATAbits.LATA2 = fuzz_state;
  1778  00AC  0020               	movlb	0	; select bank0
  1779  00AD  0C3A               	rrf	_fuzz_state,w
  1780  00AE  0022               	movlb	2	; select bank2
  1781  00AF  1C03               	skipc
  1782  00B0  110C               	bcf	12,2	;volatile
  1783  00B1  1803               	skipnc
  1784  00B2  150C               	bsf	12,2	;volatile
  1785                           
  1786                           ;fuzz.c: 95: setFeedbackState(0);
  1787  00B3  3000               	movlw	0
  1788  00B4  0020               	movlb	0	; select bank0
  1789  00B5  00C2               	movwf	setFeedbackState@f_state
  1790  00B6  00C3               	movwf	setFeedbackState@f_state+1
  1791  00B7  2157               	fcall	_setFeedbackState
  1792                           
  1793                           ;fuzz.c: 96: fuzz_turning_on = 0;
  1794  00B8  0020               	movlb	0	; select bank0
  1795  00B9  01AE               	clrf	_fuzz_turning_on
  1796  00BA  01AF               	clrf	_fuzz_turning_on+1
  1797                           
  1798                           ;fuzz.c: 97: fuzz_toggle = 0;
  1799  00BB  01AC               	clrf	_fuzz_toggle
  1800  00BC  01AD               	clrf	_fuzz_toggle+1
  1801                           
  1802                           ;fuzz.c: 98: fuzz_up = 1;
  1803  00BD  3001               	movlw	1
  1804  00BE  00BC               	movwf	_fuzz_up
  1805  00BF  3000               	movlw	0
  1806  00C0  00BD               	movwf	_fuzz_up+1
  1807                           
  1808                           ;fuzz.c: 99: fuzz_down = 0;
  1809  00C1  01A8               	clrf	_fuzz_down
  1810  00C2  01A9               	clrf	_fuzz_down+1
  1811                           
  1812                           ;fuzz.c: 100: fuzz_pressed = debounce_limit;
  1813  00C3  0845               	movf	updateFuzz@debounce_limit+1,w
  1814  00C4  00AB               	movwf	_fuzz_pressed+1
  1815  00C5  0844               	movf	updateFuzz@debounce_limit,w
  1816  00C6  00AA               	movwf	_fuzz_pressed
  1817  00C7  0008               	return
  1818  00C8                     __end_of_updateFuzz:	
  1819                           
  1820                           	psect	text2
  1821  00C8                     __ptext2:	
  1822 ;; *************** function _updateBoost *****************
  1823 ;; Defined at:
  1824 ;;		line 26 in file "mcc_generated_files/boost.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  debounce_lim    2    4[BANK0 ] int 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;		None
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  1    wreg      void 
  1831 ;; Registers used:
  1832 ;;		wreg, status,2, status,0, pclath, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMMON   BANK0   BANK1
  1838 ;;      Params:         0       2       0
  1839 ;;      Locals:         0       0       0
  1840 ;;      Temps:          0       2       0
  1841 ;;      Totals:         0       4       0
  1842 ;;Total ram usage:        4 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    4
  1845 ;; This function calls:
  1846 ;;		_setBoostState
  1847 ;; This function is called by:
  1848 ;;		_main
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           
  1853                           ;psect for function _updateBoost
  1854  00C8                     _updateBoost:	
  1855                           
  1856                           ;boost.c: 33: if (PORTAbits.RA5 == 0) {
  1857                           
  1858                           ;incstack = 0
  1859                           ; Regs used in _updateBoost: [wreg+status,2+status,0+pclath+cstack]
  1860  00C8  0020               	movlb	0	; select bank0
  1861  00C9  1A8C               	btfsc	12,5	;volatile
  1862  00CA  28DB               	goto	l1071
  1863                           
  1864                           ;boost.c: 34: if (boost_pressed > 0) {
  1865  00CB  0827               	movf	_boost_pressed+1,w
  1866  00CC  3A80               	xorlw	128
  1867  00CD  00C6               	movwf	??_updateBoost
  1868  00CE  3080               	movlw	128
  1869  00CF  0246               	subwf	??_updateBoost,w
  1870  00D0  1D03               	skipz
  1871  00D1  28D4               	goto	u695
  1872  00D2  3001               	movlw	1
  1873  00D3  0226               	subwf	_boost_pressed,w
  1874  00D4                     u695:	
  1875  00D4  1C03               	skipc
  1876  00D5  28EC               	goto	l1075
  1877                           
  1878                           ;boost.c: 35: boost_pressed--;
  1879  00D6  30FF               	movlw	255
  1880  00D7  0020               	movlb	0	; select bank0
  1881  00D8  07A6               	addwf	_boost_pressed,f
  1882  00D9  30FF               	movlw	255
  1883  00DA  28EB               	goto	L2
  1884  00DB                     l1071:	
  1885                           ;boost.c: 36: }
  1886                           ;boost.c: 37: } else if (boost_pressed < debounce_limit) {
  1887                           
  1888  00DB  0827               	movf	_boost_pressed+1,w
  1889  00DC  3A80               	xorlw	128
  1890  00DD  00C6               	movwf	??_updateBoost
  1891  00DE  0845               	movf	updateBoost@debounce_limit+1,w
  1892  00DF  3A80               	xorlw	128
  1893  00E0  0246               	subwf	??_updateBoost,w
  1894  00E1  1D03               	skipz
  1895  00E2  28E5               	goto	u705
  1896  00E3  0844               	movf	updateBoost@debounce_limit,w
  1897  00E4  0226               	subwf	_boost_pressed,w
  1898  00E5                     u705:	
  1899  00E5  1803               	skipnc
  1900  00E6  28EC               	goto	l1075
  1901                           
  1902                           ;boost.c: 38: boost_pressed++;
  1903  00E7  3001               	movlw	1
  1904  00E8  0020               	movlb	0	; select bank0
  1905  00E9  07A6               	addwf	_boost_pressed,f
  1906  00EA  3000               	movlw	0
  1907  00EB                     L2:	
  1908  00EB  3DA7               	addwfc	_boost_pressed+1,f
  1909  00EC                     l1075:	
  1910                           
  1911                           ;boost.c: 39: }
  1912                           ;boost.c: 45: if (boost_pressed == 0) {
  1913  00EC  0020               	movlb	0	; select bank0
  1914  00ED  0826               	movf	_boost_pressed,w
  1915  00EE  0427               	iorwf	_boost_pressed+1,w
  1916  00EF  1D03               	btfss	3,2
  1917  00F0  290B               	goto	l1085
  1918                           
  1919                           ;boost.c: 46: boost_down = 1;
  1920  00F1  3001               	movlw	1
  1921  00F2  00A4               	movwf	_boost_down
  1922  00F3  3000               	movlw	0
  1923  00F4  00A5               	movwf	_boost_down+1
  1924                           
  1925                           ;boost.c: 47: if (boost_up == 1) {
  1926  00F5  0334               	decf	_boost_up,w
  1927  00F6  0435               	iorwf	_boost_up+1,w
  1928  00F7  1D03               	btfss	3,2
  1929  00F8  2907               	goto	l1083
  1930                           
  1931                           ;boost.c: 48: setBoostState(!boost_state);
  1932  00F9  0832               	movf	_boost_state,w
  1933  00FA  0433               	iorwf	_boost_state+1,w
  1934  00FB  1D03               	btfss	3,2
  1935  00FC  28FF               	goto	u730
  1936  00FD  3001               	movlw	1
  1937  00FE  2900               	goto	u740
  1938  00FF                     u730:	
  1939  00FF  3000               	movlw	0
  1940  0100                     u740:	
  1941  0100  00C6               	movwf	??_updateBoost
  1942  0101  01C7               	clrf	??_updateBoost+1
  1943  0102  0846               	movf	??_updateBoost,w
  1944  0103  00C2               	movwf	setBoostState@f_state
  1945  0104  0847               	movf	??_updateBoost+1,w
  1946  0105  00C3               	movwf	setBoostState@f_state+1
  1947  0106  218B               	fcall	_setBoostState
  1948  0107                     l1083:	
  1949                           
  1950                           ;boost.c: 49: }
  1951                           ;boost.c: 50: boost_up = 0;
  1952  0107  0020               	movlb	0	; select bank0
  1953  0108  01B4               	clrf	_boost_up
  1954  0109  01B5               	clrf	_boost_up+1
  1955                           
  1956                           ;boost.c: 51: } else if (boost_pressed >= debounce_limit) {
  1957  010A  0008               	return
  1958  010B                     l1085:	
  1959  010B  0827               	movf	_boost_pressed+1,w
  1960  010C  3A80               	xorlw	128
  1961  010D  00C6               	movwf	??_updateBoost
  1962  010E  0845               	movf	updateBoost@debounce_limit+1,w
  1963  010F  3A80               	xorlw	128
  1964  0110  0246               	subwf	??_updateBoost,w
  1965  0111  1D03               	skipz
  1966  0112  2915               	goto	u755
  1967  0113  0844               	movf	updateBoost@debounce_limit,w
  1968  0114  0226               	subwf	_boost_pressed,w
  1969  0115                     u755:	
  1970  0115  1C03               	skipc
  1971  0116  0008               	return
  1972                           
  1973                           ;boost.c: 52: boost_up = 1;
  1974  0117  3001               	movlw	1
  1975  0118  0020               	movlb	0	; select bank0
  1976  0119  00B4               	movwf	_boost_up
  1977  011A  3000               	movlw	0
  1978  011B  00B5               	movwf	_boost_up+1
  1979                           
  1980                           ;boost.c: 53: boost_down = 0;
  1981  011C  01A4               	clrf	_boost_down
  1982  011D  01A5               	clrf	_boost_down+1
  1983                           
  1984                           ;boost.c: 54: boost_pressed = debounce_limit;
  1985  011E  0845               	movf	updateBoost@debounce_limit+1,w
  1986  011F  00A7               	movwf	_boost_pressed+1
  1987  0120  0844               	movf	updateBoost@debounce_limit,w
  1988  0121  00A6               	movwf	_boost_pressed
  1989  0122  0008               	return
  1990  0123                     __end_of_updateBoost:	
  1991                           
  1992                           	psect	text3
  1993  024A                     __ptext3:	
  1994 ;; *************** function _initFuzz *****************
  1995 ;; Defined at:
  1996 ;;		line 27 in file "mcc_generated_files/fuzz.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0, pclath, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMMON   BANK0   BANK1
  2010 ;;      Params:         0       0       0
  2011 ;;      Locals:         0       0       0
  2012 ;;      Temps:          0       0       0
  2013 ;;      Totals:         0       0       0
  2014 ;;Total ram usage:        0 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    4
  2017 ;; This function calls:
  2018 ;;		_setFeedbackState
  2019 ;;		_setFuzzState
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           
  2026                           ;psect for function _initFuzz
  2027  024A                     _initFuzz:	
  2028                           
  2029                           ;fuzz.c: 32: setFuzzState(0);
  2030                           
  2031                           ;incstack = 0
  2032                           ; Regs used in _initFuzz: [wreg+status,2+status,0+pclath+cstack]
  2033  024A  3000               	movlw	0
  2034  024B  0020               	movlb	0	; select bank0
  2035  024C  00C2               	movwf	setFuzzState@f_state
  2036  024D  00C3               	movwf	setFuzzState@f_state+1
  2037  024E  2123               	fcall	_setFuzzState
  2038                           
  2039                           ;fuzz.c: 40: setFeedbackState(0);
  2040  024F  3000               	movlw	0
  2041  0250  0020               	movlb	0	; select bank0
  2042  0251  00C2               	movwf	setFeedbackState@f_state
  2043  0252  00C3               	movwf	setFeedbackState@f_state+1
  2044  0253  2157               	fcall	_setFeedbackState
  2045  0254  0008               	return
  2046  0255                     __end_of_initFuzz:	
  2047                           
  2048                           	psect	text4
  2049  0123                     __ptext4:	
  2050 ;; *************** function _setFuzzState *****************
  2051 ;; Defined at:
  2052 ;;		line 104 in file "mcc_generated_files/fuzz.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  f_state         2    2[BANK0 ] int 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2, status,0, pclath, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMMON   BANK0   BANK1
  2066 ;;      Params:         0       2       0
  2067 ;;      Locals:         0       0       0
  2068 ;;      Temps:          0       0       0
  2069 ;;      Totals:         0       2       0
  2070 ;;Total ram usage:        2 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    3
  2073 ;; This function calls:
  2074 ;;		_wait_ms
  2075 ;; This function is called by:
  2076 ;;		_initFuzz
  2077 ;;		_updateFuzz
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           
  2082                           ;psect for function _setFuzzState
  2083  0123                     _setFuzzState:	
  2084                           
  2085                           ;fuzz.c: 105: if (fuzz_state == f_state) {return;}
  2086                           
  2087                           ;incstack = 0
  2088                           ; Regs used in _setFuzzState: [wreg+status,2+status,0+pclath+cstack]
  2089  0123  0020               	movlb	0	; select bank0
  2090  0124  0843               	movf	setFuzzState@f_state+1,w
  2091  0125  063B               	xorwf	_fuzz_state+1,w
  2092  0126  1D03               	skipz
  2093  0127  292A               	goto	u475
  2094  0128  0842               	movf	setFuzzState@f_state,w
  2095  0129  063A               	xorwf	_fuzz_state,w
  2096  012A                     u475:	
  2097  012A  1903               	btfsc	3,2
  2098  012B  0008               	return
  2099                           
  2100                           ;fuzz.c: 106: fuzz_state = f_state;
  2101  012C  0843               	movf	setFuzzState@f_state+1,w
  2102  012D  00BB               	movwf	_fuzz_state+1
  2103  012E  0842               	movf	setFuzzState@f_state,w
  2104  012F  00BA               	movwf	_fuzz_state
  2105                           
  2106                           ;fuzz.c: 107: LATAbits.LATA2 = f_state;
  2107  0130  0C42               	rrf	setFuzzState@f_state,w
  2108  0131  0022               	movlb	2	; select bank2
  2109  0132  1C03               	skipc
  2110  0133  110C               	bcf	12,2	;volatile
  2111  0134  1803               	skipnc
  2112  0135  150C               	bsf	12,2	;volatile
  2113                           
  2114                           ;fuzz.c: 108: LATCbits.LATC2 = f_state;
  2115  0136  0020               	movlb	0	; select bank0
  2116  0137  0C42               	rrf	setFuzzState@f_state,w
  2117  0138  0022               	movlb	2	; select bank2
  2118  0139  1C03               	skipc
  2119  013A  110E               	bcf	14,2	;volatile
  2120  013B  1803               	skipnc
  2121  013C  150E               	bsf	14,2	;volatile
  2122                           
  2123                           ;fuzz.c: 109: LATCbits.LATC1 = !f_state;
  2124  013D  0020               	movlb	0	; select bank0
  2125  013E  0842               	movf	setFuzzState@f_state,w
  2126  013F  0443               	iorwf	setFuzzState@f_state+1,w
  2127  0140  1D03               	btfss	3,2
  2128  0141  2945               	goto	u480
  2129  0142  0022               	movlb	2	; select bank2
  2130  0143  148E               	bsf	14,1	;volatile
  2131  0144  2947               	goto	l941
  2132  0145                     u480:	
  2133  0145  0022               	movlb	2	; select bank2
  2134  0146  108E               	bcf	14,1	;volatile
  2135  0147                     l941:	
  2136                           
  2137                           ;fuzz.c: 111: wait_ms(20);
  2138  0147  3014               	movlw	20
  2139  0148  0020               	movlb	0	; select bank0
  2140  0149  00C0               	movwf	wait_ms@time
  2141  014A  3000               	movlw	0
  2142  014B  00C1               	movwf	wait_ms@time+1
  2143  014C  21EE               	fcall	_wait_ms
  2144                           
  2145                           ;fuzz.c: 113: LATCbits.LATC2 = 0;
  2146  014D  0022               	movlb	2	; select bank2
  2147  014E  110E               	bcf	14,2	;volatile
  2148                           
  2149                           ;fuzz.c: 114: LATCbits.LATC1 = 0;
  2150  014F  108E               	bcf	14,1	;volatile
  2151                           
  2152                           ;fuzz.c: 117: wait_ms(20);
  2153  0150  3014               	movlw	20
  2154  0151  0020               	movlb	0	; select bank0
  2155  0152  00C0               	movwf	wait_ms@time
  2156  0153  3000               	movlw	0
  2157  0154  00C1               	movwf	wait_ms@time+1
  2158  0155  21EE               	fcall	_wait_ms
  2159  0156  0008               	return
  2160  0157                     __end_of_setFuzzState:	
  2161                           
  2162                           	psect	text5
  2163  0157                     __ptext5:	
  2164 ;; *************** function _setFeedbackState *****************
  2165 ;; Defined at:
  2166 ;;		line 121 in file "mcc_generated_files/fuzz.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  f_state         2    2[BANK0 ] int 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0, pclath, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1
  2180 ;;      Params:         0       2       0
  2181 ;;      Locals:         0       0       0
  2182 ;;      Temps:          0       0       0
  2183 ;;      Totals:         0       2       0
  2184 ;;Total ram usage:        2 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    3
  2187 ;; This function calls:
  2188 ;;		_wait_ms
  2189 ;; This function is called by:
  2190 ;;		_initFuzz
  2191 ;;		_updateFuzz
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           
  2196                           ;psect for function _setFeedbackState
  2197  0157                     _setFeedbackState:	
  2198                           
  2199                           ;fuzz.c: 122: if (feedback_state == f_state) {return;}
  2200                           
  2201                           ;incstack = 0
  2202                           ; Regs used in _setFeedbackState: [wreg+status,2+status,0+pclath+cstack]
  2203  0157  0020               	movlb	0	; select bank0
  2204  0158  0843               	movf	setFeedbackState@f_state+1,w
  2205  0159  0639               	xorwf	_feedback_state+1,w
  2206  015A  1D03               	skipz
  2207  015B  295E               	goto	u505
  2208  015C  0842               	movf	setFeedbackState@f_state,w
  2209  015D  0638               	xorwf	_feedback_state,w
  2210  015E                     u505:	
  2211  015E  1903               	btfsc	3,2
  2212  015F  0008               	return
  2213                           
  2214                           ;fuzz.c: 123: feedback_state = f_state;
  2215  0160  0843               	movf	setFeedbackState@f_state+1,w
  2216  0161  00B9               	movwf	_feedback_state+1
  2217  0162  0842               	movf	setFeedbackState@f_state,w
  2218  0163  00B8               	movwf	_feedback_state
  2219                           
  2220                           ;fuzz.c: 124: LATCbits.LATC3 = f_state;
  2221  0164  0C42               	rrf	setFeedbackState@f_state,w
  2222  0165  0022               	movlb	2	; select bank2
  2223  0166  1C03               	skipc
  2224  0167  118E               	bcf	14,3	;volatile
  2225  0168  1803               	skipnc
  2226  0169  158E               	bsf	14,3	;volatile
  2227                           
  2228                           ;fuzz.c: 125: LATAbits.LATA0 = f_state;
  2229  016A  0020               	movlb	0	; select bank0
  2230  016B  0C42               	rrf	setFeedbackState@f_state,w
  2231  016C  0022               	movlb	2	; select bank2
  2232  016D  1C03               	skipc
  2233  016E  100C               	bcf	12,0	;volatile
  2234  016F  1803               	skipnc
  2235  0170  140C               	bsf	12,0	;volatile
  2236                           
  2237                           ;fuzz.c: 126: LATAbits.LATA1 = !f_state;
  2238  0171  0020               	movlb	0	; select bank0
  2239  0172  0842               	movf	setFeedbackState@f_state,w
  2240  0173  0443               	iorwf	setFeedbackState@f_state+1,w
  2241  0174  1D03               	btfss	3,2
  2242  0175  2979               	goto	u510
  2243  0176  0022               	movlb	2	; select bank2
  2244  0177  148C               	bsf	12,1	;volatile
  2245  0178  297B               	goto	l961
  2246  0179                     u510:	
  2247  0179  0022               	movlb	2	; select bank2
  2248  017A  108C               	bcf	12,1	;volatile
  2249  017B                     l961:	
  2250                           
  2251                           ;fuzz.c: 128: wait_ms(20);
  2252  017B  3014               	movlw	20
  2253  017C  0020               	movlb	0	; select bank0
  2254  017D  00C0               	movwf	wait_ms@time
  2255  017E  3000               	movlw	0
  2256  017F  00C1               	movwf	wait_ms@time+1
  2257  0180  21EE               	fcall	_wait_ms
  2258                           
  2259                           ;fuzz.c: 130: LATAbits.LATA0 = 0;
  2260  0181  0022               	movlb	2	; select bank2
  2261  0182  100C               	bcf	12,0	;volatile
  2262                           
  2263                           ;fuzz.c: 131: LATAbits.LATA1 = 0;
  2264  0183  108C               	bcf	12,1	;volatile
  2265                           
  2266                           ;fuzz.c: 134: wait_ms(20);
  2267  0184  3014               	movlw	20
  2268  0185  0020               	movlb	0	; select bank0
  2269  0186  00C0               	movwf	wait_ms@time
  2270  0187  3000               	movlw	0
  2271  0188  00C1               	movwf	wait_ms@time+1
  2272  0189  21EE               	fcall	_wait_ms
  2273  018A  0008               	return
  2274  018B                     __end_of_setFeedbackState:	
  2275                           
  2276                           	psect	text6
  2277  026B                     __ptext6:	
  2278 ;; *************** function _initBoost *****************
  2279 ;; Defined at:
  2280 ;;		line 22 in file "mcc_generated_files/boost.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;		None
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;		None
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  1    wreg      void 
  2287 ;; Registers used:
  2288 ;;		wreg, status,2, status,0, pclath, cstack
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMMON   BANK0   BANK1
  2294 ;;      Params:         0       0       0
  2295 ;;      Locals:         0       0       0
  2296 ;;      Temps:          0       0       0
  2297 ;;      Totals:         0       0       0
  2298 ;;Total ram usage:        0 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    4
  2301 ;; This function calls:
  2302 ;;		_setBoostState
  2303 ;; This function is called by:
  2304 ;;		_main
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           
  2309                           ;psect for function _initBoost
  2310  026B                     _initBoost:	
  2311                           
  2312                           ;boost.c: 23: setBoostState(0);
  2313                           
  2314                           ;incstack = 0
  2315                           ; Regs used in _initBoost: [wreg+status,2+status,0+pclath+cstack]
  2316  026B  3000               	movlw	0
  2317  026C  0020               	movlb	0	; select bank0
  2318  026D  00C2               	movwf	setBoostState@f_state
  2319  026E  00C3               	movwf	setBoostState@f_state+1
  2320  026F  218B               	fcall	_setBoostState
  2321  0270  0008               	return
  2322  0271                     __end_of_initBoost:	
  2323                           
  2324                           	psect	text7
  2325  018B                     __ptext7:	
  2326 ;; *************** function _setBoostState *****************
  2327 ;; Defined at:
  2328 ;;		line 61 in file "mcc_generated_files/boost.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  f_state         2    2[BANK0 ] int 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0, pclath, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMMON   BANK0   BANK1
  2342 ;;      Params:         0       2       0
  2343 ;;      Locals:         0       0       0
  2344 ;;      Temps:          0       0       0
  2345 ;;      Totals:         0       2       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    3
  2349 ;; This function calls:
  2350 ;;		_wait_ms
  2351 ;; This function is called by:
  2352 ;;		_initBoost
  2353 ;;		_updateBoost
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           
  2358                           ;psect for function _setBoostState
  2359  018B                     _setBoostState:	
  2360                           
  2361                           ;boost.c: 62: if (boost_state == f_state) {return;}
  2362                           
  2363                           ;incstack = 0
  2364                           ; Regs used in _setBoostState: [wreg+status,2+status,0+pclath+cstack]
  2365  018B  0020               	movlb	0	; select bank0
  2366  018C  0843               	movf	setBoostState@f_state+1,w
  2367  018D  0633               	xorwf	_boost_state+1,w
  2368  018E  1D03               	skipz
  2369  018F  2992               	goto	u535
  2370  0190  0842               	movf	setBoostState@f_state,w
  2371  0191  0632               	xorwf	_boost_state,w
  2372  0192                     u535:	
  2373  0192  1903               	btfsc	3,2
  2374  0193  0008               	return
  2375                           
  2376                           ;boost.c: 63: boost_state = f_state;
  2377  0194  0843               	movf	setBoostState@f_state+1,w
  2378  0195  00B3               	movwf	_boost_state+1
  2379  0196  0842               	movf	setBoostState@f_state,w
  2380  0197  00B2               	movwf	_boost_state
  2381                           
  2382                           ;boost.c: 64: LATCbits.LATC5 = f_state;
  2383  0198  0C42               	rrf	setBoostState@f_state,w
  2384  0199  0022               	movlb	2	; select bank2
  2385  019A  1C03               	skipc
  2386  019B  128E               	bcf	14,5	;volatile
  2387  019C  1803               	skipnc
  2388  019D  168E               	bsf	14,5	;volatile
  2389                           
  2390                           ;boost.c: 65: LATCbits.LATC0 = f_state;
  2391  019E  0020               	movlb	0	; select bank0
  2392  019F  0C42               	rrf	setBoostState@f_state,w
  2393  01A0  0022               	movlb	2	; select bank2
  2394  01A1  1C03               	skipc
  2395  01A2  100E               	bcf	14,0	;volatile
  2396  01A3  1803               	skipnc
  2397  01A4  140E               	bsf	14,0	;volatile
  2398                           
  2399                           ;boost.c: 66: LATCbits.LATC4 = !f_state;
  2400  01A5  0020               	movlb	0	; select bank0
  2401  01A6  0842               	movf	setBoostState@f_state,w
  2402  01A7  0443               	iorwf	setBoostState@f_state+1,w
  2403  01A8  1D03               	btfss	3,2
  2404  01A9  29AD               	goto	u540
  2405  01AA  0022               	movlb	2	; select bank2
  2406  01AB  160E               	bsf	14,4	;volatile
  2407  01AC  29AF               	goto	l981
  2408  01AD                     u540:	
  2409  01AD  0022               	movlb	2	; select bank2
  2410  01AE  120E               	bcf	14,4	;volatile
  2411  01AF                     l981:	
  2412                           
  2413                           ;boost.c: 68: wait_ms(20);
  2414  01AF  3014               	movlw	20
  2415  01B0  0020               	movlb	0	; select bank0
  2416  01B1  00C0               	movwf	wait_ms@time
  2417  01B2  3000               	movlw	0
  2418  01B3  00C1               	movwf	wait_ms@time+1
  2419  01B4  21EE               	fcall	_wait_ms
  2420                           
  2421                           ;boost.c: 70: LATCbits.LATC0 = 0;
  2422  01B5  0022               	movlb	2	; select bank2
  2423  01B6  100E               	bcf	14,0	;volatile
  2424                           
  2425                           ;boost.c: 71: LATCbits.LATC4 = 0;
  2426  01B7  120E               	bcf	14,4	;volatile
  2427                           
  2428                           ;boost.c: 73: wait_ms(20);
  2429  01B8  3014               	movlw	20
  2430  01B9  0020               	movlb	0	; select bank0
  2431  01BA  00C0               	movwf	wait_ms@time
  2432  01BB  3000               	movlw	0
  2433  01BC  00C1               	movwf	wait_ms@time+1
  2434  01BD  21EE               	fcall	_wait_ms
  2435  01BE  0008               	return
  2436  01BF                     __end_of_setBoostState:	
  2437                           
  2438                           	psect	text8
  2439  01EE                     __ptext8:	
  2440 ;; *************** function _wait_ms *****************
  2441 ;; Defined at:
  2442 ;;		line 23 in file "system.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  time            2    0[BANK0 ] unsigned int 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0, pclath, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMMON   BANK0   BANK1
  2456 ;;      Params:         0       2       0
  2457 ;;      Locals:         0       0       0
  2458 ;;      Temps:          0       0       0
  2459 ;;      Totals:         0       2       0
  2460 ;;Total ram usage:        2 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    2
  2463 ;; This function calls:
  2464 ;;		___lmul
  2465 ;; This function is called by:
  2466 ;;		_setFuzzState
  2467 ;;		_setFeedbackState
  2468 ;;		_setBoostState
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           
  2473                           ;psect for function _wait_ms
  2474  01EE                     _wait_ms:	
  2475                           
  2476                           ;system.c: 25: static long timel = 0;
  2477                           ;system.c: 26: timel = time * 1000l;
  2478                           
  2479                           ;incstack = 0
  2480                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  2481  01EE  0020               	movlb	0	; select bank0
  2482  01EF  0840               	movf	wait_ms@time,w
  2483  01F0  00F1               	movwf	___lmul@multiplier
  2484  01F1  0841               	movf	wait_ms@time+1,w
  2485  01F2  00F2               	movwf	___lmul@multiplier+1
  2486  01F3  01F3               	clrf	___lmul@multiplier+2
  2487  01F4  01F4               	clrf	___lmul@multiplier+3
  2488  01F5  3000               	movlw	0
  2489  01F6  00F8               	movwf	___lmul@multiplicand+3
  2490  01F7  3000               	movlw	0
  2491  01F8  00F7               	movwf	___lmul@multiplicand+2
  2492  01F9  3003               	movlw	3
  2493  01FA  00F6               	movwf	___lmul@multiplicand+1
  2494  01FB  30E8               	movlw	232
  2495  01FC  00F5               	movwf	___lmul@multiplicand
  2496  01FD  21BF               	fcall	___lmul
  2497  01FE  0874               	movf	?___lmul+3,w
  2498  01FF  0020               	movlb	0	; select bank0
  2499  0200  00A3               	movwf	wait_ms@timel+3
  2500  0201  0873               	movf	?___lmul+2,w
  2501  0202  00A2               	movwf	wait_ms@timel+2
  2502  0203  0872               	movf	?___lmul+1,w
  2503  0204  00A1               	movwf	wait_ms@timel+1
  2504  0205  0871               	movf	?___lmul,w
  2505  0206  00A0               	movwf	wait_ms@timel
  2506  0207                     l73:	
  2507                           ;system.c: 27: for( ; timel; timel--);
  2508                           
  2509  0207  0823               	movf	wait_ms@timel+3,w
  2510  0208  0422               	iorwf	wait_ms@timel+2,w
  2511  0209  0421               	iorwf	wait_ms@timel+1,w
  2512  020A  0420               	iorwf	wait_ms@timel,w
  2513  020B  1903               	btfsc	3,2
  2514  020C  0008               	return
  2515  020D  30FF               	movlw	255
  2516  020E  07A0               	addwf	wait_ms@timel,f
  2517  020F  30FF               	movlw	255
  2518  0210  3DA1               	addwfc	wait_ms@timel+1,f
  2519  0211  30FF               	movlw	255
  2520  0212  3DA2               	addwfc	wait_ms@timel+2,f
  2521  0213  30FF               	movlw	255
  2522  0214  3DA3               	addwfc	wait_ms@timel+3,f
  2523  0215  2A07               	goto	l73
  2524  0216                     __end_of_wait_ms:	
  2525                           
  2526                           	psect	text9
  2527  01BF                     __ptext9:	
  2528 ;; *************** function ___lmul *****************
  2529 ;; Defined at:
  2530 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  multiplier      4    1[COMMON] unsigned long 
  2533 ;;  multiplicand    4    5[COMMON] unsigned long 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  product         4    9[COMMON] unsigned long 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  4    1[COMMON] unsigned long 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1
  2545 ;;      Params:         8       0       0
  2546 ;;      Locals:         4       0       0
  2547 ;;      Temps:          0       0       0
  2548 ;;      Totals:        12       0       0
  2549 ;;Total ram usage:       12 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    1
  2552 ;; This function calls:
  2553 ;;		Nothing
  2554 ;; This function is called by:
  2555 ;;		_wait_ms
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           
  2560                           ;psect for function ___lmul
  2561  01BF                     ___lmul:	
  2562                           
  2563                           ;incstack = 0
  2564                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2565  01BF  3000               	movlw	0
  2566  01C0  00FC               	movwf	___lmul@product+3
  2567  01C1  3000               	movlw	0
  2568  01C2  00FB               	movwf	___lmul@product+2
  2569  01C3  3000               	movlw	0
  2570  01C4  00FA               	movwf	___lmul@product+1
  2571  01C5  3000               	movlw	0
  2572  01C6  00F9               	movwf	___lmul@product
  2573  01C7                     l907:	
  2574  01C7  1C71               	btfss	___lmul@multiplier,0
  2575  01C8  29D1               	goto	l911
  2576  01C9  0875               	movf	___lmul@multiplicand,w
  2577  01CA  07F9               	addwf	___lmul@product,f
  2578  01CB  0876               	movf	___lmul@multiplicand+1,w
  2579  01CC  3DFA               	addwfc	___lmul@product+1,f
  2580  01CD  0877               	movf	___lmul@multiplicand+2,w
  2581  01CE  3DFB               	addwfc	___lmul@product+2,f
  2582  01CF  0878               	movf	___lmul@multiplicand+3,w
  2583  01D0  3DFC               	addwfc	___lmul@product+3,f
  2584  01D1                     l911:	
  2585  01D1  3001               	movlw	1
  2586  01D2                     u435:	
  2587  01D2  35F5               	lslf	___lmul@multiplicand,f
  2588  01D3  0DF6               	rlf	___lmul@multiplicand+1,f
  2589  01D4  0DF7               	rlf	___lmul@multiplicand+2,f
  2590  01D5  0DF8               	rlf	___lmul@multiplicand+3,f
  2591  01D6  0B89               	decfsz	9,f
  2592  01D7  29D2               	goto	u435
  2593  01D8  3001               	movlw	1
  2594  01D9                     u445:	
  2595  01D9  36F4               	lsrf	___lmul@multiplier+3,f
  2596  01DA  0CF3               	rrf	___lmul@multiplier+2,f
  2597  01DB  0CF2               	rrf	___lmul@multiplier+1,f
  2598  01DC  0CF1               	rrf	___lmul@multiplier,f
  2599  01DD  0B89               	decfsz	9,f
  2600  01DE  29D9               	goto	u445
  2601  01DF  0874               	movf	___lmul@multiplier+3,w
  2602  01E0  0473               	iorwf	___lmul@multiplier+2,w
  2603  01E1  0472               	iorwf	___lmul@multiplier+1,w
  2604  01E2  0471               	iorwf	___lmul@multiplier,w
  2605  01E3  1D03               	skipz
  2606  01E4  29C7               	goto	l907
  2607  01E5  087C               	movf	___lmul@product+3,w
  2608  01E6  00F4               	movwf	?___lmul+3
  2609  01E7  087B               	movf	___lmul@product+2,w
  2610  01E8  00F3               	movwf	?___lmul+2
  2611  01E9  087A               	movf	___lmul@product+1,w
  2612  01EA  00F2               	movwf	?___lmul+1
  2613  01EB  0879               	movf	___lmul@product,w
  2614  01EC  00F1               	movwf	?___lmul
  2615  01ED  0008               	return
  2616  01EE                     __end_of___lmul:	
  2617                           
  2618                           	psect	text10
  2619  0216                     __ptext10:	
  2620 ;; *************** function _InitApp *****************
  2621 ;; Defined at:
  2622 ;;		line 27 in file "user.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, pclath, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1
  2636 ;;      Params:         0       0       0
  2637 ;;      Locals:         0       0       0
  2638 ;;      Temps:          0       0       0
  2639 ;;      Totals:         0       0       0
  2640 ;;Total ram usage:        0 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    2
  2643 ;; This function calls:
  2644 ;;		_init_adc
  2645 ;; This function is called by:
  2646 ;;		_main
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function _InitApp
  2652  0216                     _InitApp:	
  2653                           
  2654                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  2658  0216  0021               	movlb	1	; select bank1
  2659  0217  100C               	bcf	12,0	;volatile
  2660                           
  2661                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  2662  0218  108C               	bcf	12,1	;volatile
  2663                           
  2664                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  2665  0219  110C               	bcf	12,2	;volatile
  2666                           
  2667                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  2668  021A  160C               	bsf	12,4	;volatile
  2669                           
  2670                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  2671  021B  168C               	bsf	12,5	;volatile
  2672                           
  2673                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  2674  021C  0023               	movlb	3	; select bank3
  2675  021D  120C               	bcf	12,4	;volatile
  2676                           
  2677                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  2678  021E  0021               	movlb	1	; select bank1
  2679  021F  100E               	bcf	14,0	;volatile
  2680                           
  2681                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  2682  0220  108E               	bcf	14,1	;volatile
  2683                           
  2684                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  2685  0221  110E               	bcf	14,2	;volatile
  2686                           
  2687                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  2688  0222  118E               	bcf	14,3	;volatile
  2689                           
  2690                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  2691  0223  120E               	bcf	14,4	;volatile
  2692                           
  2693                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  2694  0224  128E               	bcf	14,5	;volatile
  2695                           
  2696                           ;user.c: 43: LATCbits.LATC5 = 0;
  2697  0225  0022               	movlb	2	; select bank2
  2698  0226  128E               	bcf	14,5	;volatile
  2699                           
  2700                           ;user.c: 45: LATAbits.LATA2 = 0;
  2701  0227  110C               	bcf	12,2	;volatile
  2702                           
  2703                           ;user.c: 46: LATCbits.LATC3 = 0;
  2704  0228  118E               	bcf	14,3	;volatile
  2705                           
  2706                           ;user.c: 48: init_adc();
  2707  0229  2255               	fcall	_init_adc
  2708  022A  0008               	return
  2709  022B                     __end_of_InitApp:	
  2710                           
  2711                           	psect	text11
  2712  0255                     __ptext11:	
  2713 ;; *************** function _init_adc *****************
  2714 ;; Defined at:
  2715 ;;		line 60 in file "user.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;		None
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1
  2729 ;;      Params:         0       0       0
  2730 ;;      Locals:         0       0       0
  2731 ;;      Temps:          0       0       0
  2732 ;;      Totals:         0       0       0
  2733 ;;Total ram usage:        0 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    1
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_InitApp
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           
  2744                           ;psect for function _init_adc
  2745  0255                     _init_adc:	
  2746                           
  2747                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  2748                           
  2749                           ;incstack = 0
  2750                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  2751  0255  0021               	movlb	1	; select bank1
  2752  0256  179E               	bsf	30,7	;volatile
  2753                           
  2754                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  2755  0257  081E               	movf	30,w	;volatile
  2756  0258  398F               	andlw	-113
  2757  0259  3860               	iorlw	96
  2758  025A  009E               	movwf	30	;volatile
  2759                           
  2760                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  2761  025B  30FC               	movlw	-4
  2762  025C  059E               	andwf	30,f	;volatile
  2763                           
  2764                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  2765  025D  141D               	bsf	29,0	;volatile
  2766  025E  0008               	return
  2767  025F                     __end_of_init_adc:	
  2768                           
  2769                           	psect	text12
  2770  0271                     __ptext12:	
  2771 ;; *************** function _ConfigureOscillator *****************
  2772 ;; Defined at:
  2773 ;;		line 17 in file "system.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, status,0
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1
  2787 ;;      Params:         0       0       0
  2788 ;;      Locals:         0       0       0
  2789 ;;      Temps:          0       0       0
  2790 ;;      Totals:         0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    1
  2794 ;; This function calls:
  2795 ;;		Nothing
  2796 ;; This function is called by:
  2797 ;;		_main
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           
  2802                           ;psect for function _ConfigureOscillator
  2803  0271                     _ConfigureOscillator:	
  2804                           
  2805                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  2806                           
  2807                           ;incstack = 0
  2808                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  2809  0271  3078               	movlw	120
  2810  0272  0021               	movlb	1	; select bank1
  2811  0273  0499               	iorwf	25,f	;volatile
  2812                           
  2813                           ;system.c: 20: OSCSTAT = 0x00;
  2814  0274  019A               	clrf	26	;volatile
  2815  0275  0008               	return
  2816  0276                     __end_of_ConfigureOscillator:	
  2817                           
  2818                           	psect	intentry
  2819  0004                     __pintentry:	
  2820 ;; *************** function _isr *****************
  2821 ;; Defined at:
  2822 ;;		line 23 in file "interrupts.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		None
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMMON   BANK0   BANK1
  2836 ;;      Params:         0       0       0
  2837 ;;      Locals:         0       0       0
  2838 ;;      Temps:          1       0       0
  2839 ;;      Totals:         1       0       0
  2840 ;;Total ram usage:        1 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		Interrupt level 1
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849  0004                     _isr:	
  2850                           
  2851                           ;incstack = 0
  2852                           ; Regs used in _isr: []
  2853  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2854  0005  3180               	pagesel	$
  2855  0006  0020               	movlb	0	; select bank0
  2856  0007  087F               	movf	127,w
  2857  0008  00F0               	movwf	??_isr
  2858  0009  0870               	movf	??_isr,w
  2859  000A  00FF               	movwf	127
  2860  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2861  000C  0009               	retfie
  2862  000D                     __end_of_isr:	
  2863  007E                     btemp	set	126	;btemp
  2864  007E                     int$flags	set	126
  2865  007E                     wtemp	set	126
  2866  007E                     wtemp0	set	126
  2867  0080                     wtemp1	set	128
  2868  0082                     wtemp2	set	130
  2869  0084                     wtemp3	set	132
  2870  0086                     wtemp4	set	134
  2871  0088                     wtemp5	set	136
  2872  007F                     wtemp6	set	127
  2873  007E                     ttemp	set	126
  2874  007E                     ttemp0	set	126
  2875  0081                     ttemp1	set	129
  2876  0084                     ttemp2	set	132
  2877  0087                     ttemp3	set	135
  2878  007F                     ttemp4	set	127
  2879  007E                     ltemp	set	126
  2880  007E                     ltemp0	set	126
  2881  0082                     ltemp1	set	130
  2882  0086                     ltemp2	set	134
  2883  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        14
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      9      41
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _wait_ms->___lmul

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateFuzz
    _updateFuzz->_setFeedbackState
    _updateFuzz->_setFuzzState
    _updateBoost->_setBoostState
    _initFuzz->_setFeedbackState
    _initFuzz->_setFuzzState
    _setFuzzState->_wait_ms
    _setFeedbackState->_wait_ms
    _initBoost->_setBoostState
    _setBoostState->_wait_ms

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5723
                _ConfigureOscillator
                            _InitApp
                          _initBoost
                           _initFuzz
                        _updateBoost
                         _updateFuzz
 ---------------------------------------------------------------------------------
 (1) _updateFuzz                                           5     3      2    2009
                                              4 BANK0      5     3      2
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (1) _updateBoost                                          4     2      2     994
                                              4 BANK0      4     2      2
                      _setBoostState
 ---------------------------------------------------------------------------------
 (1) _initFuzz                                             0     0      0    1856
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (2) _setFuzzState                                         2     0      2     928
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     2     0      2     928
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _initBoost                                            0     0      0     864
                      _setBoostState
 ---------------------------------------------------------------------------------
 (2) _setBoostState                                        2     0      2     864
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     626
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initBoost
     _setBoostState
       _wait_ms
         ___lmul
   _initFuzz
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _wait_ms
         ___lmul
   _updateBoost
     _setBoostState
       _wait_ms
         ___lmul
   _updateFuzz
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      36       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      29       6       51.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      36       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Aug 03 17:35:40 2016

                 __CFG_CP$OFF 0000                            l73 0207                            l58 022F  
                 __CFG_LVP$ON 0000                           l155 005A                           l911 01D1  
                         l907 01C7                           l941 0147                           l961 017B  
                         l981 01AF                           u510 0179                           u505 015E  
                         u435 01D2                           u540 01AD                           u445 01D9  
                         u535 0192                           u480 0145                           u705 00E5  
                         u625 0064                           u730 00FF                           u475 012A  
                         u740 0100                           u655 0099                           u575 002D  
                         u585 003E                           u755 0115                           u695 00D4  
                         _isr 0004                  __CFG_BORV$LO 0000                           wreg 0009  
               _boost_pressed 0026                          l1011 0045                          l1031 007C  
                        l1007 0034                          l1041 008F                          l1051 00AC  
                        l1071 00DB                          l1039 008B                          l1083 0107  
                        l1075 00EC                          l1085 010B                          ?_isr 0070  
                __CFG_WRT$OFF 0000                          _main 022B                          fsr0h 0005  
                        fsr1h 0007                          fsr0l 0004                          indf0 0000  
                        fsr1l 0006                          btemp 007E                          ltemp 007E  
    __end_of_setFeedbackState 018B                          start 000D                          ttemp 007E  
                        wtemp 007E         __end_of_setBoostState 01BF                 __CFG_MCLRE$ON 0000  
             __end_of_InitApp 022B                         ??_isr 0070                         ?_main 0070  
               __CFG_WDTE$OFF 0000           _ConfigureOscillator 0271           ___lmul@multiplicand 0075  
              __CFG_BOREN$OFF 0000                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080               __end_of_wait_ms 0216  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F          ?_ConfigureOscillator 0070               __initialization 000E  
                __end_of_main 023C                __CFG_LPBOR$OFF 0000                        ??_main 007D  
          updateFuzz@fb_state 0047                _feedback_state 0038                        _ADRESH 009C  
                      _ADRESL 009B                        _PMADRH 0192                        _PMADRL 0191  
                      _PMDATH 0194                        _PMDATL 0193                        _PMCON2 0196  
              _debounce_limit 0036                     ??_InitApp 0071         ??_ConfigureOscillator 0071  
              __CFG_PWRTE$OFF 0000                        ___lmul 01BF                __CFG_STVREN$ON 0000  
            __end_of_initFuzz 0255              __end_of_init_adc 025F                     ??_wait_ms 007D  
     __end_of__initialization 001E     updateBoost@debounce_limit 0044                  ?_updateBoost 0044  
              __pcstackCOMMON 0070                  __pidataBANK0 023C                    __pbssBANK0 0020  
          __size_of_initBoost 0006             ?_setFeedbackState 0042              _long_press_limit 003E  
                  __pmaintext 022B            ??_setFeedbackState 007D                 ?_setFuzzState 0042  
                     ?___lmul 0071                    __pintentry 0004                ___lmul@product 0079  
    updateFuzz@debounce_limit 0044                       _OSCSTAT 009A                    _boost_down 0024  
                   ?_initFuzz 0070                     ?_init_adc 0070                       _InitApp 0216  
              ??_setFuzzState 007D               __size_of___lmul 002F                       __ptext1 0021  
                     __ptext2 00C8                       __ptext3 024A                       __ptext4 0123  
                     __ptext5 0157                       __ptext6 026B                       __ptext7 018B  
                     __ptext8 01EE                       __ptext9 01BF             __end_of_initBoost 0271  
                   _T2CONbits 001C                  __size_of_isr 0009                       _fuzz_up 003C  
      __size_of_setBoostState 0034                       _wait_ms 01EE                       clrloop0 0260  
         setFuzzState@f_state 0042          end_of_initialization 001E                    ??_initFuzz 007D  
                     init_ram 0265                    ??_init_adc 0071                       initloop 0266  
                  _fuzz_state 003A          __size_of_updateBoost 005B                   wait_ms@time 0040  
                   _PORTAbits 000C              __CFG_FOSC$INTOSC 0000                     _TRISAbits 008C  
                   _TRISCbits 008E                    _updateFuzz 0021       setFeedbackState@f_state 0042  
 __end_of_ConfigureOscillator 0276                 _setBoostState 018B                __end_of___lmul 01EE  
         start_initialization 000E                   __end_of_isr 000D          __end_of_setFuzzState 0157  
              ?_setBoostState 0042                      ??___lmul 0079                   __pdataBANK0 0032  
        setBoostState@f_state 0042     __size_of_setFeedbackState 0034                     ___latbits 0000  
               __pcstackBANK0 0040                   ?_updateFuzz 0044                      ?_InitApp 0070  
           __size_of_initFuzz 000B             __size_of_init_adc 000A                     _initBoost 026B  
                    ?_wait_ms 0040                      _LATAbits 010C               ??_setBoostState 007D  
                    _LATCbits 010E                     clear_ram0 025F                     _fuzz_down 0028  
                    _PIR1bits 0011           __size_of_updateFuzz 00A7                    _ADCON0bits 009D  
                  _ADCON1bits 009E         __size_of_setFuzzState 0034                   _boost_state 0032  
                  ?_initBoost 0070             ___lmul@multiplier 0071                 ??_updateBoost 0046  
            __size_of_InitApp 0015                  _setFuzzState 0123                    _ANSELAbits 018C  
            _setFeedbackState 0157                      __ptext10 0216                      __ptext11 0255  
                    __ptext12 0271              __size_of_wait_ms 0028                      _boost_up 0034  
                _fuzz_pressed 002A                      _initFuzz 024A                      _init_adc 0255  
               __size_of_main 0011  __size_of_ConfigureOscillator 0005                      int$flags 007E  
             _fuzz_turning_on 002E           __end_of_updateBoost 0123              _last_boost_state 0030  
                  _INTCONbits 000B                  ??_updateFuzz 0046                   ??_initBoost 007D  
                    intlevel1 0000                    _PMCON1bits 0195             __CFG_CLKOUTEN$OFF 0000  
                 _fuzz_toggle 002C                    _OSCCONbits 0099            __end_of_updateFuzz 00C8  
                wait_ms@timel 0020                   _updateBoost 00C8  
