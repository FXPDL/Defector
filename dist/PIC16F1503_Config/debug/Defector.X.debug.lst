

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Aug 02 23:26:26 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000E                     	;# 
    41  0011                     	;# 
    42  0012                     	;# 
    43  0013                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0016                     	;# 
    47  0017                     	;# 
    48  0018                     	;# 
    49  0019                     	;# 
    50  001A                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  008C                     	;# 
    54  008E                     	;# 
    55  0091                     	;# 
    56  0092                     	;# 
    57  0093                     	;# 
    58  0095                     	;# 
    59  0096                     	;# 
    60  0097                     	;# 
    61  0099                     	;# 
    62  009A                     	;# 
    63  009B                     	;# 
    64  009B                     	;# 
    65  009C                     	;# 
    66  009D                     	;# 
    67  009E                     	;# 
    68  009F                     	;# 
    69  010C                     	;# 
    70  010E                     	;# 
    71  0111                     	;# 
    72  0112                     	;# 
    73  0113                     	;# 
    74  0114                     	;# 
    75  0115                     	;# 
    76  0116                     	;# 
    77  0117                     	;# 
    78  0118                     	;# 
    79  0119                     	;# 
    80  011D                     	;# 
    81  018C                     	;# 
    82  018E                     	;# 
    83  0191                     	;# 
    84  0191                     	;# 
    85  0192                     	;# 
    86  0193                     	;# 
    87  0193                     	;# 
    88  0194                     	;# 
    89  0195                     	;# 
    90  0196                     	;# 
    91  0197                     	;# 
    92  020C                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0391                     	;# 
   109  0392                     	;# 
   110  0393                     	;# 
   111  0498                     	;# 
   112  0498                     	;# 
   113  0499                     	;# 
   114  049A                     	;# 
   115  049B                     	;# 
   116  049B                     	;# 
   117  049C                     	;# 
   118  049D                     	;# 
   119  049E                     	;# 
   120  049F                     	;# 
   121  0611                     	;# 
   122  0612                     	;# 
   123  0613                     	;# 
   124  0613                     	;# 
   125  0614                     	;# 
   126  0615                     	;# 
   127  0616                     	;# 
   128  0616                     	;# 
   129  0617                     	;# 
   130  0618                     	;# 
   131  0619                     	;# 
   132  0619                     	;# 
   133  061A                     	;# 
   134  061B                     	;# 
   135  061C                     	;# 
   136  061C                     	;# 
   137  0691                     	;# 
   138  0692                     	;# 
   139  0693                     	;# 
   140  0694                     	;# 
   141  0695                     	;# 
   142  0F0F                     	;# 
   143  0F10                     	;# 
   144  0F11                     	;# 
   145  0F12                     	;# 
   146  0F13                     	;# 
   147  0F14                     	;# 
   148  0F15                     	;# 
   149  0F16                     	;# 
   150  0F17                     	;# 
   151  0F18                     	;# 
   152  0F19                     	;# 
   153  0F1A                     	;# 
   154  0F1B                     	;# 
   155  0F1C                     	;# 
   156  0F1D                     	;# 
   157  0F1E                     	;# 
   158  0F1F                     	;# 
   159  0FE3                     	;# 
   160  0FE4                     	;# 
   161  0FE5                     	;# 
   162  0FE6                     	;# 
   163  0FE7                     	;# 
   164  0FE8                     	;# 
   165  0FE9                     	;# 
   166  0FEA                     	;# 
   167  0FEB                     	;# 
   168  0FED                     	;# 
   169  0FEE                     	;# 
   170  0FEF                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000E                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  008C                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010E                     	;# 
   215  0111                     	;# 
   216  0112                     	;# 
   217  0113                     	;# 
   218  0114                     	;# 
   219  0115                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0118                     	;# 
   223  0119                     	;# 
   224  011D                     	;# 
   225  018C                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0197                     	;# 
   236  020C                     	;# 
   237  0211                     	;# 
   238  0211                     	;# 
   239  0212                     	;# 
   240  0212                     	;# 
   241  0213                     	;# 
   242  0213                     	;# 
   243  0214                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0498                     	;# 
   256  0498                     	;# 
   257  0499                     	;# 
   258  049A                     	;# 
   259  049B                     	;# 
   260  049B                     	;# 
   261  049C                     	;# 
   262  049D                     	;# 
   263  049E                     	;# 
   264  049F                     	;# 
   265  0611                     	;# 
   266  0612                     	;# 
   267  0613                     	;# 
   268  0613                     	;# 
   269  0614                     	;# 
   270  0615                     	;# 
   271  0616                     	;# 
   272  0616                     	;# 
   273  0617                     	;# 
   274  0618                     	;# 
   275  0619                     	;# 
   276  0619                     	;# 
   277  061A                     	;# 
   278  061B                     	;# 
   279  061C                     	;# 
   280  061C                     	;# 
   281  0691                     	;# 
   282  0692                     	;# 
   283  0693                     	;# 
   284  0694                     	;# 
   285  0695                     	;# 
   286  0F0F                     	;# 
   287  0F10                     	;# 
   288  0F11                     	;# 
   289  0F12                     	;# 
   290  0F13                     	;# 
   291  0F14                     	;# 
   292  0F15                     	;# 
   293  0F16                     	;# 
   294  0F17                     	;# 
   295  0F18                     	;# 
   296  0F19                     	;# 
   297  0F1A                     	;# 
   298  0F1B                     	;# 
   299  0F1C                     	;# 
   300  0F1D                     	;# 
   301  0F1E                     	;# 
   302  0F1F                     	;# 
   303  0FE3                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000E                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  008C                     	;# 
   342  008E                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0099                     	;# 
   350  009A                     	;# 
   351  009B                     	;# 
   352  009B                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  009F                     	;# 
   357  010C                     	;# 
   358  010E                     	;# 
   359  0111                     	;# 
   360  0112                     	;# 
   361  0113                     	;# 
   362  0114                     	;# 
   363  0115                     	;# 
   364  0116                     	;# 
   365  0117                     	;# 
   366  0118                     	;# 
   367  0119                     	;# 
   368  011D                     	;# 
   369  018C                     	;# 
   370  018E                     	;# 
   371  0191                     	;# 
   372  0191                     	;# 
   373  0192                     	;# 
   374  0193                     	;# 
   375  0193                     	;# 
   376  0194                     	;# 
   377  0195                     	;# 
   378  0196                     	;# 
   379  0197                     	;# 
   380  020C                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0216                     	;# 
   393  0216                     	;# 
   394  0217                     	;# 
   395  0217                     	;# 
   396  0391                     	;# 
   397  0392                     	;# 
   398  0393                     	;# 
   399  0498                     	;# 
   400  0498                     	;# 
   401  0499                     	;# 
   402  049A                     	;# 
   403  049B                     	;# 
   404  049B                     	;# 
   405  049C                     	;# 
   406  049D                     	;# 
   407  049E                     	;# 
   408  049F                     	;# 
   409  0611                     	;# 
   410  0612                     	;# 
   411  0613                     	;# 
   412  0613                     	;# 
   413  0614                     	;# 
   414  0615                     	;# 
   415  0616                     	;# 
   416  0616                     	;# 
   417  0617                     	;# 
   418  0618                     	;# 
   419  0619                     	;# 
   420  0619                     	;# 
   421  061A                     	;# 
   422  061B                     	;# 
   423  061C                     	;# 
   424  061C                     	;# 
   425  0691                     	;# 
   426  0692                     	;# 
   427  0693                     	;# 
   428  0694                     	;# 
   429  0695                     	;# 
   430  0F0F                     	;# 
   431  0F10                     	;# 
   432  0F11                     	;# 
   433  0F12                     	;# 
   434  0F13                     	;# 
   435  0F14                     	;# 
   436  0F15                     	;# 
   437  0F16                     	;# 
   438  0F17                     	;# 
   439  0F18                     	;# 
   440  0F19                     	;# 
   441  0F1A                     	;# 
   442  0F1B                     	;# 
   443  0F1C                     	;# 
   444  0F1D                     	;# 
   445  0F1E                     	;# 
   446  0F1F                     	;# 
   447  0FE3                     	;# 
   448  0FE4                     	;# 
   449  0FE5                     	;# 
   450  0FE6                     	;# 
   451  0FE7                     	;# 
   452  0FE8                     	;# 
   453  0FE9                     	;# 
   454  0FEA                     	;# 
   455  0FEB                     	;# 
   456  0FED                     	;# 
   457  0FEE                     	;# 
   458  0FEF                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0008                     	;# 
   468  0009                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000E                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0015                     	;# 
   477  0016                     	;# 
   478  0016                     	;# 
   479  0017                     	;# 
   480  0018                     	;# 
   481  0019                     	;# 
   482  001A                     	;# 
   483  001B                     	;# 
   484  001C                     	;# 
   485  008C                     	;# 
   486  008E                     	;# 
   487  0091                     	;# 
   488  0092                     	;# 
   489  0093                     	;# 
   490  0095                     	;# 
   491  0096                     	;# 
   492  0097                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009B                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  009F                     	;# 
   501  010C                     	;# 
   502  010E                     	;# 
   503  0111                     	;# 
   504  0112                     	;# 
   505  0113                     	;# 
   506  0114                     	;# 
   507  0115                     	;# 
   508  0116                     	;# 
   509  0117                     	;# 
   510  0118                     	;# 
   511  0119                     	;# 
   512  011D                     	;# 
   513  018C                     	;# 
   514  018E                     	;# 
   515  0191                     	;# 
   516  0191                     	;# 
   517  0192                     	;# 
   518  0193                     	;# 
   519  0193                     	;# 
   520  0194                     	;# 
   521  0195                     	;# 
   522  0196                     	;# 
   523  0197                     	;# 
   524  020C                     	;# 
   525  0211                     	;# 
   526  0211                     	;# 
   527  0212                     	;# 
   528  0212                     	;# 
   529  0213                     	;# 
   530  0213                     	;# 
   531  0214                     	;# 
   532  0214                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0216                     	;# 
   537  0216                     	;# 
   538  0217                     	;# 
   539  0217                     	;# 
   540  0391                     	;# 
   541  0392                     	;# 
   542  0393                     	;# 
   543  0498                     	;# 
   544  0498                     	;# 
   545  0499                     	;# 
   546  049A                     	;# 
   547  049B                     	;# 
   548  049B                     	;# 
   549  049C                     	;# 
   550  049D                     	;# 
   551  049E                     	;# 
   552  049F                     	;# 
   553  0611                     	;# 
   554  0612                     	;# 
   555  0613                     	;# 
   556  0613                     	;# 
   557  0614                     	;# 
   558  0615                     	;# 
   559  0616                     	;# 
   560  0616                     	;# 
   561  0617                     	;# 
   562  0618                     	;# 
   563  0619                     	;# 
   564  0619                     	;# 
   565  061A                     	;# 
   566  061B                     	;# 
   567  061C                     	;# 
   568  061C                     	;# 
   569  0691                     	;# 
   570  0692                     	;# 
   571  0693                     	;# 
   572  0694                     	;# 
   573  0695                     	;# 
   574  0F0F                     	;# 
   575  0F10                     	;# 
   576  0F11                     	;# 
   577  0F12                     	;# 
   578  0F13                     	;# 
   579  0F14                     	;# 
   580  0F15                     	;# 
   581  0F16                     	;# 
   582  0F17                     	;# 
   583  0F18                     	;# 
   584  0F19                     	;# 
   585  0F1A                     	;# 
   586  0F1B                     	;# 
   587  0F1C                     	;# 
   588  0F1D                     	;# 
   589  0F1E                     	;# 
   590  0F1F                     	;# 
   591  0FE3                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000E                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0013                     	;# 
   620  0015                     	;# 
   621  0016                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001C                     	;# 
   629  008C                     	;# 
   630  008E                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0093                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  009F                     	;# 
   645  010C                     	;# 
   646  010E                     	;# 
   647  0111                     	;# 
   648  0112                     	;# 
   649  0113                     	;# 
   650  0114                     	;# 
   651  0115                     	;# 
   652  0116                     	;# 
   653  0117                     	;# 
   654  0118                     	;# 
   655  0119                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018E                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0197                     	;# 
   668  020C                     	;# 
   669  0211                     	;# 
   670  0211                     	;# 
   671  0212                     	;# 
   672  0212                     	;# 
   673  0213                     	;# 
   674  0213                     	;# 
   675  0214                     	;# 
   676  0214                     	;# 
   677  0215                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0216                     	;# 
   681  0216                     	;# 
   682  0217                     	;# 
   683  0217                     	;# 
   684  0391                     	;# 
   685  0392                     	;# 
   686  0393                     	;# 
   687  0498                     	;# 
   688  0498                     	;# 
   689  0499                     	;# 
   690  049A                     	;# 
   691  049B                     	;# 
   692  049B                     	;# 
   693  049C                     	;# 
   694  049D                     	;# 
   695  049E                     	;# 
   696  049F                     	;# 
   697  0611                     	;# 
   698  0612                     	;# 
   699  0613                     	;# 
   700  0613                     	;# 
   701  0614                     	;# 
   702  0615                     	;# 
   703  0616                     	;# 
   704  0616                     	;# 
   705  0617                     	;# 
   706  0618                     	;# 
   707  0619                     	;# 
   708  0619                     	;# 
   709  061A                     	;# 
   710  061B                     	;# 
   711  061C                     	;# 
   712  061C                     	;# 
   713  0691                     	;# 
   714  0692                     	;# 
   715  0693                     	;# 
   716  0694                     	;# 
   717  0695                     	;# 
   718  0F0F                     	;# 
   719  0F10                     	;# 
   720  0F11                     	;# 
   721  0F12                     	;# 
   722  0F13                     	;# 
   723  0F14                     	;# 
   724  0F15                     	;# 
   725  0F16                     	;# 
   726  0F17                     	;# 
   727  0F18                     	;# 
   728  0F19                     	;# 
   729  0F1A                     	;# 
   730  0F1B                     	;# 
   731  0F1C                     	;# 
   732  0F1D                     	;# 
   733  0F1E                     	;# 
   734  0F1F                     	;# 
   735  0FE3                     	;# 
   736  0FE4                     	;# 
   737  0FE5                     	;# 
   738  0FE6                     	;# 
   739  0FE7                     	;# 
   740  0FE8                     	;# 
   741  0FE9                     	;# 
   742  0FEA                     	;# 
   743  0FEB                     	;# 
   744  0FED                     	;# 
   745  0FEE                     	;# 
   746  0FEF                     	;# 
   747  0000                     	;# 
   748  0001                     	;# 
   749  0002                     	;# 
   750  0003                     	;# 
   751  0004                     	;# 
   752  0005                     	;# 
   753  0006                     	;# 
   754  0007                     	;# 
   755  0008                     	;# 
   756  0009                     	;# 
   757  000A                     	;# 
   758  000B                     	;# 
   759  000C                     	;# 
   760  000E                     	;# 
   761  0011                     	;# 
   762  0012                     	;# 
   763  0013                     	;# 
   764  0015                     	;# 
   765  0016                     	;# 
   766  0016                     	;# 
   767  0017                     	;# 
   768  0018                     	;# 
   769  0019                     	;# 
   770  001A                     	;# 
   771  001B                     	;# 
   772  001C                     	;# 
   773  008C                     	;# 
   774  008E                     	;# 
   775  0091                     	;# 
   776  0092                     	;# 
   777  0093                     	;# 
   778  0095                     	;# 
   779  0096                     	;# 
   780  0097                     	;# 
   781  0099                     	;# 
   782  009A                     	;# 
   783  009B                     	;# 
   784  009B                     	;# 
   785  009C                     	;# 
   786  009D                     	;# 
   787  009E                     	;# 
   788  009F                     	;# 
   789  010C                     	;# 
   790  010E                     	;# 
   791  0111                     	;# 
   792  0112                     	;# 
   793  0113                     	;# 
   794  0114                     	;# 
   795  0115                     	;# 
   796  0116                     	;# 
   797  0117                     	;# 
   798  0118                     	;# 
   799  0119                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  018E                     	;# 
   803  0191                     	;# 
   804  0191                     	;# 
   805  0192                     	;# 
   806  0193                     	;# 
   807  0193                     	;# 
   808  0194                     	;# 
   809  0195                     	;# 
   810  0196                     	;# 
   811  0197                     	;# 
   812  020C                     	;# 
   813  0211                     	;# 
   814  0211                     	;# 
   815  0212                     	;# 
   816  0212                     	;# 
   817  0213                     	;# 
   818  0213                     	;# 
   819  0214                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0216                     	;# 
   825  0216                     	;# 
   826  0217                     	;# 
   827  0217                     	;# 
   828  0391                     	;# 
   829  0392                     	;# 
   830  0393                     	;# 
   831  0498                     	;# 
   832  0498                     	;# 
   833  0499                     	;# 
   834  049A                     	;# 
   835  049B                     	;# 
   836  049B                     	;# 
   837  049C                     	;# 
   838  049D                     	;# 
   839  049E                     	;# 
   840  049F                     	;# 
   841  0611                     	;# 
   842  0612                     	;# 
   843  0613                     	;# 
   844  0613                     	;# 
   845  0614                     	;# 
   846  0615                     	;# 
   847  0616                     	;# 
   848  0616                     	;# 
   849  0617                     	;# 
   850  0618                     	;# 
   851  0619                     	;# 
   852  0619                     	;# 
   853  061A                     	;# 
   854  061B                     	;# 
   855  061C                     	;# 
   856  061C                     	;# 
   857  0691                     	;# 
   858  0692                     	;# 
   859  0693                     	;# 
   860  0694                     	;# 
   861  0695                     	;# 
   862  0F0F                     	;# 
   863  0F10                     	;# 
   864  0F11                     	;# 
   865  0F12                     	;# 
   866  0F13                     	;# 
   867  0F14                     	;# 
   868  0F15                     	;# 
   869  0F16                     	;# 
   870  0F17                     	;# 
   871  0F18                     	;# 
   872  0F19                     	;# 
   873  0F1A                     	;# 
   874  0F1B                     	;# 
   875  0F1C                     	;# 
   876  0F1D                     	;# 
   877  0F1E                     	;# 
   878  0F1F                     	;# 
   879  0FE3                     	;# 
   880  0FE4                     	;# 
   881  0FE5                     	;# 
   882  0FE6                     	;# 
   883  0FE7                     	;# 
   884  0FE8                     	;# 
   885  0FE9                     	;# 
   886  0FEA                     	;# 
   887  0FEB                     	;# 
   888  0FED                     	;# 
   889  0FEE                     	;# 
   890  0FEF                     	;# 
   891  0000                     	;# 
   892  0001                     	;# 
   893  0002                     	;# 
   894  0003                     	;# 
   895  0004                     	;# 
   896  0005                     	;# 
   897  0006                     	;# 
   898  0007                     	;# 
   899  0008                     	;# 
   900  0009                     	;# 
   901  000A                     	;# 
   902  000B                     	;# 
   903  000C                     	;# 
   904  000E                     	;# 
   905  0011                     	;# 
   906  0012                     	;# 
   907  0013                     	;# 
   908  0015                     	;# 
   909  0016                     	;# 
   910  0016                     	;# 
   911  0017                     	;# 
   912  0018                     	;# 
   913  0019                     	;# 
   914  001A                     	;# 
   915  001B                     	;# 
   916  001C                     	;# 
   917  008C                     	;# 
   918  008E                     	;# 
   919  0091                     	;# 
   920  0092                     	;# 
   921  0093                     	;# 
   922  0095                     	;# 
   923  0096                     	;# 
   924  0097                     	;# 
   925  0099                     	;# 
   926  009A                     	;# 
   927  009B                     	;# 
   928  009B                     	;# 
   929  009C                     	;# 
   930  009D                     	;# 
   931  009E                     	;# 
   932  009F                     	;# 
   933  010C                     	;# 
   934  010E                     	;# 
   935  0111                     	;# 
   936  0112                     	;# 
   937  0113                     	;# 
   938  0114                     	;# 
   939  0115                     	;# 
   940  0116                     	;# 
   941  0117                     	;# 
   942  0118                     	;# 
   943  0119                     	;# 
   944  011D                     	;# 
   945  018C                     	;# 
   946  018E                     	;# 
   947  0191                     	;# 
   948  0191                     	;# 
   949  0192                     	;# 
   950  0193                     	;# 
   951  0193                     	;# 
   952  0194                     	;# 
   953  0195                     	;# 
   954  0196                     	;# 
   955  0197                     	;# 
   956  020C                     	;# 
   957  0211                     	;# 
   958  0211                     	;# 
   959  0212                     	;# 
   960  0212                     	;# 
   961  0213                     	;# 
   962  0213                     	;# 
   963  0214                     	;# 
   964  0214                     	;# 
   965  0215                     	;# 
   966  0215                     	;# 
   967  0215                     	;# 
   968  0216                     	;# 
   969  0216                     	;# 
   970  0217                     	;# 
   971  0217                     	;# 
   972  0391                     	;# 
   973  0392                     	;# 
   974  0393                     	;# 
   975  0498                     	;# 
   976  0498                     	;# 
   977  0499                     	;# 
   978  049A                     	;# 
   979  049B                     	;# 
   980  049B                     	;# 
   981  049C                     	;# 
   982  049D                     	;# 
   983  049E                     	;# 
   984  049F                     	;# 
   985  0611                     	;# 
   986  0612                     	;# 
   987  0613                     	;# 
   988  0613                     	;# 
   989  0614                     	;# 
   990  0615                     	;# 
   991  0616                     	;# 
   992  0616                     	;# 
   993  0617                     	;# 
   994  0618                     	;# 
   995  0619                     	;# 
   996  0619                     	;# 
   997  061A                     	;# 
   998  061B                     	;# 
   999  061C                     	;# 
  1000  061C                     	;# 
  1001  0691                     	;# 
  1002  0692                     	;# 
  1003  0693                     	;# 
  1004  0694                     	;# 
  1005  0695                     	;# 
  1006  0F0F                     	;# 
  1007  0F10                     	;# 
  1008  0F11                     	;# 
  1009  0F12                     	;# 
  1010  0F13                     	;# 
  1011  0F14                     	;# 
  1012  0F15                     	;# 
  1013  0F16                     	;# 
  1014  0F17                     	;# 
  1015  0F18                     	;# 
  1016  0F19                     	;# 
  1017  0F1A                     	;# 
  1018  0F1B                     	;# 
  1019  0F1C                     	;# 
  1020  0F1D                     	;# 
  1021  0F1E                     	;# 
  1022  0F1F                     	;# 
  1023  0FE3                     	;# 
  1024  0FE4                     	;# 
  1025  0FE5                     	;# 
  1026  0FE6                     	;# 
  1027  0FE7                     	;# 
  1028  0FE8                     	;# 
  1029  0FE9                     	;# 
  1030  0FEA                     	;# 
  1031  0FEB                     	;# 
  1032  0FED                     	;# 
  1033  0FEE                     	;# 
  1034  0FEF                     	;# 
  1035  0000                     	;# 
  1036  0001                     	;# 
  1037  0002                     	;# 
  1038  0003                     	;# 
  1039  0004                     	;# 
  1040  0005                     	;# 
  1041  0006                     	;# 
  1042  0007                     	;# 
  1043  0008                     	;# 
  1044  0009                     	;# 
  1045  000A                     	;# 
  1046  000B                     	;# 
  1047  000C                     	;# 
  1048  000E                     	;# 
  1049  0011                     	;# 
  1050  0012                     	;# 
  1051  0013                     	;# 
  1052  0015                     	;# 
  1053  0016                     	;# 
  1054  0016                     	;# 
  1055  0017                     	;# 
  1056  0018                     	;# 
  1057  0019                     	;# 
  1058  001A                     	;# 
  1059  001B                     	;# 
  1060  001C                     	;# 
  1061  008C                     	;# 
  1062  008E                     	;# 
  1063  0091                     	;# 
  1064  0092                     	;# 
  1065  0093                     	;# 
  1066  0095                     	;# 
  1067  0096                     	;# 
  1068  0097                     	;# 
  1069  0099                     	;# 
  1070  009A                     	;# 
  1071  009B                     	;# 
  1072  009B                     	;# 
  1073  009C                     	;# 
  1074  009D                     	;# 
  1075  009E                     	;# 
  1076  009F                     	;# 
  1077  010C                     	;# 
  1078  010E                     	;# 
  1079  0111                     	;# 
  1080  0112                     	;# 
  1081  0113                     	;# 
  1082  0114                     	;# 
  1083  0115                     	;# 
  1084  0116                     	;# 
  1085  0117                     	;# 
  1086  0118                     	;# 
  1087  0119                     	;# 
  1088  011D                     	;# 
  1089  018C                     	;# 
  1090  018E                     	;# 
  1091  0191                     	;# 
  1092  0191                     	;# 
  1093  0192                     	;# 
  1094  0193                     	;# 
  1095  0193                     	;# 
  1096  0194                     	;# 
  1097  0195                     	;# 
  1098  0196                     	;# 
  1099  0197                     	;# 
  1100  020C                     	;# 
  1101  0211                     	;# 
  1102  0211                     	;# 
  1103  0212                     	;# 
  1104  0212                     	;# 
  1105  0213                     	;# 
  1106  0213                     	;# 
  1107  0214                     	;# 
  1108  0214                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0216                     	;# 
  1113  0216                     	;# 
  1114  0217                     	;# 
  1115  0217                     	;# 
  1116  0391                     	;# 
  1117  0392                     	;# 
  1118  0393                     	;# 
  1119  0498                     	;# 
  1120  0498                     	;# 
  1121  0499                     	;# 
  1122  049A                     	;# 
  1123  049B                     	;# 
  1124  049B                     	;# 
  1125  049C                     	;# 
  1126  049D                     	;# 
  1127  049E                     	;# 
  1128  049F                     	;# 
  1129  0611                     	;# 
  1130  0612                     	;# 
  1131  0613                     	;# 
  1132  0613                     	;# 
  1133  0614                     	;# 
  1134  0615                     	;# 
  1135  0616                     	;# 
  1136  0616                     	;# 
  1137  0617                     	;# 
  1138  0618                     	;# 
  1139  0619                     	;# 
  1140  0619                     	;# 
  1141  061A                     	;# 
  1142  061B                     	;# 
  1143  061C                     	;# 
  1144  061C                     	;# 
  1145  0691                     	;# 
  1146  0692                     	;# 
  1147  0693                     	;# 
  1148  0694                     	;# 
  1149  0695                     	;# 
  1150  0F0F                     	;# 
  1151  0F10                     	;# 
  1152  0F11                     	;# 
  1153  0F12                     	;# 
  1154  0F13                     	;# 
  1155  0F14                     	;# 
  1156  0F15                     	;# 
  1157  0F16                     	;# 
  1158  0F17                     	;# 
  1159  0F18                     	;# 
  1160  0F19                     	;# 
  1161  0F1A                     	;# 
  1162  0F1B                     	;# 
  1163  0F1C                     	;# 
  1164  0F1D                     	;# 
  1165  0F1E                     	;# 
  1166  0F1F                     	;# 
  1167  0FE3                     	;# 
  1168  0FE4                     	;# 
  1169  0FE5                     	;# 
  1170  0FE6                     	;# 
  1171  0FE7                     	;# 
  1172  0FE8                     	;# 
  1173  0FE9                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEF                     	;# 
  1179                           
  1180                           	psect	idataBANK0
  1181  0205                     __pidataBANK0:	
  1182                           
  1183                           ;initializer for _boost_up
  1184  0205  3401               	retlw	1
  1185  0206  3400               	retlw	0
  1186                           
  1187                           ;initializer for _debounce_limit
  1188  0207  3419               	retlw	25
  1189  0208  3400               	retlw	0
  1190                           
  1191                           ;initializer for _fuzz_up
  1192  0209  3401               	retlw	1
  1193  020A  3400               	retlw	0
  1194                           
  1195                           ;initializer for _long_press_limit
  1196  020B  3400               	retlw	0
  1197  020C  342D               	retlw	45
  1198  000B                     _INTCONbits	set	11
  1199  0011                     _PIR1bits	set	17
  1200  000C                     _PORTAbits	set	12
  1201  001C                     _T2CONbits	set	28
  1202  009D                     _ADCON0bits	set	157
  1203  009E                     _ADCON1bits	set	158
  1204  009C                     _ADRESH	set	156
  1205  009B                     _ADRESL	set	155
  1206  0099                     _OSCCONbits	set	153
  1207  009A                     _OSCSTAT	set	154
  1208  008C                     _TRISAbits	set	140
  1209  008E                     _TRISCbits	set	142
  1210  010C                     _LATAbits	set	268
  1211  010E                     _LATCbits	set	270
  1212  018C                     _ANSELAbits	set	396
  1213  0192                     _PMADRH	set	402
  1214  0191                     _PMADRL	set	401
  1215  0195                     _PMCON1bits	set	405
  1216  0196                     _PMCON2	set	406
  1217  0194                     _PMDATH	set	404
  1218  0193                     _PMDATL	set	403
  1219                           
  1220                           ; #config settings
  1221  0000                     
  1222                           	psect	cinit
  1223  000E                     start_initialization:	
  1224  000E                     __initialization:	
  1225                           
  1226                           ; Clear objects allocated to BANK0
  1227  000E  3020               	movlw	low __pbssBANK0
  1228  000F  0084               	movwf	4
  1229  0010  3000               	movlw	high __pbssBANK0
  1230  0011  0085               	movwf	5
  1231  0012  3018               	movlw	24
  1232  0013  220D               	fcall	clear_ram0
  1233                           
  1234                           ; Initialize objects allocated to BANK0
  1235  0014  3005               	movlw	low __pidataBANK0
  1236  0015  0084               	movwf	4
  1237  0016  3082               	movlw	(high __pidataBANK0)| (0+128)
  1238  0017  0085               	movwf	5
  1239  0018  3038               	movlw	low __pdataBANK0
  1240  0019  0086               	movwf	6
  1241  001A  3000               	movlw	high __pdataBANK0
  1242  001B  0087               	movwf	7
  1243  001C  3008               	movlw	8
  1244  001D  2213               	fcall	init_ram
  1245  001E                     end_of_initialization:	
  1246                           ;End of C runtime variable initialization code
  1247                           
  1248  001E                     __end_of__initialization:	
  1249  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1250  001F  0020               	movlb	0
  1251  0020  29D0               	ljmp	_main	;jump to C main() function
  1252                           
  1253                           	psect	bssBANK0
  1254  0020                     __pbssBANK0:	
  1255  0020                     wait_ms@timel:	
  1256  0020                     	ds	4
  1257  0024                     _boost_down:	
  1258  0024                     	ds	2
  1259  0026                     _boost_pressed:	
  1260  0026                     	ds	2
  1261  0028                     _boost_state:	
  1262  0028                     	ds	2
  1263  002A                     _feedback_state:	
  1264  002A                     	ds	2
  1265  002C                     _fuzz_down:	
  1266  002C                     	ds	2
  1267  002E                     _fuzz_pressed:	
  1268  002E                     	ds	2
  1269  0030                     _fuzz_state:	
  1270  0030                     	ds	2
  1271  0032                     _fuzz_toggle:	
  1272  0032                     	ds	2
  1273  0034                     _fuzz_turning_on:	
  1274  0034                     	ds	2
  1275  0036                     _last_boost_state:	
  1276  0036                     	ds	2
  1277                           
  1278                           	psect	dataBANK0
  1279  0038                     __pdataBANK0:	
  1280  0038                     _boost_up:	
  1281  0038                     	ds	2
  1282  003A                     _debounce_limit:	
  1283  003A                     	ds	2
  1284  003C                     _fuzz_up:	
  1285  003C                     	ds	2
  1286  003E                     _long_press_limit:	
  1287  003E                     	ds	2
  1288                           
  1289                           	psect	clrtext
  1290  020D                     clear_ram0:	
  1291                           ;	Called with FSR0 containing the base address, and
  1292                           ;	WREG with the size to clear
  1293                           
  1294  020D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1295  020E                     clrloop0:	
  1296  020E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1297  020F  3101               	addfsr 0,1
  1298  0210  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1299  0211  2A0E               	goto	clrloop0	;have we reached the end yet?
  1300  0212  3400               	retlw	0	;all done for this memory range, return
  1301                           
  1302                           	psect	inittext
  1303  0213                     init_ram:	
  1304  0213  00FE               	movwf	126
  1305  0214                     initloop:	
  1306  0214  0012               	moviw fsr0++
  1307  0215  001E               	movwi fsr1++
  1308  0216  0BFE               	decfsz	126,f
  1309  0217  2A14               	goto	initloop
  1310  0218  3400               	retlw	0
  1311                           
  1312                           	psect	cstackCOMMON
  1313  0070                     __pcstackCOMMON:	
  1314  0070                     ?_ConfigureOscillator:	
  1315  0070                     ?_InitApp:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0070                     ?_initFuzz:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0070                     ?_initBoost:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0070                     ?_init_adc:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0070                     ?_isr:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0070                     ??_isr:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0070                     ?_main:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336                           
  1337                           ; 1 bytes @ 0x0
  1338  0070                     	ds	1
  1339  0071                     ??_ConfigureOscillator:	
  1340  0071                     ??_InitApp:	
  1341                           ; 1 bytes @ 0x1
  1342                           
  1343  0071                     ??_init_adc:	
  1344                           ; 1 bytes @ 0x1
  1345                           
  1346  0071                     ?_setFuzzState:	
  1347                           ; 1 bytes @ 0x1
  1348                           
  1349  0071                     ?_setFeedbackState:	
  1350                           ; 1 bytes @ 0x1
  1351                           
  1352  0071                     ?___lmul:	
  1353                           ; 1 bytes @ 0x1
  1354                           
  1355  0071                     setFuzzState@f_state:	
  1356                           ; 4 bytes @ 0x1
  1357                           
  1358  0071                     setFeedbackState@f_state:	
  1359                           ; 2 bytes @ 0x1
  1360                           
  1361  0071                     ___lmul@multiplier:	
  1362                           ; 2 bytes @ 0x1
  1363                           
  1364                           
  1365                           ; 4 bytes @ 0x1
  1366  0071                     	ds	2
  1367  0073                     ??_initFuzz:	
  1368  0073                     ?_updateFuzz:	
  1369                           ; 1 bytes @ 0x3
  1370                           
  1371  0073                     ??_setFuzzState:	
  1372                           ; 1 bytes @ 0x3
  1373                           
  1374  0073                     ??_setFeedbackState:	
  1375                           ; 1 bytes @ 0x3
  1376                           
  1377  0073                     updateFuzz@debounce_limit:	
  1378                           ; 1 bytes @ 0x3
  1379                           
  1380                           
  1381                           ; 2 bytes @ 0x3
  1382  0073                     	ds	2
  1383  0075                     ??_updateFuzz:	
  1384  0075                     ___lmul@multiplicand:	
  1385                           ; 1 bytes @ 0x5
  1386                           
  1387                           
  1388                           ; 4 bytes @ 0x5
  1389  0075                     	ds	4
  1390  0079                     ??___lmul:	
  1391  0079                     ___lmul@product:	
  1392                           ; 1 bytes @ 0x9
  1393                           
  1394                           
  1395                           ; 4 bytes @ 0x9
  1396  0079                     	ds	4
  1397  007D                     ??_initBoost:	
  1398  007D                     ??_setBoostState:	
  1399                           ; 1 bytes @ 0xD
  1400                           
  1401  007D                     ??_main:	
  1402                           ; 1 bytes @ 0xD
  1403                           
  1404  007D                     ??_wait_ms:	
  1405                           ; 1 bytes @ 0xD
  1406                           
  1407                           
  1408                           	psect	cstackBANK0
  1409  0040                     __pcstackBANK0:	
  1410                           ; 1 bytes @ 0xD
  1411                           
  1412  0040                     ?_wait_ms:	
  1413  0040                     wait_ms@time:	
  1414                           ; 1 bytes @ 0x0
  1415                           
  1416                           
  1417                           ; 2 bytes @ 0x0
  1418  0040                     	ds	2
  1419  0042                     ?_setBoostState:	
  1420  0042                     setBoostState@f_state:	
  1421                           ; 1 bytes @ 0x2
  1422                           
  1423                           
  1424                           ; 2 bytes @ 0x2
  1425  0042                     	ds	2
  1426  0044                     ?_updateBoost:	
  1427  0044                     updateBoost@debounce_limit:	
  1428                           ; 1 bytes @ 0x4
  1429                           
  1430                           
  1431                           ; 2 bytes @ 0x4
  1432  0044                     	ds	2
  1433  0046                     ??_updateBoost:	
  1434                           
  1435                           ; 1 bytes @ 0x6
  1436  0046                     	ds	2
  1437                           
  1438                           	psect	maintext
  1439  01D0                     __pmaintext:	
  1440 ;;
  1441 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1442 ;;
  1443 ;; *************** function _main *****************
  1444 ;; Defined at:
  1445 ;;		line 28 in file "main.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;		None
  1450 ;; Return value:  Size  Location     Type
  1451 ;;                  1    wreg      void 
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0, pclath, cstack
  1454 ;; Tracked objects:
  1455 ;;		On entry : B1F/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMMON   BANK0   BANK1
  1459 ;;      Params:         0       0       0
  1460 ;;      Locals:         0       0       0
  1461 ;;      Temps:          0       0       0
  1462 ;;      Totals:         0       0       0
  1463 ;;Total ram usage:        0 bytes
  1464 ;; Hardware stack levels required when called:    5
  1465 ;; This function calls:
  1466 ;;		_ConfigureOscillator
  1467 ;;		_InitApp
  1468 ;;		_initBoost
  1469 ;;		_initFuzz
  1470 ;;		_updateBoost
  1471 ;;		_updateFuzz
  1472 ;; This function is called by:
  1473 ;;		Startup code after reset
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           
  1478                           ;psect for function _main
  1479  01D0                     _main:	
  1480                           
  1481                           ;main.c: 29: ConfigureOscillator();
  1482                           
  1483                           ;incstack = 0
  1484                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1485  01D0  221F               	fcall	_ConfigureOscillator
  1486                           
  1487                           ;main.c: 30: InitApp();
  1488  01D1  21E1               	fcall	_InitApp
  1489                           
  1490                           ;main.c: 32: initFuzz();
  1491  01D2  21FC               	fcall	_initFuzz
  1492                           
  1493                           ;main.c: 33: initBoost();
  1494  01D3  2219               	fcall	_initBoost
  1495  01D4                     l58:	
  1496                           ;main.c: 35: while (1) {
  1497                           
  1498                           
  1499                           ;main.c: 36: updateFuzz(debounce_limit);
  1500  01D4  0020               	movlb	0	; select bank0
  1501  01D5  083B               	movf	_debounce_limit+1,w
  1502  01D6  00F4               	movwf	updateFuzz@debounce_limit+1
  1503  01D7  083A               	movf	_debounce_limit,w
  1504  01D8  00F3               	movwf	updateFuzz@debounce_limit
  1505  01D9  2021               	fcall	_updateFuzz
  1506                           
  1507                           ;main.c: 37: updateBoost(debounce_limit);
  1508  01DA  0020               	movlb	0	; select bank0
  1509  01DB  083B               	movf	_debounce_limit+1,w
  1510  01DC  00C5               	movwf	updateBoost@debounce_limit+1
  1511  01DD  083A               	movf	_debounce_limit,w
  1512  01DE  00C4               	movwf	updateBoost@debounce_limit
  1513  01DF  20C2               	fcall	_updateBoost
  1514  01E0  29D4               	goto	l58
  1515  01E1                     __end_of_main:	
  1516                           
  1517                           	psect	text1
  1518  0021                     __ptext1:	
  1519 ;; *************** function _updateFuzz *****************
  1520 ;; Defined at:
  1521 ;;		line 44 in file "mcc_generated_files/fuzz.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;  debounce_lim    2    3[COMMON] int 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;		None
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, status,2, status,0, pclath, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMMON   BANK0   BANK1
  1535 ;;      Params:         2       0       0
  1536 ;;      Locals:         0       0       0
  1537 ;;      Temps:          1       0       0
  1538 ;;      Totals:         3       0       0
  1539 ;;Total ram usage:        3 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    2
  1542 ;; This function calls:
  1543 ;;		_setFeedbackState
  1544 ;;		_setFuzzState
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           
  1551                           ;psect for function _updateFuzz
  1552  0021                     _updateFuzz:	
  1553                           
  1554                           ;fuzz.c: 51: if (PORTAbits.RA4 == 0) {
  1555                           
  1556                           ;incstack = 0
  1557                           ; Regs used in _updateFuzz: [wreg+status,2+status,0+pclath+cstack]
  1558  0021  0020               	movlb	0	; select bank0
  1559  0022  1A0C               	btfsc	12,4	;volatile
  1560  0023  2834               	goto	l951
  1561                           
  1562                           ;fuzz.c: 52: if (fuzz_pressed > 0) {
  1563  0024  082F               	movf	_fuzz_pressed+1,w
  1564  0025  3A80               	xorlw	128
  1565  0026  00F5               	movwf	??_updateFuzz
  1566  0027  3080               	movlw	128
  1567  0028  0275               	subwf	??_updateFuzz,w
  1568  0029  1D03               	skipz
  1569  002A  282D               	goto	u495
  1570  002B  3001               	movlw	1
  1571  002C  022E               	subwf	_fuzz_pressed,w
  1572  002D                     u495:	
  1573  002D  1C03               	skipc
  1574  002E  2845               	goto	l955
  1575                           
  1576                           ;fuzz.c: 53: fuzz_pressed--;
  1577  002F  30FF               	movlw	255
  1578  0030  0020               	movlb	0	; select bank0
  1579  0031  07AE               	addwf	_fuzz_pressed,f
  1580  0032  30FF               	movlw	255
  1581  0033  2844               	goto	L1
  1582  0034                     l951:	
  1583                           ;fuzz.c: 54: }
  1584                           ;fuzz.c: 55: } else if (fuzz_pressed < debounce_limit) {
  1585                           
  1586  0034  082F               	movf	_fuzz_pressed+1,w
  1587  0035  3A80               	xorlw	128
  1588  0036  00F5               	movwf	??_updateFuzz
  1589  0037  0874               	movf	updateFuzz@debounce_limit+1,w
  1590  0038  3A80               	xorlw	128
  1591  0039  0275               	subwf	??_updateFuzz,w
  1592  003A  1D03               	skipz
  1593  003B  283E               	goto	u505
  1594  003C  0873               	movf	updateFuzz@debounce_limit,w
  1595  003D  022E               	subwf	_fuzz_pressed,w
  1596  003E                     u505:	
  1597  003E  1803               	skipnc
  1598  003F  2845               	goto	l955
  1599                           
  1600                           ;fuzz.c: 56: fuzz_pressed++;
  1601  0040  3001               	movlw	1
  1602  0041  0020               	movlb	0	; select bank0
  1603  0042  07AE               	addwf	_fuzz_pressed,f
  1604  0043  3000               	movlw	0
  1605  0044                     L1:	
  1606  0044  3DAF               	addwfc	_fuzz_pressed+1,f
  1607  0045                     l955:	
  1608                           
  1609                           ;fuzz.c: 58: }
  1610                           ;fuzz.c: 64: if (fuzz_pressed == 0) {
  1611  0045  0020               	movlb	0	; select bank0
  1612  0046  082E               	movf	_fuzz_pressed,w
  1613  0047  042F               	iorwf	_fuzz_pressed+1,w
  1614  0048  1D03               	btfss	3,2
  1615  0049  288E               	goto	l985
  1616                           
  1617                           ;fuzz.c: 66: fuzz_down++;
  1618  004A  3001               	movlw	1
  1619  004B  07AC               	addwf	_fuzz_down,f
  1620  004C  3000               	movlw	0
  1621  004D  3DAD               	addwfc	_fuzz_down+1,f
  1622                           
  1623                           ;fuzz.c: 67: if (fuzz_state == 1) {
  1624  004E  0330               	decf	_fuzz_state,w
  1625  004F  0431               	iorwf	_fuzz_state+1,w
  1626  0050  1D03               	btfss	3,2
  1627  0051  287B               	goto	l975
  1628                           
  1629                           ;fuzz.c: 68: if (fuzz_up == 1) {
  1630  0052  033C               	decf	_fuzz_up,w
  1631  0053  043D               	iorwf	_fuzz_up+1,w
  1632  0054  1D03               	btfss	3,2
  1633  0055  285A               	goto	l149
  1634                           
  1635                           ;fuzz.c: 69: fuzz_toggle = 1;
  1636  0056  3001               	movlw	1
  1637  0057  00B2               	movwf	_fuzz_toggle
  1638  0058  3000               	movlw	0
  1639  0059  00B3               	movwf	_fuzz_toggle+1
  1640  005A                     l149:	
  1641                           
  1642                           ;fuzz.c: 70: }
  1643                           ;fuzz.c: 72: if (fuzz_down >= long_press_limit && feedback_state == 0 && fuzz_turning_on
      +                           == 0) {
  1644  005A  082D               	movf	_fuzz_down+1,w
  1645  005B  3A80               	xorlw	128
  1646  005C  00F5               	movwf	??_updateFuzz
  1647  005D  083F               	movf	_long_press_limit+1,w
  1648  005E  3A80               	xorlw	128
  1649  005F  0275               	subwf	??_updateFuzz,w
  1650  0060  1D03               	skipz
  1651  0061  2864               	goto	u545
  1652  0062  083E               	movf	_long_press_limit,w
  1653  0063  022C               	subwf	_fuzz_down,w
  1654  0064                     u545:	
  1655  0064  1C03               	skipc
  1656  0065  288A               	goto	l983
  1657  0066  0020               	movlb	0	; select bank0
  1658  0067  082A               	movf	_feedback_state,w
  1659  0068  042B               	iorwf	_feedback_state+1,w
  1660  0069  1D03               	btfss	3,2
  1661  006A  288A               	goto	l983
  1662  006B  0834               	movf	_fuzz_turning_on,w
  1663  006C  0435               	iorwf	_fuzz_turning_on+1,w
  1664  006D  1D03               	btfss	3,2
  1665  006E  288A               	goto	l983
  1666                           
  1667                           ;fuzz.c: 74: fuzz_down = long_press_limit;
  1668  006F  083F               	movf	_long_press_limit+1,w
  1669  0070  00AD               	movwf	_fuzz_down+1
  1670  0071  083E               	movf	_long_press_limit,w
  1671  0072  00AC               	movwf	_fuzz_down
  1672                           
  1673                           ;fuzz.c: 75: LATAbits.LATA2 = 0;
  1674  0073  0022               	movlb	2	; select bank2
  1675  0074  110C               	bcf	12,2	;volatile
  1676                           
  1677                           ;fuzz.c: 76: setFeedbackState(1);
  1678  0075  3001               	movlw	1
  1679  0076  00F1               	movwf	setFeedbackState@f_state
  1680  0077  3000               	movlw	0
  1681  0078  00F2               	movwf	setFeedbackState@f_state+1
  1682  0079  21BC               	fcall	_setFeedbackState
  1683                           
  1684                           ;fuzz.c: 77: }
  1685                           ;fuzz.c: 78: } else {
  1686  007A  288A               	goto	l983
  1687  007B                     l975:	
  1688                           
  1689                           ;fuzz.c: 80: fuzz_turning_on = 1;
  1690  007B  3001               	movlw	1
  1691  007C  0020               	movlb	0	; select bank0
  1692  007D  00B4               	movwf	_fuzz_turning_on
  1693  007E  3000               	movlw	0
  1694  007F  00B5               	movwf	_fuzz_turning_on+1
  1695                           
  1696                           ;fuzz.c: 81: fuzz_toggle = 0;
  1697  0080  01B2               	clrf	_fuzz_toggle
  1698  0081  01B3               	clrf	_fuzz_toggle+1
  1699                           
  1700                           ;fuzz.c: 82: setFuzzState(1);
  1701  0082  3001               	movlw	1
  1702  0083  00F1               	movwf	setFuzzState@f_state
  1703  0084  3000               	movlw	0
  1704  0085  00F2               	movwf	setFuzzState@f_state+1
  1705  0086  21A8               	fcall	_setFuzzState
  1706                           
  1707                           ;fuzz.c: 83: feedback_state = 0;
  1708  0087  0020               	movlb	0	; select bank0
  1709  0088  01AA               	clrf	_feedback_state
  1710  0089  01AB               	clrf	_feedback_state+1
  1711  008A                     l983:	
  1712                           
  1713                           ;fuzz.c: 84: }
  1714                           ;fuzz.c: 87: fuzz_up = 0;
  1715  008A  0020               	movlb	0	; select bank0
  1716  008B  01BC               	clrf	_fuzz_up
  1717  008C  01BD               	clrf	_fuzz_up+1
  1718                           
  1719                           ;fuzz.c: 88: } else if (fuzz_pressed >= debounce_limit) {
  1720  008D  0008               	return
  1721  008E                     l985:	
  1722  008E  082F               	movf	_fuzz_pressed+1,w
  1723  008F  3A80               	xorlw	128
  1724  0090  00F5               	movwf	??_updateFuzz
  1725  0091  0874               	movf	updateFuzz@debounce_limit+1,w
  1726  0092  3A80               	xorlw	128
  1727  0093  0275               	subwf	??_updateFuzz,w
  1728  0094  1D03               	skipz
  1729  0095  2898               	goto	u575
  1730  0096  0873               	movf	updateFuzz@debounce_limit,w
  1731  0097  022E               	subwf	_fuzz_pressed,w
  1732  0098                     u575:	
  1733  0098  1C03               	skipc
  1734  0099  0008               	return
  1735                           
  1736                           ;fuzz.c: 91: setFeedbackState(0);
  1737  009A  3000               	movlw	0
  1738  009B  00F1               	movwf	setFeedbackState@f_state
  1739  009C  00F2               	movwf	setFeedbackState@f_state+1
  1740  009D  21BC               	fcall	_setFeedbackState
  1741                           
  1742                           ;fuzz.c: 92: if (fuzz_toggle == 1 && feedback_state == 0) {
  1743  009E  0020               	movlb	0	; select bank0
  1744  009F  0332               	decf	_fuzz_toggle,w
  1745  00A0  0433               	iorwf	_fuzz_toggle+1,w
  1746  00A1  1D03               	btfss	3,2
  1747  00A2  28AB               	goto	l995
  1748  00A3  082A               	movf	_feedback_state,w
  1749  00A4  042B               	iorwf	_feedback_state+1,w
  1750  00A5  1D03               	btfss	3,2
  1751  00A6  28AB               	goto	l995
  1752                           
  1753                           ;fuzz.c: 93: setFuzzState(0);
  1754  00A7  3000               	movlw	0
  1755  00A8  00F1               	movwf	setFuzzState@f_state
  1756  00A9  00F2               	movwf	setFuzzState@f_state+1
  1757  00AA  21A8               	fcall	_setFuzzState
  1758  00AB                     l995:	
  1759                           
  1760                           ;fuzz.c: 94: }
  1761                           ;fuzz.c: 95: LATAbits.LATA2 = fuzz_state;
  1762  00AB  0020               	movlb	0	; select bank0
  1763  00AC  0C30               	rrf	_fuzz_state,w
  1764  00AD  0022               	movlb	2	; select bank2
  1765  00AE  1C03               	skipc
  1766  00AF  110C               	bcf	12,2	;volatile
  1767  00B0  1803               	skipnc
  1768  00B1  150C               	bsf	12,2	;volatile
  1769                           
  1770                           ;fuzz.c: 96: fuzz_turning_on = 0;
  1771  00B2  0020               	movlb	0	; select bank0
  1772  00B3  01B4               	clrf	_fuzz_turning_on
  1773  00B4  01B5               	clrf	_fuzz_turning_on+1
  1774                           
  1775                           ;fuzz.c: 97: fuzz_toggle = 0;
  1776  00B5  01B2               	clrf	_fuzz_toggle
  1777  00B6  01B3               	clrf	_fuzz_toggle+1
  1778                           
  1779                           ;fuzz.c: 98: fuzz_up = 1;
  1780  00B7  3001               	movlw	1
  1781  00B8  00BC               	movwf	_fuzz_up
  1782  00B9  3000               	movlw	0
  1783  00BA  00BD               	movwf	_fuzz_up+1
  1784                           
  1785                           ;fuzz.c: 99: fuzz_down = 0;
  1786  00BB  01AC               	clrf	_fuzz_down
  1787  00BC  01AD               	clrf	_fuzz_down+1
  1788                           
  1789                           ;fuzz.c: 100: fuzz_pressed = debounce_limit;
  1790  00BD  0874               	movf	updateFuzz@debounce_limit+1,w
  1791  00BE  00AF               	movwf	_fuzz_pressed+1
  1792  00BF  0873               	movf	updateFuzz@debounce_limit,w
  1793  00C0  00AE               	movwf	_fuzz_pressed
  1794  00C1  0008               	return
  1795  00C2                     __end_of_updateFuzz:	
  1796                           
  1797                           	psect	text2
  1798  00C2                     __ptext2:	
  1799 ;; *************** function _updateBoost *****************
  1800 ;; Defined at:
  1801 ;;		line 26 in file "mcc_generated_files/boost.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  debounce_lim    2    4[BANK0 ] int 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0, pclath, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMMON   BANK0   BANK1
  1815 ;;      Params:         0       2       0
  1816 ;;      Locals:         0       0       0
  1817 ;;      Temps:          0       2       0
  1818 ;;      Totals:         0       4       0
  1819 ;;Total ram usage:        4 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    4
  1822 ;; This function calls:
  1823 ;;		_setBoostState
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           
  1830                           ;psect for function _updateBoost
  1831  00C2                     _updateBoost:	
  1832                           
  1833                           ;boost.c: 33: if (PORTAbits.RA5 == 0) {
  1834                           
  1835                           ;incstack = 0
  1836                           ; Regs used in _updateBoost: [wreg+status,2+status,0+pclath+cstack]
  1837  00C2  0020               	movlb	0	; select bank0
  1838  00C3  1A8C               	btfsc	12,5	;volatile
  1839  00C4  28D5               	goto	l1013
  1840                           
  1841                           ;boost.c: 34: if (boost_pressed > 0) {
  1842  00C5  0827               	movf	_boost_pressed+1,w
  1843  00C6  3A80               	xorlw	128
  1844  00C7  00C6               	movwf	??_updateBoost
  1845  00C8  3080               	movlw	128
  1846  00C9  0246               	subwf	??_updateBoost,w
  1847  00CA  1D03               	skipz
  1848  00CB  28CE               	goto	u615
  1849  00CC  3001               	movlw	1
  1850  00CD  0226               	subwf	_boost_pressed,w
  1851  00CE                     u615:	
  1852  00CE  1C03               	skipc
  1853  00CF  28E6               	goto	l1017
  1854                           
  1855                           ;boost.c: 35: boost_pressed--;
  1856  00D0  30FF               	movlw	255
  1857  00D1  0020               	movlb	0	; select bank0
  1858  00D2  07A6               	addwf	_boost_pressed,f
  1859  00D3  30FF               	movlw	255
  1860  00D4  28E5               	goto	L2
  1861  00D5                     l1013:	
  1862                           ;boost.c: 36: }
  1863                           ;boost.c: 37: } else if (boost_pressed < debounce_limit) {
  1864                           
  1865  00D5  0827               	movf	_boost_pressed+1,w
  1866  00D6  3A80               	xorlw	128
  1867  00D7  00C6               	movwf	??_updateBoost
  1868  00D8  0845               	movf	updateBoost@debounce_limit+1,w
  1869  00D9  3A80               	xorlw	128
  1870  00DA  0246               	subwf	??_updateBoost,w
  1871  00DB  1D03               	skipz
  1872  00DC  28DF               	goto	u625
  1873  00DD  0844               	movf	updateBoost@debounce_limit,w
  1874  00DE  0226               	subwf	_boost_pressed,w
  1875  00DF                     u625:	
  1876  00DF  1803               	skipnc
  1877  00E0  28E6               	goto	l1017
  1878                           
  1879                           ;boost.c: 38: boost_pressed++;
  1880  00E1  3001               	movlw	1
  1881  00E2  0020               	movlb	0	; select bank0
  1882  00E3  07A6               	addwf	_boost_pressed,f
  1883  00E4  3000               	movlw	0
  1884  00E5                     L2:	
  1885  00E5  3DA7               	addwfc	_boost_pressed+1,f
  1886  00E6                     l1017:	
  1887                           
  1888                           ;boost.c: 39: }
  1889                           ;boost.c: 45: if (boost_pressed == 0) {
  1890  00E6  0020               	movlb	0	; select bank0
  1891  00E7  0826               	movf	_boost_pressed,w
  1892  00E8  0427               	iorwf	_boost_pressed+1,w
  1893  00E9  1D03               	btfss	3,2
  1894  00EA  2905               	goto	l1027
  1895                           
  1896                           ;boost.c: 46: boost_down = 1;
  1897  00EB  3001               	movlw	1
  1898  00EC  00A4               	movwf	_boost_down
  1899  00ED  3000               	movlw	0
  1900  00EE  00A5               	movwf	_boost_down+1
  1901                           
  1902                           ;boost.c: 47: if (boost_up == 1) {
  1903  00EF  0338               	decf	_boost_up,w
  1904  00F0  0439               	iorwf	_boost_up+1,w
  1905  00F1  1D03               	btfss	3,2
  1906  00F2  2901               	goto	l1025
  1907                           
  1908                           ;boost.c: 48: setBoostState(!boost_state);
  1909  00F3  0828               	movf	_boost_state,w
  1910  00F4  0429               	iorwf	_boost_state+1,w
  1911  00F5  1D03               	btfss	3,2
  1912  00F6  28F9               	goto	u650
  1913  00F7  3001               	movlw	1
  1914  00F8  28FA               	goto	u660
  1915  00F9                     u650:	
  1916  00F9  3000               	movlw	0
  1917  00FA                     u660:	
  1918  00FA  00C6               	movwf	??_updateBoost
  1919  00FB  01C7               	clrf	??_updateBoost+1
  1920  00FC  0846               	movf	??_updateBoost,w
  1921  00FD  00C2               	movwf	setBoostState@f_state
  1922  00FE  0847               	movf	??_updateBoost+1,w
  1923  00FF  00C3               	movwf	setBoostState@f_state+1
  1924  0100  211D               	fcall	_setBoostState
  1925  0101                     l1025:	
  1926                           
  1927                           ;boost.c: 49: }
  1928                           ;boost.c: 50: boost_up = 0;
  1929  0101  0020               	movlb	0	; select bank0
  1930  0102  01B8               	clrf	_boost_up
  1931  0103  01B9               	clrf	_boost_up+1
  1932                           
  1933                           ;boost.c: 51: } else if (boost_pressed >= debounce_limit) {
  1934  0104  0008               	return
  1935  0105                     l1027:	
  1936  0105  0827               	movf	_boost_pressed+1,w
  1937  0106  3A80               	xorlw	128
  1938  0107  00C6               	movwf	??_updateBoost
  1939  0108  0845               	movf	updateBoost@debounce_limit+1,w
  1940  0109  3A80               	xorlw	128
  1941  010A  0246               	subwf	??_updateBoost,w
  1942  010B  1D03               	skipz
  1943  010C  290F               	goto	u675
  1944  010D  0844               	movf	updateBoost@debounce_limit,w
  1945  010E  0226               	subwf	_boost_pressed,w
  1946  010F                     u675:	
  1947  010F  1C03               	skipc
  1948  0110  0008               	return
  1949                           
  1950                           ;boost.c: 52: boost_up = 1;
  1951  0111  3001               	movlw	1
  1952  0112  0020               	movlb	0	; select bank0
  1953  0113  00B8               	movwf	_boost_up
  1954  0114  3000               	movlw	0
  1955  0115  00B9               	movwf	_boost_up+1
  1956                           
  1957                           ;boost.c: 53: boost_down = 0;
  1958  0116  01A4               	clrf	_boost_down
  1959  0117  01A5               	clrf	_boost_down+1
  1960                           
  1961                           ;boost.c: 54: boost_pressed = debounce_limit;
  1962  0118  0845               	movf	updateBoost@debounce_limit+1,w
  1963  0119  00A7               	movwf	_boost_pressed+1
  1964  011A  0844               	movf	updateBoost@debounce_limit,w
  1965  011B  00A6               	movwf	_boost_pressed
  1966  011C  0008               	return
  1967  011D                     __end_of_updateBoost:	
  1968                           
  1969                           	psect	text3
  1970  01FC                     __ptext3:	
  1971 ;; *************** function _initFuzz *****************
  1972 ;; Defined at:
  1973 ;;		line 27 in file "mcc_generated_files/fuzz.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;		None
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2, status,0, pclath, cstack
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMMON   BANK0   BANK1
  1987 ;;      Params:         0       0       0
  1988 ;;      Locals:         0       0       0
  1989 ;;      Temps:          0       0       0
  1990 ;;      Totals:         0       0       0
  1991 ;;Total ram usage:        0 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:    2
  1994 ;; This function calls:
  1995 ;;		_setFeedbackState
  1996 ;;		_setFuzzState
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           
  2003                           ;psect for function _initFuzz
  2004  01FC                     _initFuzz:	
  2005                           
  2006                           ;fuzz.c: 32: setFuzzState(0);
  2007                           
  2008                           ;incstack = 0
  2009                           ; Regs used in _initFuzz: [wreg+status,2+status,0+pclath+cstack]
  2010  01FC  3000               	movlw	0
  2011  01FD  00F1               	movwf	setFuzzState@f_state
  2012  01FE  00F2               	movwf	setFuzzState@f_state+1
  2013  01FF  21A8               	fcall	_setFuzzState
  2014                           
  2015                           ;fuzz.c: 40: setFeedbackState(0);
  2016  0200  3000               	movlw	0
  2017  0201  00F1               	movwf	setFeedbackState@f_state
  2018  0202  00F2               	movwf	setFeedbackState@f_state+1
  2019  0203  21BC               	fcall	_setFeedbackState
  2020  0204  0008               	return
  2021  0205                     __end_of_initFuzz:	
  2022                           
  2023                           	psect	text4
  2024  01A8                     __ptext4:	
  2025 ;; *************** function _setFuzzState *****************
  2026 ;; Defined at:
  2027 ;;		line 104 in file "mcc_generated_files/fuzz.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  f_state         2    1[COMMON] int 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, status,0
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMMON   BANK0   BANK1
  2041 ;;      Params:         2       0       0
  2042 ;;      Locals:         0       0       0
  2043 ;;      Temps:          0       0       0
  2044 ;;      Totals:         2       0       0
  2045 ;;Total ram usage:        2 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    1
  2048 ;; This function calls:
  2049 ;;		Nothing
  2050 ;; This function is called by:
  2051 ;;		_initFuzz
  2052 ;;		_updateFuzz
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function _setFuzzState
  2058  01A8                     _setFuzzState:	
  2059                           
  2060                           ;fuzz.c: 105: if (fuzz_state == f_state) {return;}
  2061                           
  2062                           ;incstack = 0
  2063                           ; Regs used in _setFuzzState: [wreg+status,0]
  2064  01A8  0872               	movf	setFuzzState@f_state+1,w
  2065  01A9  0020               	movlb	0	; select bank0
  2066  01AA  0631               	xorwf	_fuzz_state+1,w
  2067  01AB  1D03               	skipz
  2068  01AC  29AF               	goto	u435
  2069  01AD  0871               	movf	setFuzzState@f_state,w
  2070  01AE  0630               	xorwf	_fuzz_state,w
  2071  01AF                     u435:	
  2072  01AF  1903               	btfsc	3,2
  2073  01B0  0008               	return
  2074                           
  2075                           ;fuzz.c: 106: fuzz_state = f_state;
  2076  01B1  0872               	movf	setFuzzState@f_state+1,w
  2077  01B2  00B1               	movwf	_fuzz_state+1
  2078  01B3  0871               	movf	setFuzzState@f_state,w
  2079  01B4  00B0               	movwf	_fuzz_state
  2080                           
  2081                           ;fuzz.c: 107: LATAbits.LATA2 = f_state;
  2082  01B5  0C71               	rrf	setFuzzState@f_state,w
  2083  01B6  0022               	movlb	2	; select bank2
  2084  01B7  1C03               	skipc
  2085  01B8  110C               	bcf	12,2	;volatile
  2086  01B9  1803               	skipnc
  2087  01BA  150C               	bsf	12,2	;volatile
  2088  01BB  0008               	return
  2089  01BC                     __end_of_setFuzzState:	
  2090                           
  2091                           	psect	text5
  2092  01BC                     __ptext5:	
  2093 ;; *************** function _setFeedbackState *****************
  2094 ;; Defined at:
  2095 ;;		line 121 in file "mcc_generated_files/fuzz.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;  f_state         2    1[COMMON] int 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  1    wreg      void 
  2102 ;; Registers used:
  2103 ;;		wreg, status,0
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMMON   BANK0   BANK1
  2109 ;;      Params:         2       0       0
  2110 ;;      Locals:         0       0       0
  2111 ;;      Temps:          0       0       0
  2112 ;;      Totals:         2       0       0
  2113 ;;Total ram usage:        2 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    1
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_initFuzz
  2120 ;;		_updateFuzz
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           
  2125                           ;psect for function _setFeedbackState
  2126  01BC                     _setFeedbackState:	
  2127                           
  2128                           ;fuzz.c: 122: if (feedback_state == f_state) {return;}
  2129                           
  2130                           ;incstack = 0
  2131                           ; Regs used in _setFeedbackState: [wreg+status,0]
  2132  01BC  0872               	movf	setFeedbackState@f_state+1,w
  2133  01BD  0020               	movlb	0	; select bank0
  2134  01BE  062B               	xorwf	_feedback_state+1,w
  2135  01BF  1D03               	skipz
  2136  01C0  29C3               	goto	u445
  2137  01C1  0871               	movf	setFeedbackState@f_state,w
  2138  01C2  062A               	xorwf	_feedback_state,w
  2139  01C3                     u445:	
  2140  01C3  1903               	btfsc	3,2
  2141  01C4  0008               	return
  2142                           
  2143                           ;fuzz.c: 123: feedback_state = f_state;
  2144  01C5  0872               	movf	setFeedbackState@f_state+1,w
  2145  01C6  00AB               	movwf	_feedback_state+1
  2146  01C7  0871               	movf	setFeedbackState@f_state,w
  2147  01C8  00AA               	movwf	_feedback_state
  2148                           
  2149                           ;fuzz.c: 124: LATCbits.LATC3 = f_state;
  2150  01C9  0C71               	rrf	setFeedbackState@f_state,w
  2151  01CA  0022               	movlb	2	; select bank2
  2152  01CB  1C03               	skipc
  2153  01CC  118E               	bcf	14,3	;volatile
  2154  01CD  1803               	skipnc
  2155  01CE  158E               	bsf	14,3	;volatile
  2156  01CF  0008               	return
  2157  01D0                     __end_of_setFeedbackState:	
  2158                           
  2159                           	psect	text6
  2160  0219                     __ptext6:	
  2161 ;; *************** function _initBoost *****************
  2162 ;; Defined at:
  2163 ;;		line 22 in file "mcc_generated_files/boost.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0, pclath, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1
  2177 ;;      Params:         0       0       0
  2178 ;;      Locals:         0       0       0
  2179 ;;      Temps:          0       0       0
  2180 ;;      Totals:         0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    4
  2184 ;; This function calls:
  2185 ;;		_setBoostState
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function _initBoost
  2193  0219                     _initBoost:	
  2194                           
  2195                           ;boost.c: 23: setBoostState(0);
  2196                           
  2197                           ;incstack = 0
  2198                           ; Regs used in _initBoost: [wreg+status,2+status,0+pclath+cstack]
  2199  0219  3000               	movlw	0
  2200  021A  0020               	movlb	0	; select bank0
  2201  021B  00C2               	movwf	setBoostState@f_state
  2202  021C  00C3               	movwf	setBoostState@f_state+1
  2203  021D  211D               	fcall	_setBoostState
  2204  021E  0008               	return
  2205  021F                     __end_of_initBoost:	
  2206                           
  2207                           	psect	text7
  2208  011D                     __ptext7:	
  2209 ;; *************** function _setBoostState *****************
  2210 ;; Defined at:
  2211 ;;		line 61 in file "mcc_generated_files/boost.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  f_state         2    2[BANK0 ] int 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		wreg, status,2, status,0, pclath, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMMON   BANK0   BANK1
  2225 ;;      Params:         0       2       0
  2226 ;;      Locals:         0       0       0
  2227 ;;      Temps:          0       0       0
  2228 ;;      Totals:         0       2       0
  2229 ;;Total ram usage:        2 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    3
  2232 ;; This function calls:
  2233 ;;		_wait_ms
  2234 ;; This function is called by:
  2235 ;;		_initBoost
  2236 ;;		_updateBoost
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           
  2241                           ;psect for function _setBoostState
  2242  011D                     _setBoostState:	
  2243                           
  2244                           ;boost.c: 62: if (boost_state == f_state) {return;}
  2245                           
  2246                           ;incstack = 0
  2247                           ; Regs used in _setBoostState: [wreg+status,2+status,0+pclath+cstack]
  2248  011D  0020               	movlb	0	; select bank0
  2249  011E  0843               	movf	setBoostState@f_state+1,w
  2250  011F  0629               	xorwf	_boost_state+1,w
  2251  0120  1D03               	skipz
  2252  0121  2924               	goto	u455
  2253  0122  0842               	movf	setBoostState@f_state,w
  2254  0123  0628               	xorwf	_boost_state,w
  2255  0124                     u455:	
  2256  0124  1903               	btfsc	3,2
  2257  0125  0008               	return
  2258                           
  2259                           ;boost.c: 63: boost_state = f_state;
  2260  0126  0843               	movf	setBoostState@f_state+1,w
  2261  0127  00A9               	movwf	_boost_state+1
  2262  0128  0842               	movf	setBoostState@f_state,w
  2263  0129  00A8               	movwf	_boost_state
  2264                           
  2265                           ;boost.c: 64: LATCbits.LATC5 = f_state;
  2266  012A  0C42               	rrf	setBoostState@f_state,w
  2267  012B  0022               	movlb	2	; select bank2
  2268  012C  1C03               	skipc
  2269  012D  128E               	bcf	14,5	;volatile
  2270  012E  1803               	skipnc
  2271  012F  168E               	bsf	14,5	;volatile
  2272                           
  2273                           ;boost.c: 65: LATCbits.LATC0 = f_state;
  2274  0130  0020               	movlb	0	; select bank0
  2275  0131  0C42               	rrf	setBoostState@f_state,w
  2276  0132  0022               	movlb	2	; select bank2
  2277  0133  1C03               	skipc
  2278  0134  100E               	bcf	14,0	;volatile
  2279  0135  1803               	skipnc
  2280  0136  140E               	bsf	14,0	;volatile
  2281                           
  2282                           ;boost.c: 66: LATCbits.LATC4 = !f_state;
  2283  0137  0020               	movlb	0	; select bank0
  2284  0138  0842               	movf	setBoostState@f_state,w
  2285  0139  0443               	iorwf	setBoostState@f_state+1,w
  2286  013A  1D03               	btfss	3,2
  2287  013B  293F               	goto	u460
  2288  013C  0022               	movlb	2	; select bank2
  2289  013D  160E               	bsf	14,4	;volatile
  2290  013E  2941               	goto	l925
  2291  013F                     u460:	
  2292  013F  0022               	movlb	2	; select bank2
  2293  0140  120E               	bcf	14,4	;volatile
  2294  0141                     l925:	
  2295                           
  2296                           ;boost.c: 68: wait_ms(10);
  2297  0141  300A               	movlw	10
  2298  0142  0020               	movlb	0	; select bank0
  2299  0143  00C0               	movwf	wait_ms@time
  2300  0144  3000               	movlw	0
  2301  0145  00C1               	movwf	wait_ms@time+1
  2302  0146  2180               	fcall	_wait_ms
  2303                           
  2304                           ;boost.c: 70: LATCbits.LATC0 = 0;
  2305  0147  0022               	movlb	2	; select bank2
  2306  0148  100E               	bcf	14,0	;volatile
  2307                           
  2308                           ;boost.c: 71: LATCbits.LATC4 = 0;
  2309  0149  120E               	bcf	14,4	;volatile
  2310                           
  2311                           ;boost.c: 73: wait_ms(10);
  2312  014A  300A               	movlw	10
  2313  014B  0020               	movlb	0	; select bank0
  2314  014C  00C0               	movwf	wait_ms@time
  2315  014D  3000               	movlw	0
  2316  014E  00C1               	movwf	wait_ms@time+1
  2317  014F  2180               	fcall	_wait_ms
  2318  0150  0008               	return
  2319  0151                     __end_of_setBoostState:	
  2320                           
  2321                           	psect	text8
  2322  0180                     __ptext8:	
  2323 ;; *************** function _wait_ms *****************
  2324 ;; Defined at:
  2325 ;;		line 23 in file "system.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  time            2    0[BANK0 ] unsigned int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0, pclath, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1
  2339 ;;      Params:         0       2       0
  2340 ;;      Locals:         0       0       0
  2341 ;;      Temps:          0       0       0
  2342 ;;      Totals:         0       2       0
  2343 ;;Total ram usage:        2 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    2
  2346 ;; This function calls:
  2347 ;;		___lmul
  2348 ;; This function is called by:
  2349 ;;		_setBoostState
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           
  2354                           ;psect for function _wait_ms
  2355  0180                     _wait_ms:	
  2356                           
  2357                           ;system.c: 25: static long timel = 0;
  2358                           ;system.c: 26: timel = time * 1000l;
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  2362  0180  0020               	movlb	0	; select bank0
  2363  0181  0840               	movf	wait_ms@time,w
  2364  0182  00F1               	movwf	___lmul@multiplier
  2365  0183  0841               	movf	wait_ms@time+1,w
  2366  0184  00F2               	movwf	___lmul@multiplier+1
  2367  0185  01F3               	clrf	___lmul@multiplier+2
  2368  0186  01F4               	clrf	___lmul@multiplier+3
  2369  0187  3000               	movlw	0
  2370  0188  00F8               	movwf	___lmul@multiplicand+3
  2371  0189  3000               	movlw	0
  2372  018A  00F7               	movwf	___lmul@multiplicand+2
  2373  018B  3003               	movlw	3
  2374  018C  00F6               	movwf	___lmul@multiplicand+1
  2375  018D  30E8               	movlw	232
  2376  018E  00F5               	movwf	___lmul@multiplicand
  2377  018F  2151               	fcall	___lmul
  2378  0190  0874               	movf	?___lmul+3,w
  2379  0191  0020               	movlb	0	; select bank0
  2380  0192  00A3               	movwf	wait_ms@timel+3
  2381  0193  0873               	movf	?___lmul+2,w
  2382  0194  00A2               	movwf	wait_ms@timel+2
  2383  0195  0872               	movf	?___lmul+1,w
  2384  0196  00A1               	movwf	wait_ms@timel+1
  2385  0197  0871               	movf	?___lmul,w
  2386  0198  00A0               	movwf	wait_ms@timel
  2387  0199                     l73:	
  2388                           ;system.c: 27: for( ; timel; timel--);
  2389                           
  2390  0199  0823               	movf	wait_ms@timel+3,w
  2391  019A  0422               	iorwf	wait_ms@timel+2,w
  2392  019B  0421               	iorwf	wait_ms@timel+1,w
  2393  019C  0420               	iorwf	wait_ms@timel,w
  2394  019D  1903               	btfsc	3,2
  2395  019E  0008               	return
  2396  019F  30FF               	movlw	255
  2397  01A0  07A0               	addwf	wait_ms@timel,f
  2398  01A1  30FF               	movlw	255
  2399  01A2  3DA1               	addwfc	wait_ms@timel+1,f
  2400  01A3  30FF               	movlw	255
  2401  01A4  3DA2               	addwfc	wait_ms@timel+2,f
  2402  01A5  30FF               	movlw	255
  2403  01A6  3DA3               	addwfc	wait_ms@timel+3,f
  2404  01A7  2999               	goto	l73
  2405  01A8                     __end_of_wait_ms:	
  2406                           
  2407                           	psect	text9
  2408  0151                     __ptext9:	
  2409 ;; *************** function ___lmul *****************
  2410 ;; Defined at:
  2411 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  multiplier      4    1[COMMON] unsigned long 
  2414 ;;  multiplicand    4    5[COMMON] unsigned long 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  product         4    9[COMMON] unsigned long 
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  4    1[COMMON] unsigned long 
  2419 ;; Registers used:
  2420 ;;		wreg, status,2, status,0
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMMON   BANK0   BANK1
  2426 ;;      Params:         8       0       0
  2427 ;;      Locals:         4       0       0
  2428 ;;      Temps:          0       0       0
  2429 ;;      Totals:        12       0       0
  2430 ;;Total ram usage:       12 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:    1
  2433 ;; This function calls:
  2434 ;;		Nothing
  2435 ;; This function is called by:
  2436 ;;		_wait_ms
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           
  2441                           ;psect for function ___lmul
  2442  0151                     ___lmul:	
  2443                           
  2444                           ;incstack = 0
  2445                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2446  0151  3000               	movlw	0
  2447  0152  00FC               	movwf	___lmul@product+3
  2448  0153  3000               	movlw	0
  2449  0154  00FB               	movwf	___lmul@product+2
  2450  0155  3000               	movlw	0
  2451  0156  00FA               	movwf	___lmul@product+1
  2452  0157  3000               	movlw	0
  2453  0158  00F9               	movwf	___lmul@product
  2454  0159                     l875:	
  2455  0159  1C71               	btfss	___lmul@multiplier,0
  2456  015A  2963               	goto	l879
  2457  015B  0875               	movf	___lmul@multiplicand,w
  2458  015C  07F9               	addwf	___lmul@product,f
  2459  015D  0876               	movf	___lmul@multiplicand+1,w
  2460  015E  3DFA               	addwfc	___lmul@product+1,f
  2461  015F  0877               	movf	___lmul@multiplicand+2,w
  2462  0160  3DFB               	addwfc	___lmul@product+2,f
  2463  0161  0878               	movf	___lmul@multiplicand+3,w
  2464  0162  3DFC               	addwfc	___lmul@product+3,f
  2465  0163                     l879:	
  2466  0163  3001               	movlw	1
  2467  0164                     u395:	
  2468  0164  35F5               	lslf	___lmul@multiplicand,f
  2469  0165  0DF6               	rlf	___lmul@multiplicand+1,f
  2470  0166  0DF7               	rlf	___lmul@multiplicand+2,f
  2471  0167  0DF8               	rlf	___lmul@multiplicand+3,f
  2472  0168  0B89               	decfsz	9,f
  2473  0169  2964               	goto	u395
  2474  016A  3001               	movlw	1
  2475  016B                     u405:	
  2476  016B  36F4               	lsrf	___lmul@multiplier+3,f
  2477  016C  0CF3               	rrf	___lmul@multiplier+2,f
  2478  016D  0CF2               	rrf	___lmul@multiplier+1,f
  2479  016E  0CF1               	rrf	___lmul@multiplier,f
  2480  016F  0B89               	decfsz	9,f
  2481  0170  296B               	goto	u405
  2482  0171  0874               	movf	___lmul@multiplier+3,w
  2483  0172  0473               	iorwf	___lmul@multiplier+2,w
  2484  0173  0472               	iorwf	___lmul@multiplier+1,w
  2485  0174  0471               	iorwf	___lmul@multiplier,w
  2486  0175  1D03               	skipz
  2487  0176  2959               	goto	l875
  2488  0177  087C               	movf	___lmul@product+3,w
  2489  0178  00F4               	movwf	?___lmul+3
  2490  0179  087B               	movf	___lmul@product+2,w
  2491  017A  00F3               	movwf	?___lmul+2
  2492  017B  087A               	movf	___lmul@product+1,w
  2493  017C  00F2               	movwf	?___lmul+1
  2494  017D  0879               	movf	___lmul@product,w
  2495  017E  00F1               	movwf	?___lmul
  2496  017F  0008               	return
  2497  0180                     __end_of___lmul:	
  2498                           
  2499                           	psect	text10
  2500  01E1                     __ptext10:	
  2501 ;; *************** function _InitApp *****************
  2502 ;; Defined at:
  2503 ;;		line 27 in file "user.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;		None
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;		None
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  1    wreg      void 
  2510 ;; Registers used:
  2511 ;;		wreg, status,2, status,0, pclath, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMMON   BANK0   BANK1
  2517 ;;      Params:         0       0       0
  2518 ;;      Locals:         0       0       0
  2519 ;;      Temps:          0       0       0
  2520 ;;      Totals:         0       0       0
  2521 ;;Total ram usage:        0 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    2
  2524 ;; This function calls:
  2525 ;;		_init_adc
  2526 ;; This function is called by:
  2527 ;;		_main
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           
  2532                           ;psect for function _InitApp
  2533  01E1                     _InitApp:	
  2534                           
  2535                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  2536                           
  2537                           ;incstack = 0
  2538                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  2539  01E1  0021               	movlb	1	; select bank1
  2540  01E2  100C               	bcf	12,0	;volatile
  2541                           
  2542                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  2543  01E3  108C               	bcf	12,1	;volatile
  2544                           
  2545                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  2546  01E4  110C               	bcf	12,2	;volatile
  2547                           
  2548                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  2549  01E5  160C               	bsf	12,4	;volatile
  2550                           
  2551                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  2552  01E6  168C               	bsf	12,5	;volatile
  2553                           
  2554                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  2555  01E7  0023               	movlb	3	; select bank3
  2556  01E8  120C               	bcf	12,4	;volatile
  2557                           
  2558                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  2559  01E9  0021               	movlb	1	; select bank1
  2560  01EA  100E               	bcf	14,0	;volatile
  2561                           
  2562                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  2563  01EB  108E               	bcf	14,1	;volatile
  2564                           
  2565                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  2566  01EC  110E               	bcf	14,2	;volatile
  2567                           
  2568                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  2569  01ED  118E               	bcf	14,3	;volatile
  2570                           
  2571                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  2572  01EE  120E               	bcf	14,4	;volatile
  2573                           
  2574                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  2575  01EF  128E               	bcf	14,5	;volatile
  2576                           
  2577                           ;user.c: 43: init_adc();
  2578  01F0  21F2               	fcall	_init_adc
  2579  01F1  0008               	return
  2580  01F2                     __end_of_InitApp:	
  2581                           
  2582                           	psect	text11
  2583  01F2                     __ptext11:	
  2584 ;; *************** function _init_adc *****************
  2585 ;; Defined at:
  2586 ;;		line 55 in file "user.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;		None
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;		None
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      void 
  2593 ;; Registers used:
  2594 ;;		wreg, status,2, status,0
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMMON   BANK0   BANK1
  2600 ;;      Params:         0       0       0
  2601 ;;      Locals:         0       0       0
  2602 ;;      Temps:          0       0       0
  2603 ;;      Totals:         0       0       0
  2604 ;;Total ram usage:        0 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    1
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_InitApp
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _init_adc
  2616  01F2                     _init_adc:	
  2617                           
  2618                           ;user.c: 56: ADCON1bits.ADFM = 0b1;
  2619                           
  2620                           ;incstack = 0
  2621                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  2622  01F2  0021               	movlb	1	; select bank1
  2623  01F3  179E               	bsf	30,7	;volatile
  2624                           
  2625                           ;user.c: 57: ADCON1bits.ADCS = 0b110;
  2626  01F4  081E               	movf	30,w	;volatile
  2627  01F5  398F               	andlw	-113
  2628  01F6  3860               	iorlw	96
  2629  01F7  009E               	movwf	30	;volatile
  2630                           
  2631                           ;user.c: 58: ADCON1bits.ADPREF = 0b00;
  2632  01F8  30FC               	movlw	-4
  2633  01F9  059E               	andwf	30,f	;volatile
  2634                           
  2635                           ;user.c: 59: ADCON0bits.ADON = 0b1;
  2636  01FA  141D               	bsf	29,0	;volatile
  2637  01FB  0008               	return
  2638  01FC                     __end_of_init_adc:	
  2639                           
  2640                           	psect	text12
  2641  021F                     __ptext12:	
  2642 ;; *************** function _ConfigureOscillator *****************
  2643 ;; Defined at:
  2644 ;;		line 17 in file "system.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;		None
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  1    wreg      void 
  2651 ;; Registers used:
  2652 ;;		wreg, status,2, status,0
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMMON   BANK0   BANK1
  2658 ;;      Params:         0       0       0
  2659 ;;      Locals:         0       0       0
  2660 ;;      Temps:          0       0       0
  2661 ;;      Totals:         0       0       0
  2662 ;;Total ram usage:        0 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    1
  2665 ;; This function calls:
  2666 ;;		Nothing
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           
  2673                           ;psect for function _ConfigureOscillator
  2674  021F                     _ConfigureOscillator:	
  2675                           
  2676                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  2677                           
  2678                           ;incstack = 0
  2679                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  2680  021F  3078               	movlw	120
  2681  0220  0021               	movlb	1	; select bank1
  2682  0221  0499               	iorwf	25,f	;volatile
  2683                           
  2684                           ;system.c: 20: OSCSTAT = 0x00;
  2685  0222  019A               	clrf	26	;volatile
  2686  0223  0008               	return
  2687  0224                     __end_of_ConfigureOscillator:	
  2688                           
  2689                           	psect	intentry
  2690  0004                     __pintentry:	
  2691 ;; *************** function _isr *****************
  2692 ;; Defined at:
  2693 ;;		line 23 in file "interrupts.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		None
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMMON   BANK0   BANK1
  2707 ;;      Params:         0       0       0
  2708 ;;      Locals:         0       0       0
  2709 ;;      Temps:          1       0       0
  2710 ;;      Totals:         1       0       0
  2711 ;;Total ram usage:        1 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		Interrupt level 1
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720  0004                     _isr:	
  2721                           
  2722                           ;incstack = 0
  2723                           ; Regs used in _isr: []
  2724  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2725  0005  3180               	pagesel	$
  2726  0006  0020               	movlb	0	; select bank0
  2727  0007  087F               	movf	127,w
  2728  0008  00F0               	movwf	??_isr
  2729  0009  0870               	movf	??_isr,w
  2730  000A  00FF               	movwf	127
  2731  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2732  000C  0009               	retfie
  2733  000D                     __end_of_isr:	
  2734  007E                     btemp	set	126	;btemp
  2735  007E                     int$flags	set	126
  2736  007E                     wtemp	set	126
  2737  007E                     wtemp0	set	126
  2738  0080                     wtemp1	set	128
  2739  0082                     wtemp2	set	130
  2740  0084                     wtemp3	set	132
  2741  0086                     wtemp4	set	134
  2742  0088                     wtemp5	set	136
  2743  007F                     wtemp6	set	127
  2744  007E                     ttemp	set	126
  2745  007E                     ttemp0	set	126
  2746  0081                     ttemp1	set	129
  2747  0084                     ttemp2	set	132
  2748  0087                     ttemp3	set	135
  2749  007F                     ttemp4	set	127
  2750  007E                     ltemp	set	126
  2751  007E                     ltemp0	set	126
  2752  0082                     ltemp1	set	130
  2753  0086                     ltemp2	set	134
  2754  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      8      40
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _updateFuzz->_setFeedbackState
    _updateFuzz->_setFuzzState
    _initFuzz->_setFeedbackState
    _initFuzz->_setFuzzState
    _wait_ms->___lmul

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateBoost
    _updateBoost->_setBoostState
    _initBoost->_setBoostState
    _setBoostState->_wait_ms

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2508
                _ConfigureOscillator
                            _InitApp
                          _initBoost
                           _initFuzz
                        _updateBoost
                         _updateFuzz
 ---------------------------------------------------------------------------------
 (1) _updateFuzz                                           3     1      2     646
                                              3 COMMON     3     1      2
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (1) _updateBoost                                          4     2      2     738
                                              4 BANK0      4     2      2
                      _setBoostState
 ---------------------------------------------------------------------------------
 (1) _initFuzz                                             0     0      0     516
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (2) _setFuzzState                                         2     0      2     258
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     2     0      2     258
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initBoost                                            0     0      0     608
                      _setBoostState
 ---------------------------------------------------------------------------------
 (2) _setBoostState                                        2     0      2     608
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     370
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initBoost
     _setBoostState
       _wait_ms
         ___lmul
   _initFuzz
     _setFeedbackState
     _setFuzzState
   _updateBoost
     _setBoostState
       _wait_ms
         ___lmul
   _updateFuzz
     _setFeedbackState
     _setFuzzState

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      35       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      8      28       6       50.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      35       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Aug 02 23:26:26 2016

                 __CFG_CP$OFF 0000                            l73 0199                            l58 01D4  
                 __CFG_LVP$ON 0000                           l149 005A                           l925 0141  
                         l951 0034                           l875 0159                           l955 0045  
                         l879 0163                           l983 008A                           l975 007B  
                         l985 008E                           l995 00AB                           u405 016B  
                         u505 003E                           u435 01AF                           u460 013F  
                         u445 01C3                           u455 0124                           u615 00CE  
                         u625 00DF                           u545 0064                           u650 00F9  
                         u395 0164                           u660 00FA                           u575 0098  
                         u495 002D                           u675 010F                           _isr 0004  
                __CFG_BORV$LO 0000                           wreg 0009                 _boost_pressed 0026  
                        l1013 00D5                          l1025 0101                          l1017 00E6  
                        l1027 0105                          ?_isr 0070                  __CFG_WRT$OFF 0000  
                        _main 01D0                          fsr0h 0005                          fsr1h 0007  
                        fsr0l 0004                          indf0 0000                          fsr1l 0006  
                        btemp 007E                          ltemp 007E      __end_of_setFeedbackState 01D0  
                        start 000D                          ttemp 007E                          wtemp 007E  
       __end_of_setBoostState 0151                 __CFG_MCLRE$ON 0000               __end_of_InitApp 01F2  
                       ??_isr 0070                         ?_main 0070                 __CFG_WDTE$OFF 0000  
         _ConfigureOscillator 021F           ___lmul@multiplicand 0075                __CFG_BOREN$OFF 0000  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080               __end_of_wait_ms 01A8                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003                         wtemp0 007E  
                       wtemp1 0080                         wtemp2 0082                         wtemp3 0084  
                       wtemp4 0086                         wtemp5 0088                         wtemp6 007F  
        ?_ConfigureOscillator 0070               __initialization 000E                  __end_of_main 01E1  
              __CFG_LPBOR$OFF 0000                        ??_main 007D                _feedback_state 002A  
                      _ADRESH 009C                        _ADRESL 009B                        _PMADRH 0192  
                      _PMADRL 0191                        _PMDATH 0194                        _PMDATL 0193  
                      _PMCON2 0196                _debounce_limit 003A                     ??_InitApp 0071  
       ??_ConfigureOscillator 0071                __CFG_PWRTE$OFF 0000                        ___lmul 0151  
              __CFG_STVREN$ON 0000              __end_of_initFuzz 0205              __end_of_init_adc 01FC  
                   ??_wait_ms 007D       __end_of__initialization 001E     updateBoost@debounce_limit 0044  
                ?_updateBoost 0044                __pcstackCOMMON 0070                  __pidataBANK0 0205  
                  __pbssBANK0 0020            __size_of_initBoost 0006             ?_setFeedbackState 0071  
            _long_press_limit 003E                    __pmaintext 01D0            ??_setFeedbackState 0073  
               ?_setFuzzState 0071                       ?___lmul 0071                    __pintentry 0004  
              ___lmul@product 0079      updateFuzz@debounce_limit 0073                       _OSCSTAT 009A  
                  _boost_down 0024                     ?_initFuzz 0070                     ?_init_adc 0070  
                     _InitApp 01E1                ??_setFuzzState 0073               __size_of___lmul 002F  
                     __ptext1 0021                       __ptext2 00C2                       __ptext3 01FC  
                     __ptext4 01A8                       __ptext5 01BC                       __ptext6 0219  
                     __ptext7 011D                       __ptext8 0180                       __ptext9 0151  
           __end_of_initBoost 021F                     _T2CONbits 001C                  __size_of_isr 0009  
                     _fuzz_up 003C        __size_of_setBoostState 0034                       _wait_ms 0180  
                     clrloop0 020E           setFuzzState@f_state 0071          end_of_initialization 001E  
                  ??_initFuzz 0073                       init_ram 0213                    ??_init_adc 0071  
                     initloop 0214                    _fuzz_state 0030          __size_of_updateBoost 005B  
                 wait_ms@time 0040                     _PORTAbits 000C              __CFG_FOSC$INTOSC 0000  
                   _TRISAbits 008C                     _TRISCbits 008E                    _updateFuzz 0021  
     setFeedbackState@f_state 0071   __end_of_ConfigureOscillator 0224                 _setBoostState 011D  
              __end_of___lmul 0180           start_initialization 000E                   __end_of_isr 000D  
        __end_of_setFuzzState 01BC                ?_setBoostState 0042                      ??___lmul 0079  
                 __pdataBANK0 0038          setBoostState@f_state 0042     __size_of_setFeedbackState 0014  
                   ___latbits 0000                 __pcstackBANK0 0040                   ?_updateFuzz 0073  
                    ?_InitApp 0070             __size_of_initFuzz 0009             __size_of_init_adc 000A  
                   _initBoost 0219                      ?_wait_ms 0040                      _LATAbits 010C  
             ??_setBoostState 007D                      _LATCbits 010E                     clear_ram0 020D  
                   _fuzz_down 002C                      _PIR1bits 0011           __size_of_updateFuzz 00A1  
                  _ADCON0bits 009D                    _ADCON1bits 009E         __size_of_setFuzzState 0014  
                 _boost_state 0028                    ?_initBoost 0070             ___lmul@multiplier 0071  
               ??_updateBoost 0046              __size_of_InitApp 0011                  _setFuzzState 01A8  
                  _ANSELAbits 018C              _setFeedbackState 01BC                      __ptext10 01E1  
                    __ptext11 01F2                      __ptext12 021F              __size_of_wait_ms 0028  
                    _boost_up 0038                  _fuzz_pressed 002E                      _initFuzz 01FC  
                    _init_adc 01F2                 __size_of_main 0011  __size_of_ConfigureOscillator 0005  
                    int$flags 007E               _fuzz_turning_on 0034           __end_of_updateBoost 011D  
            _last_boost_state 0036                    _INTCONbits 000B                  ??_updateFuzz 0075  
                 ??_initBoost 007D                      intlevel1 0000                    _PMCON1bits 0195  
           __CFG_CLKOUTEN$OFF 0000                   _fuzz_toggle 0032                    _OSCCONbits 0099  
          __end_of_updateFuzz 00C2                  wait_ms@timel 0020                   _updateBoost 00C2  
